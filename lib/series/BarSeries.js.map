{"version":3,"sources":["../../../src/lib/series/BarSeries.js"],"names":["BarSeries","props","renderSVG","bind","drawOnCanvas","ctx","moreProps","swapScales","xAccessor","identityStack","bars","getBars","clip","getAxisCanvas","Component","propTypes","baseAt","PropTypes","oneOfType","number","func","stroke","bool","width","yAccessor","isRequired","opacity","fill","string","className","defaultProps","StackedBarSeries","xScale","plotData","yScale","chartConfig","getFill","getBase","widthFunctor","offset","Math","floor","filter","d","map","yValue","y","x","round","h","height"],"mappings":"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","file":"BarSeries.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport GenericChartComponent from '../GenericChartComponent';\nimport { getAxisCanvas } from '../GenericComponent';\n\nimport StackedBarSeries, {\n  drawOnCanvasHelper,\n  drawOnCanvas2,\n  getBarsSVG2,\n  svgHelper,\n  identityStack,\n} from './StackedBarSeries';\n\nimport { functor, isDefined } from '../utils';\n\nclass BarSeries extends Component {\n  constructor(props) {\n    super(props);\n    this.renderSVG = this.renderSVG.bind(this);\n    this.drawOnCanvas = this.drawOnCanvas.bind(this);\n  }\n  drawOnCanvas(ctx, moreProps) {\n    if (this.props.swapScales) {\n      const { xAccessor } = moreProps;\n      drawOnCanvasHelper(ctx, this.props, moreProps, xAccessor, identityStack);\n    } else {\n      const bars = getBars(this.props, moreProps);\n      drawOnCanvas2(this.props, ctx, bars);\n    }\n  }\n  renderSVG(moreProps) {\n    if (this.props.swapScales) {\n      const { xAccessor } = moreProps;\n      return (\n        <g>{svgHelper(this.props, moreProps, xAccessor, identityStack)}</g>\n      );\n    } else {\n      const bars = getBars(this.props, moreProps);\n      return <g>{getBarsSVG2(this.props, bars)}</g>;\n    }\n  }\n  render() {\n    const { clip } = this.props;\n\n    return (\n      <GenericChartComponent\n        clip={clip}\n        svgDraw={this.renderSVG}\n        canvasToDraw={getAxisCanvas}\n        canvasDraw={this.drawOnCanvas}\n        drawOn={['pan']}\n      />\n    );\n  }\n}\n\nBarSeries.propTypes = {\n  baseAt: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\n  stroke: PropTypes.bool,\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\n  yAccessor: PropTypes.func.isRequired,\n  opacity: PropTypes.number,\n  fill: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  clip: PropTypes.bool,\n  swapScales: PropTypes.bool,\n};\n\nBarSeries.defaultProps = StackedBarSeries.defaultProps;\n\nexport default BarSeries;\n\n/*\n Initially, this program was using StackedBarSeries.getBars\n to benefit from code reuse and having a single place that\n contains the logic for drawing all types of bar charts\n simple, grouped, horizontal, but turnes out\n making it highly cuztimizable also made it slow for the\n most simple case, a regular bar chart.\n This function contains just the necessary logic\n to create bars\n*/\nfunction getBars(props, moreProps) {\n  const { baseAt, fill, stroke, yAccessor } = props;\n  const {\n    xScale,\n    xAccessor,\n    plotData,\n    chartConfig: { yScale },\n  } = moreProps;\n\n  const getFill = functor(fill);\n  const getBase = functor(baseAt);\n\n  const widthFunctor = functor(props.width);\n\n  const width = widthFunctor(props, {\n    xScale,\n    xAccessor,\n    plotData,\n  });\n  /*\n\tconst barWidth = Math.round(width);\n\tconst offset = Math.round(barWidth === 1 ? 0 : 0.5 * barWidth);\n\t*/\n  const offset = Math.floor(0.5 * width);\n\n  const bars = plotData\n    .filter(d => isDefined(yAccessor(d)))\n    .map(d => {\n      const yValue = yAccessor(d);\n      let y = yScale(yValue);\n\n      const x = Math.round(xScale(xAccessor(d))) - offset;\n      let h = getBase(xScale, yScale, d) - yScale(yValue);\n\n      if (h < 0) {\n        y = y + h;\n        h = -h;\n      }\n\n      return {\n        // type: \"line\"\n        x,\n        y: Math.round(y),\n        height: Math.round(h),\n        width: offset * 2,\n        fill: getFill(d, 0),\n        stroke: stroke ? getFill(d, 0) : 'none',\n      };\n    });\n\n  return bars;\n}\n"]}