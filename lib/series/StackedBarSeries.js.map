{"version":3,"sources":["../../../src/lib/series/StackedBarSeries.js"],"names":["identityStack","drawOnCanvasHelper","svgHelper","getBarsSVG2","drawOnCanvas2","getBars","StackedBarSeries","props","renderSVG","bind","drawOnCanvas","ctx","moreProps","xAccessor","d3Stack","clip","getAxisCanvas","Component","propTypes","baseAt","PropTypes","oneOfType","number","func","isRequired","direction","oneOf","stroke","bool","width","opacity","fill","string","className","defaultProps","xScale","yScale","range","plotDataLengthBarWidth","widthRatio","swapScales","keys","stack","data","response","map","key","i","arrays","array","d","index","x","arguments","length","stackFn","defaultPostAction","identity","postRotateAction","rotateXY","chartConfig","plotData","bars","doStuff","convertToArray","item","Array","isArray","yAccessor","modifiedYAccessor","modifiedXAccessor","modifiedXScale","modifiedYScale","postProcessor","each","y","height","idx","nest","entries","forEach","outer","values","strokeStyle","fillStyle","fillRect","strokeRect","after","spaceBetweenBar","getClassName","getFill","getBase","widthFunctor","barWidth","Math","round","eachBarWidth","offset","ds","appearance","eachYAccessor","_","newData","h","groupOffset","groupWidth","filter","isNaN","bar"],"mappings":"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","file":"StackedBarSeries.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { nest as d3Nest } from 'd3-collection';\nimport { merge } from 'd3-array';\nimport { stack as d3Stack } from 'd3-shape';\n\nimport GenericChartComponent from '../GenericChartComponent';\nimport { getAxisCanvas } from '../GenericComponent';\n\nimport {\n  identity,\n  hexToRGBA,\n  head,\n  functor,\n  plotDataLengthBarWidth,\n} from '../utils';\n\nclass StackedBarSeries extends Component {\n  constructor(props) {\n    super(props);\n    this.renderSVG = this.renderSVG.bind(this);\n    this.drawOnCanvas = this.drawOnCanvas.bind(this);\n  }\n  drawOnCanvas(ctx, moreProps) {\n    const { xAccessor } = moreProps;\n    // var { xScale, chartConfig: { yScale }, plotData } = moreProps;\n\n    drawOnCanvasHelper(ctx, this.props, moreProps, xAccessor, d3Stack);\n  }\n  renderSVG(moreProps) {\n    const { xAccessor } = moreProps;\n\n    return <g>{svgHelper(this.props, moreProps, xAccessor, d3Stack)}</g>;\n  }\n  render() {\n    const { clip } = this.props;\n\n    return (\n      <GenericChartComponent\n        clip={clip}\n        svgDraw={this.renderSVG}\n        canvasDraw={this.drawOnCanvas}\n        canvasToDraw={getAxisCanvas}\n        drawOn={['pan']}\n      />\n    );\n  }\n}\n\nStackedBarSeries.propTypes = {\n  baseAt: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,\n  direction: PropTypes.oneOf(['up', 'down']).isRequired,\n  stroke: PropTypes.bool.isRequired,\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,\n  opacity: PropTypes.number.isRequired,\n  fill: PropTypes.oneOfType([PropTypes.func, PropTypes.string]).isRequired,\n  className: PropTypes.oneOfType([PropTypes.func, PropTypes.string]).isRequired,\n  clip: PropTypes.bool.isRequired,\n};\n\nStackedBarSeries.defaultProps = {\n  baseAt: (xScale, yScale /* , d*/) => head(yScale.range()),\n  direction: 'up',\n  className: 'bar',\n  stroke: true,\n  fill: '#4682B4',\n  opacity: 0.5,\n  width: plotDataLengthBarWidth,\n  widthRatio: 0.8,\n  clip: true,\n  swapScales: false,\n};\n\nexport function identityStack() {\n  let keys = [];\n  function stack(data) {\n    const response = keys.map((key, i) => {\n      // eslint-disable-next-line prefer-const\n      let arrays = data.map(d => {\n        // eslint-disable-next-line prefer-const\n        let array = [0, d[key]];\n        array.data = d;\n        return array;\n      });\n      arrays.key = key;\n      arrays.index = i;\n      return arrays;\n    });\n    return response;\n  }\n  stack.keys = function (x) {\n    if (!arguments.length) {\n      return keys;\n    }\n    keys = x;\n    return stack;\n  };\n  return stack;\n}\n\nexport function drawOnCanvasHelper(\n  ctx,\n  props,\n  moreProps,\n  xAccessor,\n  stackFn,\n  defaultPostAction = identity,\n  postRotateAction = rotateXY\n) {\n  const {\n    xScale,\n    chartConfig: { yScale },\n    plotData,\n  } = moreProps;\n\n  const bars = doStuff(\n    props,\n    xAccessor,\n    plotData,\n    xScale,\n    yScale,\n    stackFn,\n    postRotateAction,\n    defaultPostAction\n  );\n\n  drawOnCanvas2(props, ctx, bars);\n}\n\nfunction convertToArray(item) {\n  return Array.isArray(item) ? item : [item];\n}\n\nexport function svgHelper(\n  props,\n  moreProps,\n  xAccessor,\n  stackFn,\n  defaultPostAction = identity,\n  postRotateAction = rotateXY\n) {\n  const {\n    xScale,\n    chartConfig: { yScale },\n    plotData,\n  } = moreProps;\n  const bars = doStuff(\n    props,\n    xAccessor,\n    plotData,\n    xScale,\n    yScale,\n    stackFn,\n    postRotateAction,\n    defaultPostAction\n  );\n  return getBarsSVG2(props, bars);\n}\n\nfunction doStuff(\n  props,\n  xAccessor,\n  plotData,\n  xScale,\n  yScale,\n  stackFn,\n  postRotateAction,\n  defaultPostAction\n) {\n  const { yAccessor, swapScales } = props;\n\n  const modifiedYAccessor = swapScales\n    ? convertToArray(props.xAccessor)\n    : convertToArray(yAccessor);\n  const modifiedXAccessor = swapScales ? yAccessor : xAccessor;\n\n  const modifiedXScale = swapScales ? yScale : xScale;\n  const modifiedYScale = swapScales ? xScale : yScale;\n\n  const postProcessor = swapScales ? postRotateAction : defaultPostAction;\n\n  const bars = getBars(\n    props,\n    modifiedXAccessor,\n    modifiedYAccessor,\n    modifiedXScale,\n    modifiedYScale,\n    plotData,\n    stackFn,\n    postProcessor\n  );\n\n  return bars;\n}\n\nexport const rotateXY = array =>\n  array.map(each => {\n    return {\n      ...each,\n      x: each.y,\n      y: each.x,\n      height: each.width,\n      width: each.height,\n    };\n  });\n\nexport function getBarsSVG2(props, bars) {\n  /* eslint-disable react/prop-types */\n  const { opacity } = props;\n  /* eslint-enable react/prop-types */\n\n  return bars.map((d, idx) => {\n    if (d.width <= 1) {\n      return (\n        <line\n          key={idx}\n          className={d.className}\n          stroke={d.fill}\n          x1={d.x}\n          y1={d.y}\n          x2={d.x}\n          y2={d.y + d.height}\n        />\n      );\n    }\n    return (\n      <rect\n        key={idx}\n        className={d.className}\n        stroke={d.stroke}\n        fill={d.fill}\n        x={d.x}\n        y={d.y}\n        width={d.width}\n        fillOpacity={opacity}\n        height={d.height}\n      />\n    );\n  });\n}\n\nexport function drawOnCanvas2(props, ctx, bars) {\n  const { stroke } = props;\n\n  const nest = d3Nest()\n    .key(d => d.fill)\n    .entries(bars);\n\n  nest.forEach(outer => {\n    const { key, values } = outer;\n    if (head(values).width > 1) {\n      ctx.strokeStyle = key;\n    }\n    const fillStyle =\n      head(values).width <= 1 ? key : hexToRGBA(key, props.opacity);\n    ctx.fillStyle = fillStyle;\n\n    values.forEach(d => {\n      if (d.width <= 1) {\n        /* <line key={idx} className={d.className}\n\t\t\t\t\t\t\tstroke={stroke}\n\t\t\t\t\t\t\tfill={fill}\n\t\t\t\t\t\t\tx1={d.x} y1={d.y}\n\t\t\t\t\t\t\tx2={d.x} y2={d.y + d.height} />*/\n        /*\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(d.x, d.y);\n\t\t\t\tctx.lineTo(d.x, d.y + d.height);\n\t\t\t\tctx.stroke();\n\t\t\t\t*/\n        ctx.fillRect(d.x - 0.5, d.y, 1, d.height);\n      } else {\n        /* <rect key={idx} className={d.className}\n\t\t\t\t\t\tstroke={stroke}\n\t\t\t\t\t\tfill={fill}\n\t\t\t\t\t\tx={d.x}\n\t\t\t\t\t\ty={d.y}\n\t\t\t\t\t\twidth={d.width}\n\t\t\t\t\t\theight={d.height} /> */\n        /*\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.rect(d.x, d.y, d.width, d.height);\n\t\t\t\tctx.fill();\n\t\t\t\t*/\n        ctx.fillRect(d.x, d.y, d.width, d.height);\n        if (stroke) ctx.strokeRect(d.x, d.y, d.width, d.height);\n      }\n    });\n  });\n}\n\nexport function getBars(\n  props,\n  xAccessor,\n  yAccessor,\n  xScale,\n  yScale,\n  plotData,\n  stack = identityStack,\n  after = identity\n) {\n  const { baseAt, className, fill, stroke, spaceBetweenBar = 0 } = props;\n\n  const getClassName = functor(className);\n  const getFill = functor(fill);\n  const getBase = functor(baseAt);\n\n  const widthFunctor = functor(props.width);\n  const width = widthFunctor(props, {\n    xScale,\n    xAccessor,\n    plotData,\n  });\n\n  const barWidth = Math.round(width);\n\n  const eachBarWidth =\n    (barWidth - spaceBetweenBar * (yAccessor.length - 1)) / yAccessor.length;\n\n  const offset = barWidth === 1 ? 0 : 0.5 * width;\n\n  const ds = plotData.map(each => {\n    // eslint-disable-next-line prefer-const\n    let d = {\n      appearance: {},\n      x: xAccessor(each),\n    };\n    yAccessor.forEach((eachYAccessor, i) => {\n      const key = `y${i}`;\n      d[key] = eachYAccessor(each);\n      const appearance = {\n        className: getClassName(each, i),\n        stroke: stroke ? getFill(each, i) : 'none',\n        fill: getFill(each, i),\n      };\n      d.appearance[key] = appearance;\n    });\n    return d;\n  });\n\n  const keys = yAccessor.map((_, i) => `y${i}`);\n\n  // console.log(ds);\n\n  const data = stack().keys(keys)(ds);\n\n  // console.log(data);\n\n  const newData = data.map((each, i) => {\n    const key = each.key;\n    return each.map(d => {\n      // eslint-disable-next-line prefer-const\n      let array = [d[0], d[1]];\n      array.data = {\n        x: d.data.x,\n        i,\n        appearance: d.data.appearance[key],\n      };\n      return array;\n    });\n  });\n  // console.log(newData);\n  // console.log(merge(newData));\n\n  const bars = merge(newData)\n    // .filter(d => isDefined(d.y))\n    .map(d => {\n      // let baseValue = yScale.invert(getBase(xScale, yScale, d.datum));\n      let y = yScale(d[1]);\n      /* let h = isDefined(d.y0) && d.y0 !== 0 && !isNaN(d.y0)\n\t\t\t\t\t? yScale(d.y0) - y\n\t\t\t\t\t: getBase(xScale, yScale, d.datum) - yScale(d.y)*/\n      let h = getBase(xScale, yScale, d.data) - yScale(d[1] - d[0]);\n      // console.log(d.y, yScale.domain(), yScale.range())\n      // let h = ;\n      // if (d.y < 0) h = -h;\n      // console.log(d, y, h)\n      if (h < 0) {\n        y = y + h;\n        h = -h;\n      }\n      // console.log(d.data.i, Math.round(offset - (d.data.i > 0 ? (eachBarWidth + spaceBetweenBar) * d.data.i : 0)))\n      /* console.log(d.series, d.datum.date, d.x,\n\t\t\t\t\tgetBase(xScale, yScale, d.datum), `d.y=${d.y}, d.y0=${d.y0}, y=${y}, h=${h}`)*/\n      return {\n        ...d.data.appearance,\n        // series: d.series,\n        // i: d.x,\n        x: Math.round(xScale(d.data.x) - width / 2),\n        y: y,\n        groupOffset: Math.round(\n          offset -\n            (d.data.i > 0 ? (eachBarWidth + spaceBetweenBar) * d.data.i : 0)\n        ),\n        groupWidth: Math.round(eachBarWidth),\n        offset: Math.round(offset),\n        height: h,\n        width: barWidth,\n      };\n    })\n    .filter(bar => !isNaN(bar.y));\n\n  return after(bars);\n}\n\nexport default StackedBarSeries;\n"]}