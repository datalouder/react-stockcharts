{"version":3,"sources":["../../../src/lib/series/ScatterSeries.js"],"names":["ScatterSeries","props","renderSVG","bind","drawOnCanvas","ctx","moreProps","xAccessor","points","helper","className","markerProps","map","point","idx","Marker","marker","getAxisCanvas","Component","propTypes","PropTypes","string","yAccessor","func","isRequired","markerProvider","object","defaultProps","xScale","yScale","chartConfig","plotData","Error","d","mProps","fill","stroke","x","y","opacity","datum","nest","key","entries","forEach","fillKey","fillGroup","fillValues","values","fillStyle","strokeValues","strokeGroup"],"mappings":"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","file":"ScatterSeries.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { nest as d3Nest } from 'd3-collection';\n\nimport GenericChartComponent from '../GenericChartComponent';\nimport { getAxisCanvas } from '../GenericComponent';\n\nimport { hexToRGBA, functor } from '../utils';\n\nclass ScatterSeries extends Component {\n  constructor(props) {\n    super(props);\n    this.renderSVG = this.renderSVG.bind(this);\n    this.drawOnCanvas = this.drawOnCanvas.bind(this);\n  }\n  drawOnCanvas(ctx, moreProps) {\n    const { xAccessor } = moreProps;\n\n    const points = helper(this.props, moreProps, xAccessor);\n\n    drawOnCanvas(ctx, this.props, points);\n  }\n  renderSVG(moreProps) {\n    const { className, markerProps } = this.props;\n    const { xAccessor } = moreProps;\n\n    const points = helper(this.props, moreProps, xAccessor);\n\n    return (\n      <g className={className}>\n        {points.map((point, idx) => {\n          const { marker: Marker } = point;\n          return <Marker key={idx} {...markerProps} point={point} />;\n        })}\n      </g>\n    );\n  }\n  render() {\n    return (\n      <GenericChartComponent\n        svgDraw={this.renderSVG}\n        canvasDraw={this.drawOnCanvas}\n        canvasToDraw={getAxisCanvas}\n        drawOn={['pan']}\n      />\n    );\n  }\n}\n\nScatterSeries.propTypes = {\n  className: PropTypes.string,\n  yAccessor: PropTypes.func.isRequired,\n  marker: PropTypes.func,\n  markerProvider: PropTypes.func,\n  markerProps: PropTypes.object,\n};\n\nScatterSeries.defaultProps = {\n  className: 'react-stockcharts-scatter',\n};\n\nfunction helper(props, moreProps, xAccessor) {\n  const { yAccessor, markerProvider, markerProps } = props;\n  let { marker: Marker } = props;\n  const {\n    xScale,\n    chartConfig: { yScale },\n    plotData,\n  } = moreProps;\n\n  if (!(markerProvider || Marker))\n    throw new Error('required prop, either marker or markerProvider missing');\n\n  return plotData.map(d => {\n    if (markerProvider) Marker = markerProvider(d);\n\n    const mProps = { ...Marker.defaultProps, ...markerProps };\n\n    const fill = functor(mProps.fill);\n    const stroke = functor(mProps.stroke);\n\n    return {\n      x: xScale(xAccessor(d)),\n      y: yScale(yAccessor(d)),\n      fill: hexToRGBA(fill(d), mProps.opacity),\n      stroke: stroke(d),\n      datum: d,\n      marker: Marker,\n    };\n  });\n}\n\nfunction drawOnCanvas(ctx, props, points) {\n  const { markerProps } = props;\n\n  const nest = d3Nest()\n    .key(d => d.fill)\n    .key(d => d.stroke)\n    .entries(points);\n\n  nest.forEach(fillGroup => {\n    const { key: fillKey, values: fillValues } = fillGroup;\n\n    if (fillKey !== 'none') {\n      ctx.fillStyle = fillKey;\n    }\n\n    fillValues.forEach(strokeGroup => {\n      // var { key: strokeKey, values: strokeValues } = strokeGroup;\n      const { values: strokeValues } = strokeGroup;\n\n      strokeValues.forEach(point => {\n        const { marker } = point;\n        marker.drawOnCanvas(\n          { ...marker.defaultProps, ...markerProps, fill: fillKey },\n          point,\n          ctx\n        );\n      });\n    });\n  });\n}\n\nexport default ScatterSeries;\n"]}