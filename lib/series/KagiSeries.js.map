{"version":3,"sources":["../../../src/lib/series/KagiSeries.js"],"names":["KagiSeries","props","renderSVG","bind","drawOnCanvas","ctx","moreProps","xAccessor","getAxisCanvas","xScale","yScale","chartConfig","plotData","className","stroke","fill","strokeWidth","paths","helper","map","each","i","dataSeries","x","item","y","curve","curveStepBefore","plot","type","Component","propTypes","PropTypes","string","object","number","isRequired","defaultProps","yang","yin","currentValueStroke","begin","forEach","strokeStyle","lineWidth","beginPath","prevX","d","moveTo","lineTo","lastPlot","length","last","y1","y2","kagiLine","kagi","idx","close","startAs","push","open","changeTo","changePoint","added","current","reverseAt"],"mappings":"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","file":"KagiSeries.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { line, curveStepBefore } from 'd3-shape';\n\nimport GenericChartComponent from '../GenericChartComponent';\nimport { getAxisCanvas } from '../GenericComponent';\nimport { isDefined, isNotDefined } from '../utils';\n\nclass KagiSeries extends Component {\n  constructor(props) {\n    super(props);\n    this.renderSVG = this.renderSVG.bind(this);\n    this.drawOnCanvas = this.drawOnCanvas.bind(this);\n  }\n  drawOnCanvas(ctx, moreProps) {\n    const { xAccessor } = moreProps;\n\n    drawOnCanvas(ctx, this.props, moreProps, xAccessor);\n  }\n  render() {\n    return (\n      <GenericChartComponent\n        svgDraw={this.renderSVG}\n        canvasToDraw={getAxisCanvas}\n        canvasDraw={this.drawOnCanvas}\n        drawOn={['pan']}\n      />\n    );\n  }\n  renderSVG(moreProps) {\n    const { xAccessor } = moreProps;\n    const {\n      xScale,\n      chartConfig: { yScale },\n      plotData,\n    } = moreProps;\n\n    const { className, stroke, fill, strokeWidth } = this.props;\n\n    const paths = helper(plotData, xAccessor).map((each, i) => {\n      const dataSeries = line()\n        .x(item => xScale(item[0]))\n        .y(item => yScale(item[1]))\n        .curve(curveStepBefore);\n\n      dataSeries(each.plot);\n\n      return (\n        <path\n          key={i}\n          d={dataSeries(each.plot)}\n          className={each.type}\n          stroke={stroke[each.type]}\n          fill={fill[each.type]}\n          strokeWidth={strokeWidth}\n        />\n      );\n    });\n    return <g className={className}>{paths}</g>;\n  }\n}\nKagiSeries.propTypes = {\n  className: PropTypes.string,\n  stroke: PropTypes.object,\n  fill: PropTypes.object,\n  strokeWidth: PropTypes.number.isRequired,\n};\n\nKagiSeries.defaultProps = {\n  className: 'react-stockcharts-kagi',\n  strokeWidth: 2,\n  stroke: {\n    yang: '#6BA583',\n    yin: '#E60000',\n  },\n  fill: {\n    yang: 'none',\n    yin: 'none',\n  },\n  currentValueStroke: '#000000',\n};\n\nfunction drawOnCanvas(ctx, props, moreProps, xAccessor) {\n  const { stroke, strokeWidth, currentValueStroke } = props;\n  const {\n    xScale,\n    chartConfig: { yScale },\n    plotData,\n  } = moreProps;\n\n  const paths = helper(plotData, xAccessor);\n\n  let begin = true;\n\n  paths.forEach(each => {\n    ctx.strokeStyle = stroke[each.type];\n    ctx.lineWidth = strokeWidth;\n\n    ctx.beginPath();\n    let prevX;\n    each.plot.forEach(d => {\n      const [x, y] = [xScale(d[0]), yScale(d[1])];\n      if (begin) {\n        ctx.moveTo(x, y);\n        begin = false;\n      } else {\n        if (isDefined(prevX)) {\n          ctx.lineTo(prevX, y);\n        }\n        ctx.lineTo(x, y);\n      }\n      prevX = x;\n      // console.log(d);\n    });\n    ctx.stroke();\n  });\n  const lastPlot = paths[paths.length - 1].plot;\n  const last = lastPlot[lastPlot.length - 1];\n  ctx.beginPath();\n  // ctx.strokeStyle = \"black\";\n  ctx.lineWidth = 1;\n\n  const [x, y1, y2] = [xScale(last[0]), yScale(last[2]), yScale(last[3])];\n  // console.log(last, x, y);\n  ctx.moveTo(x, y1);\n  ctx.lineTo(x + 10, y1);\n  ctx.stroke();\n\n  ctx.beginPath();\n  ctx.strokeStyle = currentValueStroke;\n  ctx.moveTo(x - 10, y2);\n  ctx.lineTo(x, y2);\n  ctx.stroke();\n}\n\nfunction helper(plotData, xAccessor) {\n  const kagiLine = [];\n  let kagi = {};\n  let d = plotData[0];\n  let idx = xAccessor(d);\n\n  for (let i = 0; i < plotData.length; i++) {\n    d = plotData[i];\n\n    if (isNotDefined(d.close)) continue;\n    if (isNotDefined(kagi.type)) kagi.type = d.startAs;\n    if (isNotDefined(kagi.plot)) kagi.plot = [];\n\n    idx = xAccessor(d);\n    kagi.plot.push([idx, d.open]);\n\n    if (isDefined(d.changeTo)) {\n      kagi.plot.push([idx, d.changePoint]);\n      kagi.added = true;\n      kagiLine.push(kagi);\n\n      kagi = {\n        type: d.changeTo,\n        plot: [],\n        added: false,\n      };\n      kagi.plot.push([idx, d.changePoint]);\n    }\n  }\n\n  if (!kagi.added) {\n    kagi.plot.push([idx, d.close, d.current, d.reverseAt]);\n    kagiLine.push(kagi);\n  }\n\n  // console.log(d.reverseAt);\n\n  return kagiLine;\n}\n\nexport default KagiSeries;\n"]}