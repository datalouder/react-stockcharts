{"version":3,"sources":["../../../src/lib/series/VolumeProfileSeries.js"],"names":["VolumeProfileSeries","props","renderSVG","bind","drawOnCanvas","ctx","moreProps","xAccessor","width","helper","rects","sessionBg","getAxisCanvas","className","opacity","showSessionBackground","sessionBackGround","sessionBackGroundOpacity","sessionBgSvg","map","d","idx","i","x","y","w1","height","fill1","stroke1","w2","fill2","stroke2","Component","propTypes","PropTypes","string","number","bool","defaultProps","bins","maxProfileWidthPercent","fill","type","stroke","source","close","volume","absoluteChange","bySession","sessionStart","plotData","date","getMonth","orient","partialStartOK","partialEndOK","realXScale","xScale","yScale","chartConfig","sessionBuilder","discardTillStart","discardTillEnd","accumulateTill","accumulator","identity","dx","length","sessions","allRects","begin","session","finish","sessionWidth","histogram2","value","thresholds","rollup","key","direction","sortKeys","descending","ascending","leaves","values","volumeInBins","arr","entries","volumeValues","each","base","range","start","end","domain","totalVolumes","totalVolume","volumes","totalVolumeX","ws","Math","abs","x1","x0","fillStyle","forEach","beginPath","rect","closePath","strokeStyle"],"mappings":"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","file":"VolumeProfileSeries.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  ascending,\n  descending,\n  sum,\n  max,\n  merge,\n  zip,\n  histogram as d3Histogram,\n} from 'd3-array';\nimport { nest } from 'd3-collection';\nimport { scaleLinear } from 'd3-scale';\n\nimport GenericChartComponent from '../GenericChartComponent';\nimport { getAxisCanvas } from '../GenericComponent';\n\nimport {\n  head,\n  last,\n  hexToRGBA,\n  accumulatingWindow,\n  identity,\n  functor,\n} from '../utils';\n\nclass VolumeProfileSeries extends Component {\n  constructor(props) {\n    super(props);\n    this.renderSVG = this.renderSVG.bind(this);\n    this.drawOnCanvas = this.drawOnCanvas.bind(this);\n  }\n  drawOnCanvas(ctx, moreProps) {\n    const { xAccessor, width } = moreProps;\n    const { rects, sessionBg } = helper(\n      this.props,\n      moreProps,\n      xAccessor,\n      width\n    );\n\n    drawOnCanvas(ctx, this.props, rects, sessionBg);\n  }\n  render() {\n    return (\n      <GenericChartComponent\n        svgDraw={this.renderSVG}\n        canvasDraw={this.drawOnCanvas}\n        canvasToDraw={getAxisCanvas}\n        drawOn={['pan']}\n      />\n    );\n  }\n  renderSVG(moreProps) {\n    const { className, opacity } = this.props;\n    const {\n      showSessionBackground,\n      sessionBackGround,\n      sessionBackGroundOpacity,\n    } = this.props;\n\n    const { xAccessor, width } = moreProps;\n    const { rects, sessionBg } = helper(\n      this.props,\n      moreProps,\n      xAccessor,\n      width\n    );\n\n    const sessionBgSvg = showSessionBackground\n      ? sessionBg.map((d, idx) => (\n          <rect\n            key={idx}\n            {...d}\n            opacity={sessionBackGroundOpacity}\n            fill={sessionBackGround}\n          />\n        ))\n      : null;\n\n    return (\n      <g className={className}>\n        {sessionBgSvg}\n        {rects.map((d, i) => (\n          <g key={i}>\n            <rect\n              x={d.x}\n              y={d.y}\n              width={d.w1}\n              height={d.height}\n              fill={d.fill1}\n              stroke={d.stroke1}\n              fillOpacity={opacity}\n            />\n            <rect\n              x={d.x + d.w1}\n              y={d.y}\n              width={d.w2}\n              height={d.height}\n              fill={d.fill2}\n              stroke={d.stroke2}\n              fillOpacity={opacity}\n            />\n          </g>\n        ))}\n      </g>\n    );\n  }\n}\n\nVolumeProfileSeries.propTypes = {\n  className: PropTypes.string,\n  opacity: PropTypes.number,\n  showSessionBackground: PropTypes.bool,\n  sessionBackGround: PropTypes.string,\n  sessionBackGroundOpacity: PropTypes.number,\n};\n\nVolumeProfileSeries.defaultProps = {\n  className: 'line ',\n  bins: 20,\n  opacity: 0.5,\n  maxProfileWidthPercent: 50,\n  fill: ({ type }) => (type === 'up' ? '#6BA583' : '#FF0000'),\n  stroke: '#FFFFFF',\n  showSessionBackground: false,\n  sessionBackGround: '#4682B4',\n  sessionBackGroundOpacity: 0.3,\n\n  source: d => d.close,\n  volume: d => d.volume,\n  absoluteChange: d => d.absoluteChange,\n  bySession: false,\n  /* eslint-disable no-unused-vars */\n  sessionStart: ({ d, i, plotData }) =>\n    i > 0 && plotData[i - 1].date.getMonth() !== d.date.getMonth(),\n  /* eslint-enable no-unused-vars */\n  orient: 'left',\n  // // fill: ({ type }) => { var c = type === \"up\" ? \"#6BA583\" : \"#FF0000\"; console.log(type, c); return c },\n  // stroke: ({ type }) =>  type === \"up\" ? \"#6BA583\" : \"#FF0000\",\n  // stroke: \"none\",\n  partialStartOK: true,\n  partialEndOK: true,\n};\n\nfunction helper(props, moreProps, xAccessor, width) {\n  const {\n    xScale: realXScale,\n    chartConfig: { yScale },\n    plotData,\n  } = moreProps;\n\n  const { sessionStart, bySession, partialStartOK, partialEndOK } = props;\n  const {\n    bins,\n    maxProfileWidthPercent,\n    source,\n    volume,\n    absoluteChange,\n    orient,\n    fill,\n    stroke,\n  } = props;\n\n  const sessionBuilder = accumulatingWindow()\n    .discardTillStart(!partialStartOK)\n    .discardTillEnd(!partialEndOK)\n    .accumulateTill((d, i) => {\n      return sessionStart({ d, i, ...moreProps });\n    })\n    .accumulator(identity);\n\n  const dx =\n    plotData.length > 1\n      ? realXScale(xAccessor(plotData[1])) -\n        realXScale(xAccessor(head(plotData)))\n      : 0;\n\n  const sessions = bySession ? sessionBuilder(plotData) : [plotData];\n\n  const allRects = sessions.map(session => {\n    const begin = bySession ? realXScale(xAccessor(head(session))) : 0;\n    const finish = bySession ? realXScale(xAccessor(last(session))) : width;\n    const sessionWidth = finish - begin + dx;\n\n    // console.log(session)\n\n    /* var histogram = d3.layout.histogram()\n\t\t\t\t.value(source)\n\t\t\t\t.bins(bins);*/\n\n    const histogram2 = d3Histogram()\n      // .domain(xScale.domain())\n      .value(source)\n      .thresholds(bins);\n\n    // console.log(bins, histogram(session))\n    // console.log(bins, histogram2(session))\n    const rollup = nest()\n      .key(d => d.direction)\n      .sortKeys(orient === 'right' ? descending : ascending)\n      .rollup(leaves => sum(leaves, d => d.volume));\n\n    const values = histogram2(session);\n    // console.log(\"values\", values)\n\n    const volumeInBins = values\n      .map(arr =>\n        arr.map(d =>\n          absoluteChange(d) > 0\n            ? { direction: 'up', volume: volume(d) }\n            : { direction: 'down', volume: volume(d) }\n        )\n      )\n      .map(arr => rollup.entries(arr));\n\n    // console.log(\"volumeInBins\", volumeInBins)\n    const volumeValues = volumeInBins.map(each => sum(each.map(d => d.value)));\n\n    // console.log(\"volumeValues\", volumeValues)\n    const base = xScale => head(xScale.range());\n\n    const [start, end] =\n      orient === 'right'\n        ? [begin, begin + (sessionWidth * maxProfileWidthPercent) / 100]\n        : [\n            finish,\n            finish - (sessionWidth * (100 - maxProfileWidthPercent)) / 100,\n          ];\n\n    const xScale = scaleLinear()\n      .domain([0, max(volumeValues)])\n      .range([start, end]);\n\n    // console.log(xScale.domain())\n\n    const totalVolumes = volumeInBins.map(volumes => {\n      const totalVolume = sum(volumes, d => d.value);\n      const totalVolumeX = xScale(totalVolume);\n      const width = base(xScale) - totalVolumeX;\n      const x = width < 0 ? totalVolumeX + width : totalVolumeX;\n\n      const ws = volumes.map(d => {\n        return {\n          type: d.key,\n          width: (d.value * Math.abs(width)) / totalVolume,\n        };\n      });\n\n      return { x, ws, totalVolumeX };\n    });\n    // console.log(\"totalVolumes\", totalVolumes)\n\n    const rects = zip(values, totalVolumes).map(([d, { x, ws }]) => {\n      const w1 = ws[0] || { type: 'up', width: 0 };\n      const w2 = ws[1] || { type: 'down', width: 0 };\n\n      return {\n        // y: yScale(d.x + d.dx),\n        y: yScale(d.x1),\n        // height: yScale(d.x - d.dx) - yScale(d.x),\n        height: yScale(d.x1) - yScale(d.x0),\n        x,\n        width,\n        w1: w1.width,\n        w2: w2.width,\n        stroke1: functor(stroke)(w1),\n        stroke2: functor(stroke)(w2),\n        fill1: functor(fill)(w1),\n        fill2: functor(fill)(w2),\n      };\n    });\n\n    // console.log(\"rects\", rects)\n\n    const sessionBg = {\n      x: begin,\n      y: last(rects).y,\n      height: head(rects).y - last(rects).y + head(rects).height,\n      width: sessionWidth,\n    };\n\n    return { rects, sessionBg };\n  });\n\n  return {\n    rects: merge(allRects.map(d => d.rects)),\n    sessionBg: allRects.map(d => d.sessionBg),\n  };\n}\n\nfunction drawOnCanvas(ctx, props, rects, sessionBg) {\n  const {\n    opacity,\n    sessionBackGround,\n    sessionBackGroundOpacity,\n    showSessionBackground,\n  } = props;\n\n  // var { rects, sessionBg } = helper(props, xScale, yScale, plotData);\n\n  if (showSessionBackground) {\n    ctx.fillStyle = hexToRGBA(sessionBackGround, sessionBackGroundOpacity);\n\n    sessionBg.forEach(each => {\n      const { x, y, height, width } = each;\n\n      ctx.beginPath();\n      ctx.rect(x, y, width, height);\n      ctx.closePath();\n      ctx.fill();\n    });\n  }\n\n  rects.forEach(each => {\n    const { x, y, height, w1, w2, stroke1, stroke2, fill1, fill2 } = each;\n\n    if (w1 > 0) {\n      ctx.fillStyle = hexToRGBA(fill1, opacity);\n      if (stroke1 !== 'none') ctx.strokeStyle = stroke1;\n\n      ctx.beginPath();\n      ctx.rect(x, y, w1, height);\n      ctx.closePath();\n      ctx.fill();\n\n      if (stroke1 !== 'none') ctx.stroke();\n    }\n\n    if (w2 > 0) {\n      ctx.fillStyle = hexToRGBA(fill2, opacity);\n      if (stroke2 !== 'none') ctx.strokeStyle = stroke2;\n\n      ctx.beginPath();\n      ctx.rect(x + w1, y, w2, height);\n      ctx.closePath();\n      ctx.fill();\n\n      if (stroke2 !== 'none') ctx.stroke();\n    }\n  });\n}\n\nexport default VolumeProfileSeries;\n"]}