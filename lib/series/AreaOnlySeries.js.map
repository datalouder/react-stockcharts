{"version":3,"sources":["../../../src/lib/series/AreaOnlySeries.js"],"names":["AreaOnlySeries","props","renderSVG","bind","drawOnCanvas","ctx","moreProps","yAccessor","defined","base","canvasGradient","fill","stroke","opacity","interpolation","canvasClip","xScale","yScale","chartConfig","plotData","xAccessor","save","fillStyle","strokeStyle","beginPath","newBase","areaSeries","d","x","Math","round","y0","y1","context","curve","restore","style","className","newClassName","concat","getAxisCanvas","Component","propTypes","PropTypes","string","func","isRequired","number","oneOfType","object","defaultProps","isNaN","range"],"mappings":"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","file":"AreaOnlySeries.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { area as d3Area } from 'd3-shape';\n\nimport GenericChartComponent from '../GenericChartComponent';\nimport { getAxisCanvas } from '../GenericComponent';\n\nimport { hexToRGBA, isDefined, first, functor } from '../utils';\n\nclass AreaOnlySeries extends Component {\n  constructor(props) {\n    super(props);\n    this.renderSVG = this.renderSVG.bind(this);\n    this.drawOnCanvas = this.drawOnCanvas.bind(this);\n  }\n  drawOnCanvas(ctx, moreProps) {\n    const { yAccessor, defined, base, canvasGradient } = this.props;\n    const { fill, stroke, opacity, interpolation, canvasClip } = this.props;\n\n    const {\n      xScale,\n      chartConfig: { yScale },\n      plotData,\n      xAccessor,\n    } = moreProps;\n\n    if (canvasClip) {\n      ctx.save();\n      canvasClip(ctx, moreProps);\n    }\n\n    if (canvasGradient != null) {\n      ctx.fillStyle = canvasGradient(moreProps, ctx);\n    } else {\n      ctx.fillStyle = hexToRGBA(fill, opacity);\n    }\n    ctx.strokeStyle = stroke;\n\n    ctx.beginPath();\n    const newBase = functor(base);\n    const areaSeries = d3Area()\n      .defined(d => defined(yAccessor(d)))\n      .x(d => Math.round(xScale(xAccessor(d))))\n      .y0(d => newBase(yScale, d, moreProps))\n      .y1(d => Math.round(yScale(yAccessor(d))))\n      .context(ctx);\n\n    if (isDefined(interpolation)) {\n      areaSeries.curve(interpolation);\n    }\n    areaSeries(plotData);\n    ctx.fill();\n\n    if (canvasClip) {\n      ctx.restore();\n    }\n  }\n  renderSVG(moreProps) {\n    const { yAccessor, defined, base, style } = this.props;\n    const { stroke, fill, className, opacity, interpolation } = this.props;\n\n    const {\n      xScale,\n      chartConfig: { yScale },\n      plotData,\n      xAccessor,\n    } = moreProps;\n\n    const newBase = functor(base);\n    const areaSeries = d3Area()\n      .defined(d => defined(yAccessor(d)))\n      .x(d => Math.round(xScale(xAccessor(d))))\n      .y0(d => newBase(yScale, d, moreProps))\n      .y1(d => Math.round(yScale(yAccessor(d))));\n\n    if (isDefined(interpolation)) {\n      areaSeries.curve(interpolation);\n    }\n\n    const d = areaSeries(plotData);\n    const newClassName = className.concat(\n      isDefined(stroke) ? '' : ' line-stroke'\n    );\n    return (\n      <path\n        style={style}\n        d={d}\n        stroke={stroke}\n        fill={hexToRGBA(fill, opacity)}\n        className={newClassName}\n      />\n    );\n  }\n  render() {\n    return (\n      <GenericChartComponent\n        svgDraw={this.renderSVG}\n        canvasDraw={this.drawOnCanvas}\n        canvasToDraw={getAxisCanvas}\n        drawOn={['pan']}\n      />\n    );\n  }\n}\n\nAreaOnlySeries.propTypes = {\n  className: PropTypes.string,\n  yAccessor: PropTypes.func.isRequired,\n  stroke: PropTypes.string,\n  fill: PropTypes.string,\n  opacity: PropTypes.number,\n  defined: PropTypes.func,\n  base: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),\n  interpolation: PropTypes.func,\n  canvasClip: PropTypes.func,\n  style: PropTypes.object,\n  canvasGradient: PropTypes.func,\n};\n\nAreaOnlySeries.defaultProps = {\n  className: 'line ',\n  fill: 'none',\n  opacity: 1,\n  defined: d => !isNaN(d),\n  base: (yScale /* , d, moreProps */) => first(yScale.range()),\n};\n\nexport default AreaOnlySeries;\n"]}