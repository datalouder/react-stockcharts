{"version":3,"sources":["../../../src/lib/indicator/macd.js"],"names":["base","type","ALGORITHM_TYPE","fill","appearanceOptions","stroke","accessor","d","macd","underlyingAlgorithm","mergedAlgorithm","algorithm","merge","datum","indicator","data","options","Error"],"mappings":";;;;;;kBASe,YAAY;AACzB,MAAMA,OAAO,+BACVC,IADU,CACLC,cADK,EAEVC,IAFU,CAELC,kCAAkBD,IAFb,EAGVE,MAHU,CAGHD,kCAAkBC,MAHf,EAIVC,QAJU,CAID;AAAA,WAAKC,EAAEC,IAAP;AAAA,GAJC,CAAb;;AAMA,MAAMC,sBAAsB,uBAA5B;;AAEA,MAAMC,kBAAkB,oBACrBC,SADqB,CACXF,mBADW,EAErBG,KAFqB,CAEf,UAACC,KAAD,EAAQC,SAAR,EAAsB;AAC3BD,UAAML,IAAN,GAAaM,SAAb;AACD,GAJqB,CAAxB;;AAMA,MAAMA,YAAY,SAAZA,SAAY,CAAUC,IAAV,EAA2C;AAAA,QAA3BC,OAA2B,uEAAjB,EAAEJ,OAAO,IAAT,EAAiB;;AAC3D,QAAII,QAAQJ,KAAZ,EAAmB;AACjB,UAAI,CAACZ,KAAKM,QAAL,EAAL,EACE,MAAM,IAAIW,KAAJ,yBACkBf,cADlB,yBAAN;AAGF,aAAOQ,gBAAgBK,IAAhB,CAAP;AACD;AACD,WAAON,oBAAoBM,IAApB,CAAP;AACD,GATD;;AAWA,qBAAOD,SAAP,EAAkBd,IAAlB,EAAwB,IAAxB,EAA8B,UAA9B,EAA0C,QAA1C,EAAoD,MAApD,EAA4D,MAA5D,EAAoE,MAApE;AACA,qBAAOc,SAAP,EAAkBL,mBAAlB,EAAuC,SAAvC,EAAkD,iBAAlD;AACA,qBAAOK,SAAP,EAAkBJ,eAAlB,EAAmC,OAAnC,EAA4C,eAA5C;;AAEA,SAAOI,SAAP;AACD,C;;AAxCD;;AAEA;;AAEA;;;;AACA;;;;AAEA,IAAMZ,iBAAiB,MAAvB","file":"macd.js","sourcesContent":["import { rebind, merge } from '../utils';\n\nimport { macd } from '../calculator';\n\nimport baseIndicator from './baseIndicator';\nimport { MACD as appearanceOptions } from './defaultOptionsForAppearance';\n\nconst ALGORITHM_TYPE = 'MACD';\n\nexport default function () {\n  const base = baseIndicator()\n    .type(ALGORITHM_TYPE)\n    .fill(appearanceOptions.fill)\n    .stroke(appearanceOptions.stroke)\n    .accessor(d => d.macd);\n\n  const underlyingAlgorithm = macd();\n\n  const mergedAlgorithm = merge()\n    .algorithm(underlyingAlgorithm)\n    .merge((datum, indicator) => {\n      datum.macd = indicator;\n    });\n\n  const indicator = function (data, options = { merge: true }) {\n    if (options.merge) {\n      if (!base.accessor())\n        throw new Error(\n          `Set an accessor to ${ALGORITHM_TYPE} before calculating`\n        );\n      return mergedAlgorithm(data);\n    }\n    return underlyingAlgorithm(data);\n  };\n\n  rebind(indicator, base, 'id', 'accessor', 'stroke', 'fill', 'echo', 'type');\n  rebind(indicator, underlyingAlgorithm, 'options', 'undefinedLength');\n  rebind(indicator, mergedAlgorithm, 'merge', 'skipUndefined');\n\n  return indicator;\n}\n"]}