{"version":3,"sources":["../../../src/lib/interactive/InteractiveText.js"],"names":["InteractiveText","props","handleDraw","bind","handleDrag","handleDragComplete","terminate","saveNodeType","getSelectionState","nodes","state","index","position","setState","override","moreProps","textList","newTextList","map","each","idx","selected","onDragComplete","xyValue","current","start","end","e","enabled","mouseXY","mouseY","yScale","chartConfig","xAccessor","currentItem","invert","defaultText","onChoosePosition","newText","hoverText","defaultHoverText","defaultProps","noop","getMouseCanvas","Component","propTypes","PropTypes","func","isRequired","onSelect","shape","bgFill","string","bgOpacity","number","bgStrokeWidth","bgStroke","textFill","fontFamily","fontWeight","fontStyle","fontSize","text","object","array","bool","HoverTextNearMouse","enable","bgHeight","bgWidth","selectedText","contextTypes","subscribe","unsubscribe","generateSubscriptionId","chartId","oneOfType"],"mappings":";;;;;;;;;;;;AAAA;;;;AACA;;;;AAEA;;AAEA;;AAMA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;IAEMA,e;;;AACJ,2BAAYC,KAAZ,EAAmB;AAAA;;AAAA,kIACXA,KADW;;AAGjB,UAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBC,IAAhB,OAAlB;AACA,UAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBD,IAAhB,OAAlB;AACA,UAAKE,kBAAL,GAA0B,MAAKA,kBAAL,CAAwBF,IAAxB,OAA1B;AACA,UAAKG,SAAL,GAAiBA,kBAAUH,IAAV,OAAjB;;AAEA,UAAKI,YAAL,GAAoBA,qBAAaJ,IAAb,OAApB;AACA,UAAKK,iBAAL,GAAyB,uCAA0B,UAA1B,EAAsCL,IAAtC,OAAzB;;AAEA,UAAKM,KAAL,GAAa,EAAb;AACA,UAAKC,KAAL,GAAa,EAAb;AAZiB;AAalB;;;;+BACUC,K,EAAOC,Q,EAAU;AAC1B,WAAKC,QAAL,CAAc;AACZC,kBAAU;AACRH,sBADQ;AAERC;AAFQ;AADE,OAAd;AAMD;;;uCACkBG,S,EAAW;AAAA;;AAAA,UACpBD,QADoB,GACP,KAAKJ,KADE,CACpBI,QADoB;;AAE5B,UAAI,sBAAUA,QAAV,CAAJ,EAAyB;AAAA,YACfE,QADe,GACF,KAAKf,KADH,CACfe,QADe;;AAEvB,YAAMC,cAAcD,SAASE,GAAT,CAAa,UAACC,IAAD,EAAOC,GAAP,EAAe;AAC9C,cAAMC,WAAWD,QAAQN,SAASH,KAAlC;AACA,iBAAOU,wBAEEF,IAFF;AAGDP,sBAAUE,SAASF,QAHlB;AAIDS;AAJC,4BAOEF,IAPF;AAQDE;AARC,YAAP;AAUD,SAZmB,CAApB;AAaA,aAAKR,QAAL,CACE;AACEC,oBAAU;AADZ,SADF,EAIE,YAAM;AACJ,iBAAKb,KAAL,CAAWqB,cAAX,CAA0BL,WAA1B,EAAuCF,SAAvC;AACD,SANH;AAQD;AACF;;;mCACcQ,O,EAAS;AAAA,UACdC,OADc,GACF,KAAKd,KADH,CACdc,OADc;;;AAGtB,UAAI,sBAAUA,OAAV,KAAsB,sBAAUA,QAAQC,KAAlB,CAA1B,EAAoD;AAClD,aAAKZ,QAAL,CAAc;AACZW,mBAAS;AACPC,mBAAOD,QAAQC,KADR;AAEPC,iBAAKH;AAFE;AADG,SAAd;AAMD;AACF;;;+BACUR,S,EAAWY,C,EAAG;AAAA,UACfC,OADe,GACH,KAAK3B,KADF,CACf2B,OADe;;AAEvB,UAAIA,OAAJ,EAAa;AAAA,gDAMPb,SANO,CAETc,OAFS;AAAA,YAEGC,MAFH;AAAA,YAGMC,MAHN,GAMPhB,SANO,CAGTiB,WAHS,CAGMD,MAHN;AAAA,YAITE,SAJS,GAMPlB,SANO,CAITkB,SAJS;AAAA,YAKTC,WALS,GAMPnB,SANO,CAKTmB,WALS;;AAQX,YAAMX,UAAU,CAACU,UAAUC,WAAV,CAAD,EAAyBH,OAAOI,MAAP,CAAcL,MAAd,CAAzB,CAAhB;;AARW,qBAU+B,KAAK7B,KAVpC;AAAA,YAUHmC,WAVG,UAUHA,WAVG;AAAA,YAUUC,gBAVV,UAUUA,gBAVV;;;AAYX,YAAMC,uBACDF,WADC;AAEJxB,oBAAUW;AAFN,UAAN;AAIAc,yBAAiBC,OAAjB,EAA0BvB,SAA1B,EAAqCY,CAArC;AACD,OAnBsB,CAmBrB;;;AAGH;;;6BACQ;AAAA;;AAAA,oBACsC,KAAK1B,KAD3C;AAAA,UACCe,QADD,WACCA,QADD;AAAA,UACWoB,WADX,WACWA,WADX;AAAA,UACwBG,SADxB,WACwBA,SADxB;AAAA,UAECzB,QAFD,GAEc,KAAKJ,KAFnB,CAECI,QAFD;;AAGP,aACE;AAAA;AAAA;AACGE,iBAASE,GAAT,CAAa,UAACC,IAAD,EAAOC,GAAP,EAAe;AAC3B,cAAMoB,mBAAmBxC,gBAAgByC,YAAhB,CAA6BF,SAAtD;AACA,cAAMtC,qBACDmC,WADC,EAEDjB,IAFC;AAGJoB,oCACKC,gBADL,EAEKD,SAFL,EAGMpB,KAAKoB,SAAL,IAAkB,EAHxB;AAHI,YAAN;AASA,iBACE,8BAAC,kBAAD;AACE,iBAAKnB,GADP;AAEE,iBAAK,OAAKb,YAAL,CAAkBa,GAAlB,CAFP;AAGE,mBAAOA;AAHT,aAIMnB,KAJN;AAKE,sBAAUkB,KAAKE,QALjB;AAME,sBAAU,kCACRP,QADQ,EAERM,GAFQ,EAGR,UAHQ,EAIRD,KAAKP,QAJG,CANZ;AAYE,oBAAQ,OAAKR,UAZf;AAaE,4BAAgB,OAAKC,kBAbvB;AAcE,mCAAsB;AAdxB,aADF;AAkBD,SA7BA,CADH;AA+BE,sCAAC,+BAAD;AACE,mBAAS,KAAKH,UADhB;AAEE,mBAASwC,WAFX;AAGE,sBAAYA,WAHd;AAIE,wBAAcC,gCAJhB;AAKE,kBAAQ,CAAC,WAAD,EAAc,KAAd;AALV,UA/BF;AAAA;AAAA,OADF;AA0CD;;;;EAlI2BC,gB;;AAqI9B5C,gBAAgB6C,SAAhB,GAA4B;AAC1BR,oBAAkBS,oBAAUC,IAAV,CAAeC,UADP;AAE1B1B,kBAAgBwB,oBAAUC,IAAV,CAAeC,UAFL;AAG1BC,YAAUH,oBAAUC,IAHM;;AAK1BX,eAAaU,oBAAUI,KAAV,CAAgB;AAC3BC,YAAQL,oBAAUM,MAAV,CAAiBJ,UADE;AAE3BK,eAAWP,oBAAUQ,MAAV,CAAiBN,UAFD;AAG3BO,mBAAeT,oBAAUQ,MAHE;AAI3BE,cAAUV,oBAAUM,MAJO;AAK3BK,cAAUX,oBAAUM,MAAV,CAAiBJ,UALA;AAM3BU,gBAAYZ,oBAAUM,MAAV,CAAiBJ,UANF;AAO3BW,gBAAYb,oBAAUM,MAAV,CAAiBJ,UAPF;AAQ3BY,eAAWd,oBAAUM,MAAV,CAAiBJ,UARD;AAS3Ba,cAAUf,oBAAUQ,MAAV,CAAiBN,UATA;AAU3Bc,UAAMhB,oBAAUM,MAAV,CAAiBJ;AAVI,GAAhB,EAWVA,UAhBuB;;AAkB1BT,aAAWO,oBAAUiB,MAAV,CAAiBf,UAlBF;AAmB1BhC,YAAU8B,oBAAUkB,KAAV,CAAgBhB,UAnBA;AAoB1BpB,WAASkB,oBAAUmB,IAAV,CAAejB;AApBE,CAA5B;;AAuBAhD,gBAAgByC,YAAhB,GAA+B;AAC7BJ,oBAAkBK,WADW;AAE7BpB,kBAAgBoB,WAFa;AAG7BO,YAAUP,WAHmB;;AAK7BN,eAAa;AACXe,YAAQ,SADG;AAEXE,eAAW,CAFA;AAGXE,mBAAe,CAHJ;AAIXE,cAAU,SAJC;AAKXC,gBAAY,8CALD;AAMXG,cAAU,EANC;AAOXD,eAAW,QAPA;AAQXD,gBAAY,QARD;AASXG,UAAM;AATK,GALgB;AAgB7BvB,0BACK2B,6BAAmBzB,YADxB;AAEE0B,YAAQ,IAFV;AAGEC,cAAU,MAHZ;AAIEC,aAAS,MAJX;AAKEP,UAAM,wBALR;AAMEQ,kBAAc;AANhB,IAhB6B;AAwB7BtD,YAAU;AAxBmB,CAA/B;;AA2BAhB,gBAAgBuE,YAAhB,GAA+B;AAC7BC,aAAW1B,oBAAUC,IAAV,CAAeC,UADG;AAE7ByB,eAAa3B,oBAAUC,IAAV,CAAeC,UAFC;AAG7B0B,0BAAwB5B,oBAAUC,IAAV,CAAeC,UAHV;AAI7B2B,WAAS7B,oBAAU8B,SAAV,CAAoB,CAAC9B,oBAAUQ,MAAX,EAAmBR,oBAAUM,MAA7B,CAApB,EAA0DJ;AAJtC,CAA/B;;kBAOehD,e","file":"InteractiveText.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { isDefined, noop } from '../utils';\n\nimport {\n  getValueFromOverride,\n  terminate,\n  saveNodeType,\n  isHoverForInteractiveType,\n} from './utils';\nimport EachText from './wrapper/EachText';\nimport HoverTextNearMouse from './components/HoverTextNearMouse';\nimport GenericChartComponent from '../GenericChartComponent';\nimport { getMouseCanvas } from '../GenericComponent';\n\nclass InteractiveText extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDraw = this.handleDraw.bind(this);\n    this.handleDrag = this.handleDrag.bind(this);\n    this.handleDragComplete = this.handleDragComplete.bind(this);\n    this.terminate = terminate.bind(this);\n\n    this.saveNodeType = saveNodeType.bind(this);\n    this.getSelectionState = isHoverForInteractiveType('textList').bind(this);\n\n    this.nodes = [];\n    this.state = {};\n  }\n  handleDrag(index, position) {\n    this.setState({\n      override: {\n        index,\n        position,\n      },\n    });\n  }\n  handleDragComplete(moreProps) {\n    const { override } = this.state;\n    if (isDefined(override)) {\n      const { textList } = this.props;\n      const newTextList = textList.map((each, idx) => {\n        const selected = idx === override.index;\n        return selected\n          ? {\n              ...each,\n              position: override.position,\n              selected,\n            }\n          : {\n              ...each,\n              selected,\n            };\n      });\n      this.setState(\n        {\n          override: null,\n        },\n        () => {\n          this.props.onDragComplete(newTextList, moreProps);\n        }\n      );\n    }\n  }\n  handleDrawLine(xyValue) {\n    const { current } = this.state;\n\n    if (isDefined(current) && isDefined(current.start)) {\n      this.setState({\n        current: {\n          start: current.start,\n          end: xyValue,\n        },\n      });\n    }\n  }\n  handleDraw(moreProps, e) {\n    const { enabled } = this.props;\n    if (enabled) {\n      const {\n        mouseXY: [, mouseY],\n        chartConfig: { yScale },\n        xAccessor,\n        currentItem,\n      } = moreProps;\n\n      const xyValue = [xAccessor(currentItem), yScale.invert(mouseY)];\n\n      const { defaultText, onChoosePosition } = this.props;\n\n      const newText = {\n        ...defaultText,\n        position: xyValue,\n      };\n      onChoosePosition(newText, moreProps, e);\n    } /*  else {\n\t\t\tthis.handleClick(moreProps, e);\n\t\t} */\n  }\n  render() {\n    const { textList, defaultText, hoverText } = this.props;\n    const { override } = this.state;\n    return (\n      <g>\n        {textList.map((each, idx) => {\n          const defaultHoverText = InteractiveText.defaultProps.hoverText;\n          const props = {\n            ...defaultText,\n            ...each,\n            hoverText: {\n              ...defaultHoverText,\n              ...hoverText,\n              ...(each.hoverText || {}),\n            },\n          };\n          return (\n            <EachText\n              key={idx}\n              ref={this.saveNodeType(idx)}\n              index={idx}\n              {...props}\n              selected={each.selected}\n              position={getValueFromOverride(\n                override,\n                idx,\n                'position',\n                each.position\n              )}\n              onDrag={this.handleDrag}\n              onDragComplete={this.handleDragComplete}\n              edgeInteractiveCursor=\"react-stockcharts-move-cursor\"\n            />\n          );\n        })}\n        <GenericChartComponent\n          onClick={this.handleDraw}\n          svgDraw={noop}\n          canvasDraw={noop}\n          canvasToDraw={getMouseCanvas}\n          drawOn={['mousemove', 'pan']}\n        />\n        ;\n      </g>\n    );\n  }\n}\n\nInteractiveText.propTypes = {\n  onChoosePosition: PropTypes.func.isRequired,\n  onDragComplete: PropTypes.func.isRequired,\n  onSelect: PropTypes.func,\n\n  defaultText: PropTypes.shape({\n    bgFill: PropTypes.string.isRequired,\n    bgOpacity: PropTypes.number.isRequired,\n    bgStrokeWidth: PropTypes.number,\n    bgStroke: PropTypes.string,\n    textFill: PropTypes.string.isRequired,\n    fontFamily: PropTypes.string.isRequired,\n    fontWeight: PropTypes.string.isRequired,\n    fontStyle: PropTypes.string.isRequired,\n    fontSize: PropTypes.number.isRequired,\n    text: PropTypes.string.isRequired,\n  }).isRequired,\n\n  hoverText: PropTypes.object.isRequired,\n  textList: PropTypes.array.isRequired,\n  enabled: PropTypes.bool.isRequired,\n};\n\nInteractiveText.defaultProps = {\n  onChoosePosition: noop,\n  onDragComplete: noop,\n  onSelect: noop,\n\n  defaultText: {\n    bgFill: '#D3D3D3',\n    bgOpacity: 1,\n    bgStrokeWidth: 1,\n    textFill: '#F10040',\n    fontFamily: 'Helvetica Neue, Helvetica, Arial, sans-serif',\n    fontSize: 12,\n    fontStyle: 'normal',\n    fontWeight: 'normal',\n    text: 'Lorem ipsum...',\n  },\n  hoverText: {\n    ...HoverTextNearMouse.defaultProps,\n    enable: true,\n    bgHeight: 'auto',\n    bgWidth: 'auto',\n    text: 'Click to select object',\n    selectedText: '',\n  },\n  textList: [],\n};\n\nInteractiveText.contextTypes = {\n  subscribe: PropTypes.func.isRequired,\n  unsubscribe: PropTypes.func.isRequired,\n  generateSubscriptionId: PropTypes.func.isRequired,\n  chartId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n};\n\nexport default InteractiveText;\n"]}