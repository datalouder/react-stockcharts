{"version":3,"sources":["../../../../src/lib/interactive/wrapper/EachEquidistantChannel.js"],"names":["EachEquidistantChannel","props","handleLine1Edge1Drag","bind","handleLine1Edge2Drag","handleDragStart","handleChannelDrag","handleChannelHeightChange","getEdgeCircle","handleHover","isHover","saveNodeType","nodes","state","hover","moreProps","hovering","setState","startXY","endXY","dy","dragStart","index","onDrag","xScale","yScale","chartConfig","xAccessor","fullData","startPos","mouseXY","x1","y1","x2","y2","dx","newX1Value","newY1Value","invert","newX2Value","newY2Value","newDy","xy","dragHandler","cursor","fill","edge","appearance","edgeStroke","edgeStrokeWidth","r","selected","onDragComplete","interactive","hoverText","edgeFill","edgeFill2","stroke","strokeWidth","strokeOpacity","fillOpacity","hoverTextEnabled","enable","restHoverTextProps","hoverHandler","onHover","onUnHover","line1Edge","line2Edge","Component","propTypes","PropTypes","arrayOf","number","isRequired","bool","object","shape","string","func","defaultProps","yDisplayFormat","d","toFixed","noop"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AAEA;;AACA;;AACA;;AAEA;;;;AACA;;;;AACA;;;;;;;;;;;;;;IAEMA,sB;;;AACJ,kCAAYC,KAAZ,EAAmB;AAAA;;AAAA,gJACXA,KADW;;AAGjB,UAAKC,oBAAL,GAA4B,MAAKA,oBAAL,CAA0BC,IAA1B,OAA5B;AACA,UAAKC,oBAAL,GAA4B,MAAKA,oBAAL,CAA0BD,IAA1B,OAA5B;;AAEA,UAAKE,eAAL,GAAuB,MAAKA,eAAL,CAAqBF,IAArB,OAAvB;AACA,UAAKG,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBH,IAAvB,OAAzB;;AAEA,UAAKI,yBAAL,GAAiC,MAAKA,yBAAL,CAA+BJ,IAA/B,OAAjC;;AAEA,UAAKK,aAAL,GAAqB,MAAKA,aAAL,CAAmBL,IAAnB,OAArB;AACA,UAAKM,WAAL,GAAmB,MAAKA,WAAL,CAAiBN,IAAjB,OAAnB;;AAEA,UAAKO,OAAL,GAAeA,gBAAQP,IAAR,OAAf;AACA,UAAKQ,YAAL,GAAoBA,qBAAaR,IAAb,OAApB;AACA,UAAKS,KAAL,GAAa,EAAb;;AAEA,UAAKC,KAAL,GAAa;AACXC,aAAO;AADI,KAAb;AAlBiB;AAqBlB;;;;gCACWC,S,EAAW;AACrB,UAAI,KAAKF,KAAL,CAAWC,KAAX,KAAqBC,UAAUC,QAAnC,EAA6C;AAC3C,aAAKC,QAAL,CAAc;AACZH,iBAAOC,UAAUC;AADL,SAAd;AAGD;AACF;;;sCACiB;AAAA,mBACe,KAAKf,KADpB;AAAA,UACRiB,OADQ,UACRA,OADQ;AAAA,UACCC,KADD,UACCA,KADD;AAAA,UACQC,EADR,UACQA,EADR;;;AAGhB,WAAKC,SAAL,GAAiB;AACfH,wBADe;AAEfC,oBAFe;AAGfC;AAHe,OAAjB;AAKD;;;sCACiBL,S,EAAW;AAAA,oBACD,KAAKd,KADJ;AAAA,UACnBqB,KADmB,WACnBA,KADmB;AAAA,UACZC,MADY,WACZA,MADY;AAAA,uBAGA,KAAKF,SAHL;AAAA,UAGnBH,OAHmB,cAGnBA,OAHmB;AAAA,UAGVC,KAHU,cAGVA,KAHU;AAAA,UAMzBK,MANyB,GAUvBT,SAVuB,CAMzBS,MANyB;AAAA,UAOVC,MAPU,GAUvBV,SAVuB,CAOzBW,WAPyB,CAOVD,MAPU;AAAA,UAQzBE,SARyB,GAUvBZ,SAVuB,CAQzBY,SARyB;AAAA,UASzBC,QATyB,GAUvBb,SAVuB,CASzBa,QATyB;AAAA,UAWnBC,QAXmB,GAWGd,SAXH,CAWnBc,QAXmB;AAAA,UAWTC,OAXS,GAWGf,SAXH,CAWTe,OAXS;;;AAa3B,UAAMC,KAAKP,OAAON,QAAQ,CAAR,CAAP,CAAX;AACA,UAAMc,KAAKP,OAAOP,QAAQ,CAAR,CAAP,CAAX;AACA,UAAMe,KAAKT,OAAOL,MAAM,CAAN,CAAP,CAAX;AACA,UAAMe,KAAKT,OAAON,MAAM,CAAN,CAAP,CAAX;;AAEA,UAAMgB,KAAKN,SAAS,CAAT,IAAcC,QAAQ,CAAR,CAAzB;AACA,UAAMV,KAAKS,SAAS,CAAT,IAAcC,QAAQ,CAAR,CAAzB;;AAEA,UAAMM,aAAa,8BACjBZ,MADiB,EAEjBG,SAFiB,EAGjB,CAACI,KAAKI,EAAN,EAAUH,KAAKZ,EAAf,CAHiB,EAIjBQ,QAJiB,CAAnB;AAMA,UAAMS,aAAaZ,OAAOa,MAAP,CAAcN,KAAKZ,EAAnB,CAAnB;AACA,UAAMmB,aAAa,8BACjBf,MADiB,EAEjBG,SAFiB,EAGjB,CAACM,KAAKE,EAAN,EAAUD,KAAKd,EAAf,CAHiB,EAIjBQ,QAJiB,CAAnB;AAMA,UAAMY,aAAaf,OAAOa,MAAP,CAAcJ,KAAKd,EAAnB,CAAnB;;AAEA;;AAEAG,aAAOD,KAAP,EAAc;AACZJ,iBAAS,CAACkB,UAAD,EAAaC,UAAb,CADG;AAEZlB,eAAO,CAACoB,UAAD,EAAaC,UAAb,CAFK;AAGZpB,YAAI,KAAKC,SAAL,CAAeD;AAHP,OAAd;AAKD;;;yCACoBL,S,EAAW;AAAA,oBACJ,KAAKd,KADD;AAAA,UACtBqB,KADsB,WACtBA,KADsB;AAAA,UACfC,MADe,WACfA,MADe;AAAA,UAEtBL,OAFsB,GAEV,KAAKG,SAFK,CAEtBH,OAFsB;AAAA,UAK5BW,QAL4B,GAW1Bd,SAX0B,CAK5Bc,QAL4B;AAAA,UAM5BC,OAN4B,GAW1Bf,SAX0B,CAM5Be,OAN4B;AAAA,UAO5BH,SAP4B,GAW1BZ,SAX0B,CAO5BY,SAP4B;AAAA,UAQ5BH,MAR4B,GAW1BT,SAX0B,CAQ5BS,MAR4B;AAAA,UAS5BI,QAT4B,GAW1Bb,SAX0B,CAS5Ba,QAT4B;AAAA,UAUbH,MAVa,GAW1BV,SAX0B,CAU5BW,WAV4B,CAUbD,MAVa;;;AAa9B,UAAMU,KAAKN,SAAS,CAAT,IAAcC,QAAQ,CAAR,CAAzB;AACA,UAAMV,KAAKS,SAAS,CAAT,IAAcC,QAAQ,CAAR,CAAzB;;AAEA,UAAMC,KAAKP,OAAON,QAAQ,CAAR,CAAP,CAAX;AACA,UAAMc,KAAKP,OAAOP,QAAQ,CAAR,CAAP,CAAX;;AAEA,UAAMkB,aAAa,8BACjBZ,MADiB,EAEjBG,SAFiB,EAGjB,CAACI,KAAKI,EAAN,EAAUH,KAAKZ,EAAf,CAHiB,EAIjBQ,QAJiB,CAAnB;AAMA,UAAMS,aAAaZ,OAAOa,MAAP,CAAcN,KAAKZ,EAAnB,CAAnB;;AAEAG,aAAOD,KAAP,EAAc;AACZJ,iBAAS,CAACkB,UAAD,EAAaC,UAAb,CADG;AAEZlB,eAAO,KAAKE,SAAL,CAAeF,KAFV;AAGZC,YAAI,KAAKC,SAAL,CAAeD;AAHP,OAAd;AAKD;;;yCACoBL,S,EAAW;AAAA,oBACJ,KAAKd,KADD;AAAA,UACtBqB,KADsB,WACtBA,KADsB;AAAA,UACfC,MADe,WACfA,MADe;AAAA,UAEtBJ,KAFsB,GAEZ,KAAKE,SAFO,CAEtBF,KAFsB;AAAA,UAK5BU,QAL4B,GAW1Bd,SAX0B,CAK5Bc,QAL4B;AAAA,UAM5BC,OAN4B,GAW1Bf,SAX0B,CAM5Be,OAN4B;AAAA,UAO5BH,SAP4B,GAW1BZ,SAX0B,CAO5BY,SAP4B;AAAA,UAQ5BH,MAR4B,GAW1BT,SAX0B,CAQ5BS,MAR4B;AAAA,UAS5BI,QAT4B,GAW1Bb,SAX0B,CAS5Ba,QAT4B;AAAA,UAUbH,MAVa,GAW1BV,SAX0B,CAU5BW,WAV4B,CAUbD,MAVa;;;AAa9B,UAAMU,KAAKN,SAAS,CAAT,IAAcC,QAAQ,CAAR,CAAzB;AACA,UAAMV,KAAKS,SAAS,CAAT,IAAcC,QAAQ,CAAR,CAAzB;;AAEA,UAAMC,KAAKP,OAAOL,MAAM,CAAN,CAAP,CAAX;AACA,UAAMa,KAAKP,OAAON,MAAM,CAAN,CAAP,CAAX;;AAEA,UAAMiB,aAAa,8BACjBZ,MADiB,EAEjBG,SAFiB,EAGjB,CAACI,KAAKI,EAAN,EAAUH,KAAKZ,EAAf,CAHiB,EAIjBQ,QAJiB,CAAnB;AAMA,UAAMS,aAAaZ,OAAOa,MAAP,CAAcN,KAAKZ,EAAnB,CAAnB;;AAEAG,aAAOD,KAAP,EAAc;AACZJ,iBAAS,KAAKG,SAAL,CAAeH,OADZ;AAEZC,eAAO,CAACiB,UAAD,EAAaC,UAAb,CAFK;AAGZjB,YAAI,KAAKC,SAAL,CAAeD;AAHP,OAAd;AAKD;;;8CACyBL,S,EAAW;AAAA,oBACT,KAAKd,KADI;AAAA,UAC3BqB,KAD2B,WAC3BA,KAD2B;AAAA,UACpBC,MADoB,WACpBA,MADoB;AAAA,wBAGR,KAAKF,SAHG;AAAA,UAG3BH,OAH2B,eAG3BA,OAH2B;AAAA,UAGlBC,KAHkB,eAGlBA,KAHkB;AAAA,UAMlBM,MANkB,GAO/BV,SAP+B,CAMjCW,WANiC,CAMlBD,MANkB;AAAA,UAQ3BI,QAR2B,GAQLd,SARK,CAQ3Bc,QAR2B;AAAA,UAQjBC,OARiB,GAQLf,SARK,CAQjBe,OARiB;;;AAUnC,UAAMI,KAAKT,OAAON,MAAM,CAAN,CAAP,CAAX;;AAEA,UAAMC,KAAKS,SAAS,CAAT,IAAcC,QAAQ,CAAR,CAAzB;;AAEA,UAAMU,aAAaf,OAAOa,MAAP,CAAcJ,KAAKd,EAAnB,CAAnB;;AAEA,UAAMqB,QAAQD,aAAarB,MAAM,CAAN,CAAb,GAAwB,KAAKE,SAAL,CAAeD,EAArD;;AAEAG,aAAOD,KAAP,EAAc;AACZJ,wBADY;AAEZC,oBAFY;AAGZC,YAAIqB;AAHQ,OAAd;AAKD;;;wCACsD;AAAA,UAAvCC,EAAuC,QAAvCA,EAAuC;AAAA,UAAnCC,WAAmC,QAAnCA,WAAmC;AAAA,UAAtBC,MAAsB,QAAtBA,MAAsB;AAAA,UAAdC,IAAc,QAAdA,IAAc;AAAA,UAARC,IAAQ,QAARA,IAAQ;AAAA,UAC7ChC,KAD6C,GACnC,KAAKD,KAD8B,CAC7CC,KAD6C;AAAA,UAE7CiC,UAF6C,GAE9B,KAAK9C,KAFyB,CAE7C8C,UAF6C;AAAA,UAG7CC,UAH6C,GAGVD,UAHU,CAG7CC,UAH6C;AAAA,UAGjCC,eAHiC,GAGVF,UAHU,CAGjCE,eAHiC;AAAA,UAGhBC,CAHgB,GAGVH,UAHU,CAGhBG,CAHgB;AAAA,UAI7CC,QAJ6C,GAIhC,KAAKlD,KAJ2B,CAI7CkD,QAJ6C;AAAA,UAK7CC,cAL6C,GAK1B,KAAKnD,KALqB,CAK7CmD,cAL6C;;;AAOrD,aACE,8BAAC,yBAAD;AACE,aAAK,KAAKzC,YAAL,CAAkBmC,IAAlB,CADP;AAEE,cAAMK,YAAYrC,KAFpB;AAGE,YAAI4B,GAAG,CAAH,CAHN;AAIE,YAAIA,GAAG,CAAH,CAJN;AAKE,WAAGQ,CALL;AAME,cAAML,IANR;AAOE,gBAAQG,UAPV;AAQE,qBAAaC,eARf;AASE,gCAAwBL,MAT1B;AAUE,qBAAa,KAAKvC,eAVpB;AAWE,gBAAQsC,WAXV;AAYE,wBAAgBS;AAZlB,QADF;AAgBD;;;6BACQ;AAAA,oBACwB,KAAKnD,KAD7B;AAAA,UACCiB,OADD,WACCA,OADD;AAAA,UACUC,KADV,WACUA,KADV;AAAA,UACiBC,EADjB,WACiBA,EADjB;AAAA,oBAEwC,KAAKnB,KAF7C;AAAA,UAECoD,WAFD,WAECA,WAFD;AAAA,UAEcC,SAFd,WAEcA,SAFd;AAAA,UAEyBP,UAFzB,WAEyBA,UAFzB;AAAA,UAILQ,QAJK,GAWHR,UAXG,CAILQ,QAJK;AAAA,UAKLC,SALK,GAWHT,UAXG,CAKLS,SALK;AAAA,UAMLC,MANK,GAWHV,UAXG,CAMLU,MANK;AAAA,UAOLC,WAPK,GAWHX,UAXG,CAOLW,WAPK;AAAA,UAQLC,aARK,GAWHZ,UAXG,CAQLY,aARK;AAAA,UASLd,IATK,GAWHE,UAXG,CASLF,IATK;AAAA,UAULe,WAVK,GAWHb,UAXG,CAULa,WAVK;AAAA,UAYCT,QAZD,GAYc,KAAKlD,KAZnB,CAYCkD,QAZD;AAAA,UAaCC,cAbD,GAaoB,KAAKnD,KAbzB,CAaCmD,cAbD;AAAA,UAcCtC,KAdD,GAcW,KAAKD,KAdhB,CAcCC,KAdD;;AAAA,UAeS+C,gBAfT,GAeqDP,SAfrD,CAeCQ,MAfD;AAAA,UAe8BC,kBAf9B,4BAeqDT,SAfrD;;AAiBP,UAAMU,eAAeX,cACjB,EAAEY,SAAS,KAAKxD,WAAhB,EAA6ByD,WAAW,KAAKzD,WAA7C,EADiB,GAEjB,EAFJ;;AAIA,UAAM0D,YACJ,sBAAUjD,OAAV,KAAsB,sBAAUC,KAAV,CAAtB,GACE;AAAA;AAAA;AACG,aAAKX,aAAL,CAAmB;AAClBkC,cAAIxB,OADc;AAElByB,uBAAa,KAAKzC,oBAFA;AAGlB0C,kBAAQ,+BAHU;AAIlBC,gBAAMU,QAJY;AAKlBT,gBAAM;AALY,SAAnB,CADH;AAQG,aAAKtC,aAAL,CAAmB;AAClBkC,cAAIvB,KADc;AAElBwB,uBAAa,KAAKvC,oBAFA;AAGlBwC,kBAAQ,+BAHU;AAIlBC,gBAAMU,QAJY;AAKlBT,gBAAM;AALY,SAAnB;AARH,OADF,GAiBI,IAlBN;AAmBA,UAAMsB,YAAY,sBAAUhD,EAAV,IAChB;AAAA;AAAA;AACG,aAAKZ,aAAL,CAAmB;AAClBkC,cAAI,CAACxB,QAAQ,CAAR,CAAD,EAAaA,QAAQ,CAAR,IAAaE,EAA1B,CADc;AAElBuB,uBAAa,KAAKpC,yBAFA;AAGlBqC,kBAAQ,oCAHU;AAIlBC,gBAAMW,SAJY;AAKlBV,gBAAM;AALY,SAAnB,CADH;AAQG,aAAKtC,aAAL,CAAmB;AAClBkC,cAAI,CAACvB,MAAM,CAAN,CAAD,EAAWA,MAAM,CAAN,IAAWC,EAAtB,CADc;AAElBuB,uBAAa,KAAKpC,yBAFA;AAGlBqC,kBAAQ,oCAHU;AAIlBC,gBAAMW,SAJY;AAKlBV,gBAAM;AALY,SAAnB;AARH,OADgB,GAiBd,IAjBJ;;AAmBA,aACE;AAAA;AAAA;AACE,sCAAC,yBAAD;AACE,eAAK,KAAKnC,YAAL,CAAkB,SAAlB,CADP;AAEE,oBAAUwC,YAAYrC;AAFxB,WAGMkD,YAHN;AAIE,mBAAS9C,OAJX;AAKE,iBAAOC,KALT;AAME,cAAIC,EANN;AAOE,kBAAQqC,MAPV;AAQE,uBAAa3C,SAASqC,QAAT,GAAoBO,cAAc,CAAlC,GAAsCA,WARrD;AASE,yBAAeC,aATjB;AAUE,gBAAMd,IAVR;AAWE,uBAAae,WAXf;AAYE,kCAAuB,+BAZzB;AAaE,uBAAa,KAAKvD,eAbpB;AAcE,kBAAQ,KAAKC,iBAdf;AAeE,0BAAgB8C;AAflB,WADF;AAkBGe,iBAlBH;AAmBGC,iBAnBH;AAoBE,sCAAC,4BAAD;AACE,gBAAMP,oBAAoB/C,KAApB,IAA6B,CAACqC;AADtC,WAEMY,kBAFN;AApBF,OADF;AA2BD;;;;EA3RkCM,gB;;AA8RrCrE,uBAAuBsE,SAAvB,GAAmC;AACjCpD,WAASqD,oBAAUC,OAAV,CAAkBD,oBAAUE,MAA5B,EAAoCC,UADZ;AAEjCvD,SAAOoD,oBAAUC,OAAV,CAAkBD,oBAAUE,MAA5B,EAAoCC,UAFV;AAGjCtD,MAAImD,oBAAUE,MAHmB;;AAKjCpB,eAAakB,oBAAUI,IAAV,CAAeD,UALK;AAMjCvB,YAAUoB,oBAAUI,IAAV,CAAeD,UANQ;AAOjCpB,aAAWiB,oBAAUK,MAAV,CAAiBF,UAPK;;AASjC3B,cAAYwB,oBAAUM,KAAV,CAAgB;AAC1BpB,YAAQc,oBAAUO,MAAV,CAAiBJ,UADC;AAE1Bd,iBAAaW,oBAAUE,MAAV,CAAiBC,UAFJ;AAG1Bf,mBAAeY,oBAAUE,MAAV,CAAiBC,UAHN;AAI1BhB,iBAAaa,oBAAUE,MAAV,CAAiBC,UAJJ;AAK1B7B,UAAM0B,oBAAUO,MAAV,CAAiBJ,UALG;AAM1B1B,gBAAYuB,oBAAUO,MAAV,CAAiBJ,UANH;AAO1BnB,cAAUgB,oBAAUO,MAAV,CAAiBJ,UAPD;AAQ1BlB,eAAWe,oBAAUO,MAAV,CAAiBJ,UARF;AAS1BzB,qBAAiBsB,oBAAUE,MAAV,CAAiBC,UATR;AAU1BxB,OAAGqB,oBAAUE,MAAV,CAAiBC;AAVM,GAAhB,EAWTA,UApB8B;;AAsBjCpD,SAAOiD,oBAAUE,MAtBgB;AAuBjClD,UAAQgD,oBAAUQ,IAAV,CAAeL,UAvBU;AAwBjCtB,kBAAgBmB,oBAAUQ,IAAV,CAAeL;AAxBE,CAAnC;;AA2BA1E,uBAAuBgF,YAAvB,GAAsC;AACpCC,kBAAgB;AAAA,WAAKC,EAAEC,OAAF,CAAU,CAAV,CAAL;AAAA,GADoB;AAEpC9B,eAAa,IAFuB;AAGpCF,YAAU,KAH0B;;AAKpC5B,UAAQ6D,WAL4B;AAMpChC,kBAAgBgC,WANoB;AAOpC9B,aAAW;AACTQ,YAAQ;AADC;AAPyB,CAAtC;;kBAYe9D,sB","file":"EachEquidistantChannel.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { isDefined, noop } from '../../utils';\nimport { getXValue } from '../../utils/ChartDataUtil';\nimport { saveNodeType, isHover } from '../utils';\n\nimport ClickableCircle from '../components/ClickableCircle';\nimport ChannelWithArea from '../components/ChannelWithArea';\nimport HoverTextNearMouse from '../components/HoverTextNearMouse';\n\nclass EachEquidistantChannel extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleLine1Edge1Drag = this.handleLine1Edge1Drag.bind(this);\n    this.handleLine1Edge2Drag = this.handleLine1Edge2Drag.bind(this);\n\n    this.handleDragStart = this.handleDragStart.bind(this);\n    this.handleChannelDrag = this.handleChannelDrag.bind(this);\n\n    this.handleChannelHeightChange = this.handleChannelHeightChange.bind(this);\n\n    this.getEdgeCircle = this.getEdgeCircle.bind(this);\n    this.handleHover = this.handleHover.bind(this);\n\n    this.isHover = isHover.bind(this);\n    this.saveNodeType = saveNodeType.bind(this);\n    this.nodes = {};\n\n    this.state = {\n      hover: false,\n    };\n  }\n  handleHover(moreProps) {\n    if (this.state.hover !== moreProps.hovering) {\n      this.setState({\n        hover: moreProps.hovering,\n      });\n    }\n  }\n  handleDragStart() {\n    const { startXY, endXY, dy } = this.props;\n\n    this.dragStart = {\n      startXY,\n      endXY,\n      dy,\n    };\n  }\n  handleChannelDrag(moreProps) {\n    const { index, onDrag } = this.props;\n\n    const { startXY, endXY } = this.dragStart;\n\n    const {\n      xScale,\n      chartConfig: { yScale },\n      xAccessor,\n      fullData,\n    } = moreProps;\n    const { startPos, mouseXY } = moreProps;\n\n    const x1 = xScale(startXY[0]);\n    const y1 = yScale(startXY[1]);\n    const x2 = xScale(endXY[0]);\n    const y2 = yScale(endXY[1]);\n\n    const dx = startPos[0] - mouseXY[0];\n    const dy = startPos[1] - mouseXY[1];\n\n    const newX1Value = getXValue(\n      xScale,\n      xAccessor,\n      [x1 - dx, y1 - dy],\n      fullData\n    );\n    const newY1Value = yScale.invert(y1 - dy);\n    const newX2Value = getXValue(\n      xScale,\n      xAccessor,\n      [x2 - dx, y2 - dy],\n      fullData\n    );\n    const newY2Value = yScale.invert(y2 - dy);\n\n    // const newDy = newY2Value - endXY[1] + this.dragStart.dy;\n\n    onDrag(index, {\n      startXY: [newX1Value, newY1Value],\n      endXY: [newX2Value, newY2Value],\n      dy: this.dragStart.dy,\n    });\n  }\n  handleLine1Edge1Drag(moreProps) {\n    const { index, onDrag } = this.props;\n    const { startXY } = this.dragStart;\n\n    const {\n      startPos,\n      mouseXY,\n      xAccessor,\n      xScale,\n      fullData,\n      chartConfig: { yScale },\n    } = moreProps;\n\n    const dx = startPos[0] - mouseXY[0];\n    const dy = startPos[1] - mouseXY[1];\n\n    const x1 = xScale(startXY[0]);\n    const y1 = yScale(startXY[1]);\n\n    const newX1Value = getXValue(\n      xScale,\n      xAccessor,\n      [x1 - dx, y1 - dy],\n      fullData\n    );\n    const newY1Value = yScale.invert(y1 - dy);\n\n    onDrag(index, {\n      startXY: [newX1Value, newY1Value],\n      endXY: this.dragStart.endXY,\n      dy: this.dragStart.dy,\n    });\n  }\n  handleLine1Edge2Drag(moreProps) {\n    const { index, onDrag } = this.props;\n    const { endXY } = this.dragStart;\n\n    const {\n      startPos,\n      mouseXY,\n      xAccessor,\n      xScale,\n      fullData,\n      chartConfig: { yScale },\n    } = moreProps;\n\n    const dx = startPos[0] - mouseXY[0];\n    const dy = startPos[1] - mouseXY[1];\n\n    const x1 = xScale(endXY[0]);\n    const y1 = yScale(endXY[1]);\n\n    const newX1Value = getXValue(\n      xScale,\n      xAccessor,\n      [x1 - dx, y1 - dy],\n      fullData\n    );\n    const newY1Value = yScale.invert(y1 - dy);\n\n    onDrag(index, {\n      startXY: this.dragStart.startXY,\n      endXY: [newX1Value, newY1Value],\n      dy: this.dragStart.dy,\n    });\n  }\n  handleChannelHeightChange(moreProps) {\n    const { index, onDrag } = this.props;\n\n    const { startXY, endXY } = this.dragStart;\n\n    const {\n      chartConfig: { yScale },\n    } = moreProps;\n    const { startPos, mouseXY } = moreProps;\n\n    const y2 = yScale(endXY[1]);\n\n    const dy = startPos[1] - mouseXY[1];\n\n    const newY2Value = yScale.invert(y2 - dy);\n\n    const newDy = newY2Value - endXY[1] + this.dragStart.dy;\n\n    onDrag(index, {\n      startXY,\n      endXY,\n      dy: newDy,\n    });\n  }\n  getEdgeCircle({ xy, dragHandler, cursor, fill, edge }) {\n    const { hover } = this.state;\n    const { appearance } = this.props;\n    const { edgeStroke, edgeStrokeWidth, r } = appearance;\n    const { selected } = this.props;\n    const { onDragComplete } = this.props;\n\n    return (\n      <ClickableCircle\n        ref={this.saveNodeType(edge)}\n        show={selected || hover}\n        cx={xy[0]}\n        cy={xy[1]}\n        r={r}\n        fill={fill}\n        stroke={edgeStroke}\n        strokeWidth={edgeStrokeWidth}\n        interactiveCursorClass={cursor}\n        onDragStart={this.handleDragStart}\n        onDrag={dragHandler}\n        onDragComplete={onDragComplete}\n      />\n    );\n  }\n  render() {\n    const { startXY, endXY, dy } = this.props;\n    const { interactive, hoverText, appearance } = this.props;\n    const {\n      edgeFill,\n      edgeFill2,\n      stroke,\n      strokeWidth,\n      strokeOpacity,\n      fill,\n      fillOpacity,\n    } = appearance;\n    const { selected } = this.props;\n    const { onDragComplete } = this.props;\n    const { hover } = this.state;\n    const { enable: hoverTextEnabled, ...restHoverTextProps } = hoverText;\n\n    const hoverHandler = interactive\n      ? { onHover: this.handleHover, onUnHover: this.handleHover }\n      : {};\n\n    const line1Edge =\n      isDefined(startXY) && isDefined(endXY) ? (\n        <g>\n          {this.getEdgeCircle({\n            xy: startXY,\n            dragHandler: this.handleLine1Edge1Drag,\n            cursor: 'react-stockcharts-move-cursor',\n            fill: edgeFill,\n            edge: 'line1edge1',\n          })}\n          {this.getEdgeCircle({\n            xy: endXY,\n            dragHandler: this.handleLine1Edge2Drag,\n            cursor: 'react-stockcharts-move-cursor',\n            fill: edgeFill,\n            edge: 'line1edge2',\n          })}\n        </g>\n      ) : null;\n    const line2Edge = isDefined(dy) ? (\n      <g>\n        {this.getEdgeCircle({\n          xy: [startXY[0], startXY[1] + dy],\n          dragHandler: this.handleChannelHeightChange,\n          cursor: 'react-stockcharts-ns-resize-cursor',\n          fill: edgeFill2,\n          edge: 'line2edge1',\n        })}\n        {this.getEdgeCircle({\n          xy: [endXY[0], endXY[1] + dy],\n          dragHandler: this.handleChannelHeightChange,\n          cursor: 'react-stockcharts-ns-resize-cursor',\n          fill: edgeFill2,\n          edge: 'line2edge2',\n        })}\n      </g>\n    ) : null;\n\n    return (\n      <g>\n        <ChannelWithArea\n          ref={this.saveNodeType('channel')}\n          selected={selected || hover}\n          {...hoverHandler}\n          startXY={startXY}\n          endXY={endXY}\n          dy={dy}\n          stroke={stroke}\n          strokeWidth={hover || selected ? strokeWidth + 1 : strokeWidth}\n          strokeOpacity={strokeOpacity}\n          fill={fill}\n          fillOpacity={fillOpacity}\n          interactiveCursorClass=\"react-stockcharts-move-cursor\"\n          onDragStart={this.handleDragStart}\n          onDrag={this.handleChannelDrag}\n          onDragComplete={onDragComplete}\n        />\n        {line1Edge}\n        {line2Edge}\n        <HoverTextNearMouse\n          show={hoverTextEnabled && hover && !selected}\n          {...restHoverTextProps}\n        />\n      </g>\n    );\n  }\n}\n\nEachEquidistantChannel.propTypes = {\n  startXY: PropTypes.arrayOf(PropTypes.number).isRequired,\n  endXY: PropTypes.arrayOf(PropTypes.number).isRequired,\n  dy: PropTypes.number,\n\n  interactive: PropTypes.bool.isRequired,\n  selected: PropTypes.bool.isRequired,\n  hoverText: PropTypes.object.isRequired,\n\n  appearance: PropTypes.shape({\n    stroke: PropTypes.string.isRequired,\n    fillOpacity: PropTypes.number.isRequired,\n    strokeOpacity: PropTypes.number.isRequired,\n    strokeWidth: PropTypes.number.isRequired,\n    fill: PropTypes.string.isRequired,\n    edgeStroke: PropTypes.string.isRequired,\n    edgeFill: PropTypes.string.isRequired,\n    edgeFill2: PropTypes.string.isRequired,\n    edgeStrokeWidth: PropTypes.number.isRequired,\n    r: PropTypes.number.isRequired,\n  }).isRequired,\n\n  index: PropTypes.number,\n  onDrag: PropTypes.func.isRequired,\n  onDragComplete: PropTypes.func.isRequired,\n};\n\nEachEquidistantChannel.defaultProps = {\n  yDisplayFormat: d => d.toFixed(2),\n  interactive: true,\n  selected: false,\n\n  onDrag: noop,\n  onDragComplete: noop,\n  hoverText: {\n    enable: false,\n  },\n};\n\nexport default EachEquidistantChannel;\n"]}