{"version":3,"sources":["../../../../src/lib/interactive/wrapper/EachFibRetracement.js"],"names":["EachFibRetracement","props","handleEdge1Drag","bind","handleEdge2Drag","handleLineNSResizeTop","handleLineNSResizeBottom","handleLineMove","handleLineDragStart","handleHover","isHover","saveNodeType","nodes","state","hover","moreProps","hovering","setState","x1","y1","x2","y2","dragStart","index","onDrag","x1Value","y1Value","x2Value","y2Value","xScale","yScale","chartConfig","xAccessor","fullData","startPos","mouseXY","dx","dy","newX1Value","newY1Value","invert","newX2Value","newY2Value","interactive","yDisplayFormat","type","appearance","stroke","strokeWidth","strokeOpacity","fontFamily","fontSize","fontFill","edgeStroke","edgeFill","nsEdgeFill","edgeStrokeWidth","r","hoverText","selected","onDragComplete","lines","helper","hoverTextEnabled","enable","hoverTextSelected","selectedText","hoverTextUnselected","text","restHoverTextProps","lineType","dir","map","line","j","y","percent","toFixed","xyProvider","start","end","x","Math","min","firstOrLast","length","interactiveCursorClass","interactiveEdgeCursorClass","dragHandler","edge1DragHandler","edge2DragHandler","hoverHandler","onHover","onUnHover","Component","retracements","each","propTypes","PropTypes","any","isRequired","number","func","string","bool","shape","object","defaultProps","d","noop"],"mappings":"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","file":"EachFibRetracement.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { head, last, noop } from '../../utils';\nimport { getXValue } from '../../utils/ChartDataUtil';\nimport { saveNodeType, isHover } from '../utils';\n\nimport { getNewXY } from './EachTrendLine';\nimport StraightLine, { generateLine } from '../components/StraightLine';\nimport ClickableCircle from '../components/ClickableCircle';\nimport HoverTextNearMouse from '../components/HoverTextNearMouse';\nimport Text from '../components/Text';\n\nclass EachFibRetracement extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleEdge1Drag = this.handleEdge1Drag.bind(this);\n    this.handleEdge2Drag = this.handleEdge2Drag.bind(this);\n\n    this.handleLineNSResizeTop = this.handleLineNSResizeTop.bind(this);\n    this.handleLineNSResizeBottom = this.handleLineNSResizeBottom.bind(this);\n    this.handleLineMove = this.handleLineMove.bind(this);\n\n    this.handleLineDragStart = this.handleLineDragStart.bind(this);\n\n    this.handleHover = this.handleHover.bind(this);\n\n    this.isHover = isHover.bind(this);\n    this.saveNodeType = saveNodeType.bind(this);\n    this.nodes = {};\n\n    this.state = {\n      hover: false,\n    };\n  }\n  handleHover(moreProps) {\n    if (this.state.hover !== moreProps.hovering) {\n      this.setState({\n        hover: moreProps.hovering,\n      });\n    }\n  }\n  handleLineDragStart() {\n    const { x1, y1, x2, y2 } = this.props;\n\n    this.dragStart = {\n      x1,\n      y1,\n      x2,\n      y2,\n    };\n  }\n  handleLineMove(moreProps) {\n    const { index, onDrag } = this.props;\n\n    const {\n      x1: x1Value,\n      y1: y1Value,\n      x2: x2Value,\n      y2: y2Value,\n    } = this.dragStart;\n\n    const {\n      xScale,\n      chartConfig: { yScale },\n      xAccessor,\n      fullData,\n    } = moreProps;\n    const { startPos, mouseXY } = moreProps;\n\n    const x1 = xScale(x1Value);\n    const y1 = yScale(y1Value);\n    const x2 = xScale(x2Value);\n    const y2 = yScale(y2Value);\n\n    const dx = startPos[0] - mouseXY[0];\n    const dy = startPos[1] - mouseXY[1];\n\n    const newX1Value = getXValue(\n      xScale,\n      xAccessor,\n      [x1 - dx, y1 - dy],\n      fullData\n    );\n    const newY1Value = yScale.invert(y1 - dy);\n    const newX2Value = getXValue(\n      xScale,\n      xAccessor,\n      [x2 - dx, y2 - dy],\n      fullData\n    );\n    const newY2Value = yScale.invert(y2 - dy);\n\n    onDrag(index, {\n      x1: newX1Value,\n      y1: newY1Value,\n      x2: newX2Value,\n      y2: newY2Value,\n    });\n  }\n  handleLineNSResizeTop(moreProps) {\n    const { index, onDrag } = this.props;\n    const { x1, x2, y2 } = this.props;\n\n    const [, y1] = getNewXY(moreProps);\n\n    onDrag(index, {\n      x1,\n      y1,\n      x2,\n      y2,\n    });\n  }\n  handleLineNSResizeBottom(moreProps) {\n    const { index, onDrag } = this.props;\n    const { x1, y1, x2 } = this.props;\n\n    const [, y2] = getNewXY(moreProps);\n\n    onDrag(index, {\n      x1,\n      y1,\n      x2,\n      y2,\n    });\n  }\n  handleEdge1Drag(moreProps) {\n    const { index, onDrag } = this.props;\n    const { y1, x2, y2 } = this.props;\n\n    const [x1] = getNewXY(moreProps);\n\n    onDrag(index, {\n      x1,\n      y1,\n      x2,\n      y2,\n    });\n  }\n  handleEdge2Drag(moreProps) {\n    const { index, onDrag } = this.props;\n    const { x1, y1, y2 } = this.props;\n\n    const [x2] = getNewXY(moreProps);\n\n    onDrag(index, {\n      x1,\n      y1,\n      x2,\n      y2,\n    });\n  }\n  render() {\n    const { x1, x2, y1, y2 } = this.props;\n    const { interactive, yDisplayFormat, type, appearance } = this.props;\n    const { stroke, strokeWidth, strokeOpacity } = appearance;\n    const { fontFamily, fontSize, fontFill } = appearance;\n    const { edgeStroke, edgeFill, nsEdgeFill, edgeStrokeWidth, r } = appearance;\n    const { hoverText, selected } = this.props;\n    const { hover } = this.state;\n    const { onDragComplete } = this.props;\n    const lines = helper({ x1, x2, y1, y2 });\n\n    const {\n      enable: hoverTextEnabled,\n      selectedText: hoverTextSelected,\n      text: hoverTextUnselected,\n      ...restHoverTextProps\n    } = hoverText;\n\n    const lineType =\n      type === 'EXTEND' ? 'XLINE' : type === 'BOUND' ? 'LINE' : type;\n    const dir = head(lines).y1 > last(lines).y1 ? 3 : -1.3;\n\n    return (\n      <g>\n        {lines.map((line, j) => {\n          const text = `${yDisplayFormat(line.y)} (${line.percent.toFixed(\n            2\n          )}%)`;\n\n          const xyProvider = ({ xScale, chartConfig }) => {\n            const { yScale } = chartConfig;\n            const { x1, y1, x2 } = generateLine({\n              type: lineType,\n              start: [line.x1, line.y],\n              end: [line.x2, line.y],\n              xScale,\n              yScale,\n            });\n\n            const x = xScale(Math.min(x1, x2)) + 10;\n            const y = yScale(y1) + dir * 4;\n            return [x, y];\n          };\n\n          const firstOrLast = j === 0 || j === lines.length - 1;\n\n          const interactiveCursorClass = firstOrLast\n            ? 'react-stockcharts-ns-resize-cursor'\n            : 'react-stockcharts-move-cursor';\n\n          const interactiveEdgeCursorClass = firstOrLast\n            ? 'react-stockcharts-ns-resize-cursor'\n            : 'react-stockcharts-ew-resize-cursor';\n\n          const dragHandler =\n            j === 0\n              ? this.handleLineNSResizeTop\n              : j === lines.length - 1\n              ? this.handleLineNSResizeBottom\n              : this.handleLineMove;\n\n          const edge1DragHandler =\n            j === 0\n              ? this.handleLineNSResizeTop\n              : j === lines.length - 1\n              ? this.handleLineNSResizeBottom\n              : this.handleEdge1Drag;\n          const edge2DragHandler =\n            j === 0\n              ? this.handleLineNSResizeTop\n              : j === lines.length - 1\n              ? this.handleLineNSResizeBottom\n              : this.handleEdge2Drag;\n\n          const hoverHandler = interactive\n            ? { onHover: this.handleHover, onUnHover: this.handleHover }\n            : {};\n          return (\n            <g key={j}>\n              <StraightLine\n                ref={this.saveNodeType(`line_${j}`)}\n                selected={selected || hover}\n                {...hoverHandler}\n                type={lineType}\n                x1Value={line.x1}\n                y1Value={line.y}\n                x2Value={line.x2}\n                y2Value={line.y}\n                stroke={stroke}\n                strokeWidth={hover || selected ? strokeWidth + 1 : strokeWidth}\n                strokeOpacity={strokeOpacity}\n                interactiveCursorClass={interactiveCursorClass}\n                onDragStart={this.handleLineDragStart}\n                onDrag={dragHandler}\n                onDragComplete={onDragComplete}\n              />\n              <Text\n                selected={selected}\n                /* eslint-disable */\n                xyProvider={xyProvider}\n                /* eslint-enable */\n                fontFamily={fontFamily}\n                fontSize={fontSize}\n                fill={fontFill}\n              >\n                {text}\n              </Text>\n              <ClickableCircle\n                ref={this.saveNodeType('edge1')}\n                show={selected || hover}\n                cx={line.x1}\n                cy={line.y}\n                r={r}\n                fill={firstOrLast ? nsEdgeFill : edgeFill}\n                stroke={edgeStroke}\n                strokeWidth={edgeStrokeWidth}\n                interactiveCursorClass={interactiveEdgeCursorClass}\n                onDrag={edge1DragHandler}\n                onDragComplete={onDragComplete}\n              />\n              <ClickableCircle\n                ref={this.saveNodeType('edge2')}\n                show={selected || hover}\n                cx={line.x2}\n                cy={line.y}\n                r={r}\n                fill={firstOrLast ? nsEdgeFill : edgeFill}\n                stroke={edgeStroke}\n                strokeWidth={edgeStrokeWidth}\n                interactiveCursorClass={interactiveEdgeCursorClass}\n                onDrag={edge2DragHandler}\n                onDragComplete={onDragComplete}\n              />\n            </g>\n          );\n        })}\n        <HoverTextNearMouse\n          show={hoverTextEnabled && hover}\n          {...restHoverTextProps}\n          text={selected ? hoverTextSelected : hoverTextUnselected}\n        />\n      </g>\n    );\n  }\n}\n\nfunction helper({ x1, y1, x2, y2 }) {\n  const dy = y2 - y1;\n  const retracements = [100, 61.8, 50, 38.2, 23.6, 0].map(each => ({\n    percent: each,\n    x1,\n    x2,\n    y: y2 - (each / 100) * dy,\n  }));\n\n  return retracements;\n}\n\nEachFibRetracement.propTypes = {\n  x1: PropTypes.any.isRequired,\n  x2: PropTypes.any.isRequired,\n  y1: PropTypes.number.isRequired,\n  y2: PropTypes.number.isRequired,\n\n  yDisplayFormat: PropTypes.func.isRequired,\n  type: PropTypes.string.isRequired,\n  selected: PropTypes.bool.isRequired,\n\n  appearance: PropTypes.shape({\n    stroke: PropTypes.string.isRequired,\n    strokeWidth: PropTypes.number.isRequired,\n    strokeOpacity: PropTypes.number.isRequired,\n    fontFamily: PropTypes.string.isRequired,\n    fontSize: PropTypes.number.isRequired,\n    fontFill: PropTypes.string.isRequired,\n    edgeStroke: PropTypes.string.isRequired,\n    edgeFill: PropTypes.string.isRequired,\n    nsEdgeFill: PropTypes.string.isRequired,\n    edgeStrokeWidth: PropTypes.number.isRequired,\n    r: PropTypes.number.isRequired,\n  }).isRequired,\n\n  interactive: PropTypes.bool.isRequired,\n  hoverText: PropTypes.object.isRequired,\n\n  index: PropTypes.number,\n  onDrag: PropTypes.func.isRequired,\n  onDragComplete: PropTypes.func.isRequired,\n};\n\nEachFibRetracement.defaultProps = {\n  yDisplayFormat: d => d.toFixed(2),\n  interactive: true,\n\n  appearance: {\n    stroke: '#000000',\n    strokeWidth: 1,\n    strokeOpacity: 1,\n    fontFamily: 'Helvetica Neue, Helvetica, Arial, sans-serif',\n    fontSize: 10,\n    fontFill: '#000000',\n    edgeStroke: '#000000',\n    edgeFill: '#FFFFFF',\n    nsEdgeFill: '#000000',\n    edgeStrokeWidth: 1,\n    r: 5,\n  },\n  selected: false,\n\n  onDrag: noop,\n  onDragComplete: noop,\n\n  hoverText: {\n    enable: false,\n  },\n};\n\nexport default EachFibRetracement;\n"]}