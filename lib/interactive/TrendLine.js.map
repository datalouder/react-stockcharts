{"version":3,"sources":["../../../src/lib/interactive/TrendLine.js"],"names":["TrendLine","props","handleStart","bind","handleEnd","handleDrawLine","handleDragLine","handleDragLineComplete","terminate","saveNodeType","getSelectionState","state","nodes","index","newXYValue","setState","override","moreProps","trends","newTrends","map","each","idx","start","x1Value","y1Value","end","x2Value","y2Value","selected","onComplete","xyValue","current","mouseMoved","e","onStart","appearance","type","d","enabled","snap","shouldDisableSnap","snapTo","currentPositionRadius","currentPositionStroke","currentPositionstrokeOpacity","currentPositionStrokeWidth","hoverText","tempLine","stroke","strokeWidth","strokeOpacity","eachAppearance","hoverTextWithDefault","defaultProps","strokeDasharray","edgeStroke","edgeFill","edgeStrokeWidth","r","Component","propTypes","PropTypes","bool","isRequired","func","onSelect","string","number","oneOf","object","array","shape","strokeDashTypes","noop","button","shiftKey","HoverTextNearMouse","enable","bgHeight","bgWidth","text","selectedText"],"mappings":"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","file":"TrendLine.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { isDefined, isNotDefined, noop, strokeDashTypes } from '../utils';\n\nimport {\n  getValueFromOverride,\n  terminate,\n  saveNodeType,\n  isHoverForInteractiveType,\n} from './utils';\n\nimport EachTrendLine from './wrapper/EachTrendLine';\nimport StraightLine from './components/StraightLine';\nimport MouseLocationIndicator from './components/MouseLocationIndicator';\nimport HoverTextNearMouse from './components/HoverTextNearMouse';\n\nclass TrendLine extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleStart = this.handleStart.bind(this);\n    this.handleEnd = this.handleEnd.bind(this);\n    this.handleDrawLine = this.handleDrawLine.bind(this);\n    this.handleDragLine = this.handleDragLine.bind(this);\n    this.handleDragLineComplete = this.handleDragLineComplete.bind(this);\n\n    this.terminate = terminate.bind(this);\n    this.saveNodeType = saveNodeType.bind(this);\n\n    this.getSelectionState = isHoverForInteractiveType('trends').bind(this);\n\n    this.state = {};\n    this.nodes = [];\n  }\n  handleDragLine(index, newXYValue) {\n    this.setState({\n      override: {\n        index,\n        ...newXYValue,\n      },\n    });\n  }\n  handleDragLineComplete(moreProps) {\n    const { override } = this.state;\n    if (isDefined(override)) {\n      const { trends } = this.props;\n      const newTrends = trends.map((each, idx) =>\n        idx === override.index\n          ? {\n              ...each,\n              start: [override.x1Value, override.y1Value],\n              end: [override.x2Value, override.y2Value],\n              selected: true,\n            }\n          : {\n              ...each,\n              selected: false,\n            }\n      );\n\n      this.setState(\n        {\n          override: null,\n        },\n        () => {\n          this.props.onComplete(newTrends, moreProps);\n        }\n      );\n    }\n  }\n  handleDrawLine(xyValue) {\n    const { current } = this.state;\n    if (isDefined(current) && isDefined(current.start)) {\n      this.mouseMoved = true;\n      this.setState({\n        current: {\n          start: current.start,\n          end: xyValue,\n        },\n      });\n    }\n  }\n  handleStart(xyValue, moreProps, e) {\n    const { current } = this.state;\n\n    if (isNotDefined(current) || isNotDefined(current.start)) {\n      this.mouseMoved = false;\n\n      this.setState(\n        {\n          current: {\n            start: xyValue,\n            end: null,\n          },\n        },\n        () => {\n          this.props.onStart(moreProps, e);\n        }\n      );\n    }\n  }\n  handleEnd(xyValue, moreProps, e) {\n    const { current } = this.state;\n    const { trends, appearance, type } = this.props;\n\n    if (this.mouseMoved && isDefined(current) && isDefined(current.start)) {\n      const newTrends = [\n        ...trends.map(d => ({ ...d, selected: false })),\n        {\n          start: current.start,\n          end: xyValue,\n          selected: true,\n          appearance,\n          type,\n        },\n      ];\n      this.setState(\n        {\n          current: null,\n          trends: newTrends,\n        },\n        () => {\n          this.props.onComplete(newTrends, moreProps, e);\n        }\n      );\n    }\n  }\n  render() {\n    const { appearance } = this.props;\n    const { enabled, snap, shouldDisableSnap, snapTo, type } = this.props;\n    const { currentPositionRadius, currentPositionStroke } = this.props;\n    const { currentPositionstrokeOpacity, currentPositionStrokeWidth } =\n      this.props;\n    const { hoverText, trends } = this.props;\n    const { current, override } = this.state;\n\n    const tempLine =\n      isDefined(current) && isDefined(current.end) ? (\n        <StraightLine\n          type={type}\n          noHover\n          x1Value={current.start[0]}\n          y1Value={current.start[1]}\n          x2Value={current.end[0]}\n          y2Value={current.end[1]}\n          stroke={appearance.stroke}\n          strokeWidth={appearance.strokeWidth}\n          strokeOpacity={appearance.strokeOpacity}\n        />\n      ) : null;\n\n    return (\n      <g>\n        {trends.map((each, idx) => {\n          const eachAppearance = isDefined(each.appearance)\n            ? { ...appearance, ...each.appearance }\n            : appearance;\n\n          const hoverTextWithDefault = {\n            ...TrendLine.defaultProps.hoverText,\n            ...hoverText,\n          };\n\n          return (\n            <EachTrendLine\n              key={idx}\n              ref={this.saveNodeType(idx)}\n              index={idx}\n              type={each.type}\n              selected={each.selected}\n              x1Value={getValueFromOverride(\n                override,\n                idx,\n                'x1Value',\n                each.start[0]\n              )}\n              y1Value={getValueFromOverride(\n                override,\n                idx,\n                'y1Value',\n                each.start[1]\n              )}\n              x2Value={getValueFromOverride(\n                override,\n                idx,\n                'x2Value',\n                each.end[0]\n              )}\n              y2Value={getValueFromOverride(\n                override,\n                idx,\n                'y2Value',\n                each.end[1]\n              )}\n              stroke={eachAppearance.stroke}\n              strokeWidth={eachAppearance.strokeWidth}\n              strokeOpacity={eachAppearance.strokeOpacity}\n              strokeDasharray={eachAppearance.strokeDasharray}\n              edgeStroke={eachAppearance.edgeStroke}\n              edgeFill={eachAppearance.edgeFill}\n              edgeStrokeWidth={eachAppearance.edgeStrokeWidth}\n              r={eachAppearance.r}\n              hoverText={hoverTextWithDefault}\n              onDrag={this.handleDragLine}\n              onDragComplete={this.handleDragLineComplete}\n              edgeInteractiveCursor=\"react-stockcharts-move-cursor\"\n              lineInteractiveCursor=\"react-stockcharts-move-cursor\"\n            />\n          );\n        })}\n        {tempLine}\n        <MouseLocationIndicator\n          enabled={enabled}\n          snap={snap}\n          shouldDisableSnap={shouldDisableSnap}\n          snapTo={snapTo}\n          r={currentPositionRadius}\n          stroke={currentPositionStroke}\n          strokeOpacity={currentPositionstrokeOpacity}\n          strokeWidth={currentPositionStrokeWidth}\n          onMouseDown={this.handleStart}\n          onClick={this.handleEnd}\n          onMouseMove={this.handleDrawLine}\n        />\n      </g>\n    );\n  }\n}\n\nTrendLine.propTypes = {\n  snap: PropTypes.bool.isRequired,\n  enabled: PropTypes.bool.isRequired,\n  snapTo: PropTypes.func,\n  shouldDisableSnap: PropTypes.func.isRequired,\n\n  onStart: PropTypes.func.isRequired,\n  onComplete: PropTypes.func.isRequired,\n  onSelect: PropTypes.func,\n\n  currentPositionStroke: PropTypes.string,\n  currentPositionStrokeWidth: PropTypes.number,\n  currentPositionstrokeOpacity: PropTypes.number,\n  currentPositionRadius: PropTypes.number,\n  type: PropTypes.oneOf([\n    'XLINE', // extends from -Infinity to +Infinity\n    'RAY', // extends to +/-Infinity in one direction\n    'LINE', // extends between the set bounds\n  ]),\n  hoverText: PropTypes.object.isRequired,\n\n  trends: PropTypes.array.isRequired,\n\n  appearance: PropTypes.shape({\n    stroke: PropTypes.string.isRequired,\n    strokeOpacity: PropTypes.number.isRequired,\n    strokeWidth: PropTypes.number.isRequired,\n    strokeDasharray: PropTypes.oneOf(strokeDashTypes),\n    edgeStrokeWidth: PropTypes.number.isRequired,\n    edgeFill: PropTypes.string.isRequired,\n    edgeStroke: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nTrendLine.defaultProps = {\n  type: 'XLINE',\n\n  onStart: noop,\n  onComplete: noop,\n  onSelect: noop,\n\n  currentPositionStroke: '#000000',\n  currentPositionstrokeOpacity: 1,\n  currentPositionStrokeWidth: 3,\n  currentPositionRadius: 0,\n\n  shouldDisableSnap: e => e.button === 2 || e.shiftKey,\n  hoverText: {\n    ...HoverTextNearMouse.defaultProps,\n    enable: true,\n    bgHeight: 'auto',\n    bgWidth: 'auto',\n    text: 'Click to select object',\n    selectedText: '',\n  },\n  trends: [],\n\n  appearance: {\n    stroke: '#000000',\n    strokeOpacity: 1,\n    strokeWidth: 1,\n    strokeDasharray: 'Solid',\n    edgeStrokeWidth: 1,\n    edgeFill: '#FFFFFF',\n    edgeStroke: '#000000',\n    r: 6,\n  },\n};\n\nexport default TrendLine;\n"]}