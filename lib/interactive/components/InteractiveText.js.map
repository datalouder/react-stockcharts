{"version":3,"sources":["../../../../src/lib/interactive/components/InteractiveText.js"],"names":["InteractiveText","props","calculateTextWidth","renderSVG","bind","drawOnCanvas","isHover","moreProps","onHover","textWidth","helper","rect","mouseXY","x","y","width","height","nextProps","text","fontStyle","fontWeight","fontSize","fontFamily","ctx","bgFill","bgOpacity","bgStrokeWidth","bgStroke","textFill","font","measureText","selected","fillStyle","beginPath","fillRect","strokeStyle","lineWidth","strokeRect","textBaseline","textAlign","fillText","Error","interactiveCursorClass","onUnHover","onDragStart","onDrag","onDragComplete","getMouseCanvas","Component","position","xScale","yScale","chartConfig","xValue","yValue","propTypes","PropTypes","string","isRequired","number","oneOfType","func","defaultClassName","tolerance","bool","defaultProps","noop","type"],"mappings":"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","file":"InteractiveText.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport GenericChartComponent from '../../GenericChartComponent';\nimport { getMouseCanvas } from '../../GenericComponent';\n\nimport { isDefined, noop, hexToRGBA } from '../../utils';\n\nclass InteractiveText extends Component {\n  constructor(props) {\n    super(props);\n\n    this.calculateTextWidth = true;\n\n    this.renderSVG = this.renderSVG.bind(this);\n    this.drawOnCanvas = this.drawOnCanvas.bind(this);\n    this.isHover = this.isHover.bind(this);\n  }\n  isHover(moreProps) {\n    const { onHover } = this.props;\n\n    if (\n      isDefined(onHover) &&\n      isDefined(this.textWidth) &&\n      !this.calculateTextWidth\n    ) {\n      const { rect } = helper(this.props, moreProps, this.textWidth);\n      const {\n        mouseXY: [x, y],\n      } = moreProps;\n\n      if (\n        x >= rect.x &&\n        y >= rect.y &&\n        x <= rect.x + rect.width &&\n        y <= rect.y + rect.height\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n  componentWillReceiveProps(nextProps) {\n    this.calculateTextWidth =\n      nextProps.text !== this.props.text ||\n      nextProps.fontStyle !== this.props.fontStyle ||\n      nextProps.fontWeight !== this.props.fontWeight ||\n      nextProps.fontSize !== this.props.fontSize ||\n      nextProps.fontFamily !== this.props.fontFamily;\n  }\n  drawOnCanvas(ctx, moreProps) {\n    const {\n      bgFill,\n      bgOpacity,\n      bgStrokeWidth,\n      bgStroke,\n      textFill,\n      fontFamily,\n      fontSize,\n      fontStyle,\n      fontWeight,\n      text,\n    } = this.props;\n\n    if (this.calculateTextWidth) {\n      ctx.font = `${fontStyle} ${fontWeight} ${fontSize}px ${fontFamily}`;\n      const { width } = ctx.measureText(text);\n      this.textWidth = width;\n      this.calculateTextWidth = false;\n    }\n\n    const { selected } = this.props;\n\n    const { x, y, rect } = helper(this.props, moreProps, this.textWidth);\n\n    ctx.fillStyle = hexToRGBA(bgFill, bgOpacity);\n\n    ctx.beginPath();\n    ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n\n    if (selected) {\n      ctx.strokeStyle = bgStroke;\n      ctx.lineWidth = bgStrokeWidth;\n      ctx.strokeRect(rect.x, rect.y, rect.width, rect.height);\n    }\n\n    ctx.fillStyle = textFill;\n    ctx.textBaseline = 'middle';\n    ctx.textAlign = 'center';\n    ctx.font = `${fontStyle} ${fontWeight} ${fontSize}px ${fontFamily}`;\n\n    ctx.beginPath();\n    ctx.fillText(text, x, y);\n  }\n  renderSVG() {\n    throw new Error('svg not implemented');\n  }\n  render() {\n    const { selected, interactiveCursorClass } = this.props;\n    const { onHover, onUnHover } = this.props;\n    const { onDragStart, onDrag, onDragComplete } = this.props;\n\n    return (\n      <GenericChartComponent\n        isHover={this.isHover}\n        svgDraw={this.renderSVG}\n        canvasToDraw={getMouseCanvas}\n        canvasDraw={this.drawOnCanvas}\n        interactiveCursorClass={interactiveCursorClass}\n        selected={selected}\n        onDragStart={onDragStart}\n        onDrag={onDrag}\n        onDragComplete={onDragComplete}\n        onHover={onHover}\n        onUnHover={onUnHover}\n        drawOn={['mousemove', 'mouseleave', 'pan', 'drag']}\n      />\n    );\n  }\n}\n\nfunction helper(props, moreProps, textWidth) {\n  const { position, fontSize } = props;\n\n  const {\n    xScale,\n    chartConfig: { yScale },\n  } = moreProps;\n\n  const [xValue, yValue] = position;\n  const x = xScale(xValue);\n  const y = yScale(yValue);\n\n  const rect = {\n    x: x - textWidth / 2 - fontSize,\n    y: y - fontSize,\n    width: textWidth + fontSize * 2,\n    height: fontSize * 2,\n  };\n\n  return {\n    x,\n    y,\n    rect,\n  };\n}\n\nInteractiveText.propTypes = {\n  bgFill: PropTypes.string.isRequired,\n  bgOpacity: PropTypes.number.isRequired,\n  bgStrokeWidth: PropTypes.number.isRequired,\n  bgStroke: PropTypes.string.isRequired,\n\n  textFill: PropTypes.string.isRequired,\n  fontFamily: PropTypes.string.isRequired,\n  fontSize: PropTypes.number.isRequired,\n  fontWeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n    .isRequired,\n  fontStyle: PropTypes.string.isRequired,\n\n  text: PropTypes.string.isRequired,\n\n  onDragStart: PropTypes.func.isRequired,\n  onDrag: PropTypes.func.isRequired,\n  onDragComplete: PropTypes.func.isRequired,\n  onHover: PropTypes.func,\n  onUnHover: PropTypes.func,\n\n  defaultClassName: PropTypes.string,\n  interactiveCursorClass: PropTypes.string,\n\n  tolerance: PropTypes.number.isRequired,\n  selected: PropTypes.bool.isRequired,\n};\n\nInteractiveText.defaultProps = {\n  onDragStart: noop,\n  onDrag: noop,\n  onDragComplete: noop,\n\n  type: 'SD', // standard dev\n  fontWeight: 'normal', // standard dev\n\n  tolerance: 4,\n  selected: false,\n};\n\nexport default InteractiveText;\n"]}