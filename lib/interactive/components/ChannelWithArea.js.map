{"version":3,"sources":["../../../../src/lib/interactive/components/ChannelWithArea.js"],"names":["ChannelWithArea","props","renderSVG","bind","drawOnCanvas","isHover","moreProps","tolerance","onHover","helper","lines","line1","line2","mouseXY","xScale","yScale","chartConfig","line1Hovering","x1Value","x1","y1Value","y1","x2Value","x2","y2Value","y2","type","line2Hovering","ctx","stroke","strokeWidth","fillOpacity","strokeOpacity","fill","lineWidth","strokeStyle","beginPath","moveTo","lineTo","line2Y1","line2Y2","fillStyle","closePath","line","area","getPath","selected","interactiveCursorClass","onDragStart","onDrag","onDragComplete","onUnHover","getMouseCanvas","Component","toString","getLines","startXY","endXY","dy","start","end","undefined","propTypes","PropTypes","string","isRequired","number","oneOf","func","defaultClassName","bool","defaultProps","noop"],"mappings":"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","file":"ChannelWithArea.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { path as d3Path } from 'd3-path';\n\nimport GenericChartComponent from '../../GenericChartComponent';\nimport { getMouseCanvas } from '../../GenericComponent';\nimport { generateLine, isHovering } from './StraightLine';\n\nimport { isDefined, isNotDefined, noop, hexToRGBA } from '../../utils';\n\nclass ChannelWithArea extends Component {\n  constructor(props) {\n    super(props);\n\n    this.renderSVG = this.renderSVG.bind(this);\n    this.drawOnCanvas = this.drawOnCanvas.bind(this);\n    this.isHover = this.isHover.bind(this);\n  }\n  isHover(moreProps) {\n    const { tolerance, onHover } = this.props;\n\n    if (isDefined(onHover)) {\n      const { lines, line1, line2 } = helper(this.props, moreProps);\n\n      if (isDefined(line1) && isDefined(line2)) {\n        const {\n          mouseXY,\n          xScale,\n          chartConfig: { yScale },\n        } = moreProps;\n\n        const line1Hovering = isHovering({\n          x1Value: lines.line1.x1,\n          y1Value: lines.line1.y1,\n          x2Value: lines.line1.x2,\n          y2Value: lines.line1.y2,\n          type: 'LINE',\n          mouseXY,\n          tolerance,\n          xScale,\n          yScale,\n        });\n        const line2Hovering = isHovering({\n          x1Value: lines.line2.x1,\n          y1Value: lines.line2.y1,\n          x2Value: lines.line2.x2,\n          y2Value: lines.line2.y2,\n          type: 'LINE',\n          mouseXY,\n          tolerance,\n          xScale,\n          yScale,\n        });\n\n        return line1Hovering || line2Hovering;\n      }\n    }\n    return false;\n  }\n  drawOnCanvas(ctx, moreProps) {\n    const { stroke, strokeWidth, fillOpacity, strokeOpacity, fill } =\n      this.props;\n    const { line1, line2 } = helper(this.props, moreProps);\n\n    if (isDefined(line1)) {\n      const { x1, y1, x2, y2 } = line1;\n\n      ctx.lineWidth = strokeWidth;\n      ctx.strokeStyle = hexToRGBA(stroke, strokeOpacity);\n\n      ctx.beginPath();\n      ctx.moveTo(x1, y1);\n      ctx.lineTo(x2, y2);\n      ctx.stroke();\n      if (isDefined(line2)) {\n        const { y1: line2Y1, y2: line2Y2 } = line2;\n\n        ctx.beginPath();\n        ctx.moveTo(x1, line2Y1);\n        ctx.lineTo(x2, line2Y2);\n        ctx.stroke();\n\n        ctx.fillStyle = hexToRGBA(fill, fillOpacity);\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n\n        ctx.lineTo(x2, y2);\n        ctx.lineTo(x2, line2Y2);\n        ctx.lineTo(x1, line2Y1);\n\n        ctx.closePath();\n        ctx.fill();\n      }\n    }\n  }\n  renderSVG(moreProps) {\n    const { stroke, strokeWidth, fillOpacity, fill, strokeOpacity } =\n      this.props;\n    const { line1, line2 } = helper(this.props, moreProps);\n\n    if (isDefined(line1)) {\n      const { x1, y1, x2, y2 } = line1;\n      const line = isDefined(line2) ? (\n        <line\n          strokeWidth={strokeWidth}\n          stroke={stroke}\n          strokeOpacity={strokeOpacity}\n          x1={x1}\n          y1={line2.y1}\n          x2={x2}\n          y2={line2.y2}\n        />\n      ) : null;\n      const area = isDefined(line2) ? (\n        <path fill={fill} fillOpacity={fillOpacity} d={getPath(line1, line2)} />\n      ) : null;\n\n      return (\n        <g>\n          <line\n            strokeWidth={strokeWidth}\n            stroke={stroke}\n            strokeOpacity={strokeOpacity}\n            x1={x1}\n            y1={y1}\n            x2={x2}\n            y2={y2}\n          />\n          {line}\n          {area}\n        </g>\n      );\n    }\n  }\n  render() {\n    const { selected, interactiveCursorClass } = this.props;\n    const { onDragStart, onDrag, onDragComplete, onHover, onUnHover } =\n      this.props;\n\n    return (\n      <GenericChartComponent\n        isHover={this.isHover}\n        svgDraw={this.renderSVG}\n        canvasToDraw={getMouseCanvas}\n        canvasDraw={this.drawOnCanvas}\n        interactiveCursorClass={interactiveCursorClass}\n        selected={selected}\n        onDragStart={onDragStart}\n        onDrag={onDrag}\n        onDragComplete={onDragComplete}\n        onHover={onHover}\n        onUnHover={onUnHover}\n        drawOn={['mousemove', 'mouseleave', 'pan', 'drag']}\n      />\n    );\n  }\n}\nfunction getPath(line1, line2) {\n  const ctx = d3Path();\n  ctx.moveTo(line1.x1, line1.y1);\n  ctx.lineTo(line1.x2, line1.y2);\n  ctx.lineTo(line1.x2, line2.y2);\n  ctx.lineTo(line1.x1, line2.y1);\n\n  ctx.closePath();\n  return ctx.toString();\n}\n\nfunction getLines(props, moreProps) {\n  const { startXY, endXY, dy, type } = props;\n  const { xScale } = moreProps;\n\n  if (isNotDefined(startXY) || isNotDefined(endXY)) {\n    return {};\n  }\n  const line1 = generateLine({\n    type,\n    start: startXY,\n    end: endXY,\n    xScale,\n  });\n  const line2 = isDefined(dy)\n    ? {\n        ...line1,\n        y1: line1.y1 + dy,\n        y2: line1.y2 + dy,\n      }\n    : undefined;\n\n  return {\n    line1,\n    line2,\n  };\n}\n\nfunction helper(props, moreProps) {\n  const lines = getLines(props, moreProps);\n  const {\n    xScale,\n    chartConfig: { yScale },\n  } = moreProps;\n\n  const x1 = xScale(lines.line1.x1);\n  const y1 = yScale(lines.line1.y1);\n  const x2 = xScale(lines.line1.x2);\n  const y2 = yScale(lines.line1.y2);\n\n  const line2 = isDefined(lines.line2)\n    ? {\n        x1,\n        y1: yScale(lines.line2.y1),\n        x2,\n        y2: yScale(lines.line2.y2),\n      }\n    : undefined;\n\n  return {\n    lines,\n    line1: {\n      x1,\n      y1,\n      x2,\n      y2,\n    },\n    line2,\n  };\n}\n\nChannelWithArea.propTypes = {\n  interactiveCursorClass: PropTypes.string,\n  stroke: PropTypes.string.isRequired,\n  strokeWidth: PropTypes.number.isRequired,\n  fill: PropTypes.string.isRequired,\n  fillOpacity: PropTypes.number.isRequired,\n  strokeOpacity: PropTypes.number.isRequired,\n\n  type: PropTypes.oneOf([\n    'XLINE', // extends from -Infinity to +Infinity\n    'RAY', // extends to +/-Infinity in one direction\n    'LINE', // extends between the set bounds\n  ]).isRequired,\n\n  onDragStart: PropTypes.func.isRequired,\n  onDrag: PropTypes.func.isRequired,\n  onDragComplete: PropTypes.func.isRequired,\n  onHover: PropTypes.func,\n  onUnHover: PropTypes.func,\n\n  defaultClassName: PropTypes.string,\n\n  tolerance: PropTypes.number.isRequired,\n  selected: PropTypes.bool.isRequired,\n};\n\nChannelWithArea.defaultProps = {\n  onDragStart: noop,\n  onDrag: noop,\n  onDragComplete: noop,\n  type: 'LINE',\n\n  strokeWidth: 1,\n  tolerance: 4,\n  selected: false,\n};\n\nexport default ChannelWithArea;\n"]}