{"version":3,"sources":["../../../../src/lib/interactive/components/ClickableShape.js"],"names":["ClickableShape","props","saveNode","bind","drawOnCanvas","isHover","node","moreProps","mouseXY","closeIcon","textBox","x","y","halfWidth","width","start1","end1","start2","end2","ctx","stroke","strokeWidth","strokeOpacity","hovering","helper","beginPath","lineWidth","strokeStyle","moveTo","lineTo","Error","interactiveCursorClass","show","onHover","onUnHover","onClick","renderSVG","getMouseCanvas","Component","yValue","text","fontFamily","fontStyle","fontWeight","fontSize","font","yScale","chartConfig","left","padding","measureText","right","propTypes","PropTypes","string","isRequired","number","object","bool","func","defaultProps","fillOpacity"],"mappings":"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","file":"ClickableShape.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport GenericChartComponent from '../../GenericChartComponent';\nimport { getMouseCanvas } from '../../GenericComponent';\n\nimport { isHovering2 } from './StraightLine';\nimport { hexToRGBA } from '../../utils';\n\nclass ClickableShape extends Component {\n  constructor(props) {\n    super(props);\n    this.saveNode = this.saveNode.bind(this);\n    this.drawOnCanvas = this.drawOnCanvas.bind(this);\n    this.isHover = this.isHover.bind(this);\n  }\n  saveNode(node) {\n    this.node = node;\n  }\n  isHover(moreProps) {\n    const { mouseXY } = moreProps;\n    if (this.closeIcon) {\n      const { textBox } = this.props;\n      const { x, y } = this.closeIcon;\n      const halfWidth = textBox.closeIcon.width / 2;\n\n      const start1 = [x - halfWidth, y - halfWidth];\n      const end1 = [x + halfWidth, y + halfWidth];\n      const start2 = [x - halfWidth, y + halfWidth];\n      const end2 = [x + halfWidth, y - halfWidth];\n\n      if (\n        isHovering2(start1, end1, mouseXY, 3) ||\n        isHovering2(start2, end2, mouseXY, 3)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n  drawOnCanvas(ctx, moreProps) {\n    const { stroke, strokeWidth, strokeOpacity, hovering, textBox } =\n      this.props;\n\n    const [x, y] = helper(this.props, moreProps, ctx);\n\n    this.closeIcon = { x, y };\n    ctx.beginPath();\n\n    ctx.lineWidth = hovering ? strokeWidth + 1 : strokeWidth;\n    ctx.strokeStyle = hexToRGBA(stroke, strokeOpacity);\n    const halfWidth = textBox.closeIcon.width / 2;\n    ctx.moveTo(x - halfWidth, y - halfWidth);\n    ctx.lineTo(x + halfWidth, y + halfWidth);\n    ctx.moveTo(x - halfWidth, y + halfWidth);\n    ctx.lineTo(x + halfWidth, y - halfWidth);\n    ctx.stroke();\n  }\n  renderSVG() {\n    throw new Error('svg not implemented');\n  }\n  render() {\n    const { interactiveCursorClass } = this.props;\n    const { show } = this.props;\n    const { onHover, onUnHover, onClick } = this.props;\n\n    return show ? (\n      <GenericChartComponent\n        ref={this.saveNode}\n        interactiveCursorClass={interactiveCursorClass}\n        isHover={this.isHover}\n        onClickWhenHover={onClick}\n        svgDraw={this.renderSVG}\n        canvasDraw={this.drawOnCanvas}\n        canvasToDraw={getMouseCanvas}\n        onHover={onHover}\n        onUnHover={onUnHover}\n        drawOn={['pan', 'mousemove', 'drag']}\n      />\n    ) : null;\n  }\n}\n\nfunction helper(props, moreProps, ctx) {\n  const { yValue, text, textBox } = props;\n  const { fontFamily, fontStyle, fontWeight, fontSize } = props;\n  ctx.font = `${fontStyle} ${fontWeight} ${fontSize}px ${fontFamily}`;\n\n  const {\n    chartConfig: { yScale },\n  } = moreProps;\n\n  const x =\n    textBox.left +\n    textBox.padding.left +\n    ctx.measureText(text).width +\n    textBox.padding.right +\n    textBox.closeIcon.padding.left +\n    textBox.closeIcon.width / 2;\n\n  const y = yScale(yValue);\n\n  return [x, y];\n}\n\nClickableShape.propTypes = {\n  stroke: PropTypes.string.isRequired,\n  strokeOpacity: PropTypes.number.isRequired,\n  strokeWidth: PropTypes.number.isRequired,\n  textBox: PropTypes.object.isRequired,\n  hovering: PropTypes.bool,\n  interactiveCursorClass: PropTypes.string,\n  show: PropTypes.bool,\n  onHover: PropTypes.func,\n  onUnHover: PropTypes.func,\n  onClick: PropTypes.func,\n};\n\nClickableShape.defaultProps = {\n  show: false,\n  fillOpacity: 1,\n  strokeOpacity: 1,\n  strokeWidth: 1,\n};\n\nexport default ClickableShape;\n"]}