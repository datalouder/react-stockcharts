{"version":3,"sources":["../../../src/lib/utils/mappedSlidingWindow.js"],"names":["undefinedValue","undefined","windowSize","accumulator","noop","source","identity","skipInitial","mappedSlidingWindow","data","size","apply","arguments","windowData","accumulatorIdx","undef","result","forEach","d","i","mapped","push","shift","pop","x","length"],"mappings":";;;;;;kBAIe,YAAY;AACzB,MAAIA,iBAAiBC,SAArB;AAAA,MACEC,aAAa,EADf;AAAA,MAEEC,cAAcC,cAFhB;AAAA,MAGEC,SAASC,kBAHX;AAAA,MAIEC,cAAc,CAJhB;;AAMA;AACA,MAAIC,sBAAsB,SAAtBA,mBAAsB,CAAUC,IAAV,EAAgB;AACxC,QAAMC,OAAO,oBAAQR,UAAR,EAAoBS,KAApB,CAA0B,IAA1B,EAAgCC,SAAhC,CAAb;AACA,QAAMC,aAAa,EAAnB;AACA,QAAIC,iBAAiB,CAArB;AACA,QAAMC,QAAQ,oBAAQf,cAAR,CAAd;AACA;AACA,QAAMgB,SAAS,EAAf;AACAP,SAAKQ,OAAL,CAAa,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC3B;AACA,UAAIC,eAAJ;AACA,UAAID,IAAIZ,cAAcG,IAAd,GAAqB,CAA7B,EAAgC;AAC9BU,iBAASL,MAAMG,CAAN,EAASC,CAAT,CAAT;AACAH,eAAOK,IAAP,CAAYD,MAAZ;AACAP,mBAAWQ,IAAX,CAAgBD,MAAhB;AACA;AACD;AACD,UAAID,KAAKZ,cAAcG,IAAvB,EAA6B;AAC3B;AACAG,mBAAWS,KAAX;AACD;AACDT,iBAAWQ,IAAX,CAAgBhB,OAAOa,CAAP,EAAUC,CAAV,CAAhB;AACAC,eAASjB,YAAYU,UAAZ,EAAwBM,CAAxB,EAA2BL,gBAA3B,CAAT;AACAE,aAAOK,IAAP,CAAYD,MAAZ;AACAP,iBAAWU,GAAX;AACAV,iBAAWQ,IAAX,CAAgBD,MAAhB;AACA;AACD,KAnBD;AAoBA,WAAOJ,MAAP;AACD,GA5BD;;AA8BAR,sBAAoBR,cAApB,GAAqC,UAAUwB,CAAV,EAAa;AAChD,QAAI,CAACZ,UAAUa,MAAf,EAAuB;AACrB,aAAOzB,cAAP;AACD;AACDA,qBAAiBwB,CAAjB;AACA,WAAOhB,mBAAP;AACD,GAND;AAOAA,sBAAoBN,UAApB,GAAiC,UAAUsB,CAAV,EAAa;AAC5C,QAAI,CAACZ,UAAUa,MAAf,EAAuB;AACrB,aAAOvB,UAAP;AACD;AACDA,iBAAasB,CAAb;AACA,WAAOhB,mBAAP;AACD,GAND;AAOAA,sBAAoBL,WAApB,GAAkC,UAAUqB,CAAV,EAAa;AAC7C,QAAI,CAACZ,UAAUa,MAAf,EAAuB;AACrB,aAAOtB,WAAP;AACD;AACDA,kBAAcqB,CAAd;AACA,WAAOhB,mBAAP;AACD,GAND;AAOAA,sBAAoBD,WAApB,GAAkC,UAAUiB,CAAV,EAAa;AAC7C,QAAI,CAACZ,UAAUa,MAAf,EAAuB;AACrB,aAAOlB,WAAP;AACD;AACDA,kBAAciB,CAAd;AACA,WAAOhB,mBAAP;AACD,GAND;AAOAA,sBAAoBH,MAApB,GAA6B,UAAUmB,CAAV,EAAa;AACxC,QAAI,CAACZ,UAAUa,MAAf,EAAuB;AACrB,aAAOpB,MAAP;AACD;AACDA,aAASmB,CAAT;AACA,WAAOhB,mBAAP;AACD,GAND;;AAQA,SAAOA,mBAAP;AACD,C;;AA/ED;;;;AACA;;;;AACA","file":"mappedSlidingWindow.js","sourcesContent":["import noop from './noop';\nimport identity from './identity';\nimport { functor } from './index';\n\nexport default function () {\n  let undefinedValue = undefined,\n    windowSize = 10,\n    accumulator = noop,\n    source = identity,\n    skipInitial = 0;\n\n  // eslint-disable-next-line prefer-const\n  let mappedSlidingWindow = function (data) {\n    const size = functor(windowSize).apply(this, arguments);\n    const windowData = [];\n    let accumulatorIdx = 0;\n    const undef = functor(undefinedValue);\n    // console.log(skipInitial, size, data.length, windowData.length);\n    const result = [];\n    data.forEach(function (d, i) {\n      // console.log(d, i, windowData.length);\n      let mapped;\n      if (i < skipInitial + size - 1) {\n        mapped = undef(d, i);\n        result.push(mapped);\n        windowData.push(mapped);\n        return;\n      }\n      if (i >= skipInitial + size) {\n        // Treat windowData as FIFO rolling buffer\n        windowData.shift();\n      }\n      windowData.push(source(d, i));\n      mapped = accumulator(windowData, i, accumulatorIdx++);\n      result.push(mapped);\n      windowData.pop();\n      windowData.push(mapped);\n      return;\n    });\n    return result;\n  };\n\n  mappedSlidingWindow.undefinedValue = function (x) {\n    if (!arguments.length) {\n      return undefinedValue;\n    }\n    undefinedValue = x;\n    return mappedSlidingWindow;\n  };\n  mappedSlidingWindow.windowSize = function (x) {\n    if (!arguments.length) {\n      return windowSize;\n    }\n    windowSize = x;\n    return mappedSlidingWindow;\n  };\n  mappedSlidingWindow.accumulator = function (x) {\n    if (!arguments.length) {\n      return accumulator;\n    }\n    accumulator = x;\n    return mappedSlidingWindow;\n  };\n  mappedSlidingWindow.skipInitial = function (x) {\n    if (!arguments.length) {\n      return skipInitial;\n    }\n    skipInitial = x;\n    return mappedSlidingWindow;\n  };\n  mappedSlidingWindow.source = function (x) {\n    if (!arguments.length) {\n      return source;\n    }\n    source = x;\n    return mappedSlidingWindow;\n  };\n\n  return mappedSlidingWindow;\n}\n"]}