{"version":3,"sources":["../../../../src/lib/tooltip/GroupTooltip.js"],"names":["React","Component","PropTypes","format","displayValuesFor","GenericChartComponent","ToolTipText","ToolTipTSpanLabel","VALID_LAYOUTS","SingleTooltip","props","handleClick","bind","e","onClick","forChart","options","chartId","origin","yLabel","yValue","labelFill","valueFill","withShape","fontSize","fontFamily","layout","comp","renderValueNextToLabel","renderValueBeneathToLabel","renderInline","propTypes","array","isRequired","string","func","number","bool","oneOfType","object","oneOf","defaultProps","GroupTooltip","renderSVG","moreProps","position","chartConfig","height","width","dx","dy","textAnchor","xyPos","undefined","className","verticalSize","displayFormat","currentItem","getPosition","xPos","yPos","singleTooltip","map","each","idx","yAccessor","yDisplayValue","orig","arrayOf","shape"],"mappings":"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","file":"GroupTooltip.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { format } from 'd3-format';\nimport displayValuesFor from './displayValuesFor';\nimport GenericChartComponent from '../GenericChartComponent';\nimport ToolTipText from './ToolTipText';\nimport ToolTipTSpanLabel from './ToolTipTSpanLabel';\n\nconst VALID_LAYOUTS = [\n  'horizontal',\n  'horizontalRows',\n  'horizontalInline',\n  'vertical',\n  'verticalRows',\n];\n\nclass SingleTooltip extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(e) {\n    const { onClick, forChart, options } = this.props;\n    onClick({ chartId: forChart, ...options }, e);\n  }\n\n  /**\n   * Renders the value next to the label.\n   */\n  renderValueNextToLabel() {\n    const {\n      origin,\n      yLabel,\n      yValue,\n      labelFill,\n      valueFill,\n      withShape,\n      fontSize,\n      fontFamily,\n    } = this.props;\n\n    return (\n      <g\n        transform={`translate(${origin[0]}, ${origin[1]})`}\n        onClick={this.handleClick}\n      >\n        {withShape ? (\n          <rect x=\"0\" y=\"-6\" width=\"6\" height=\"6\" fill={valueFill} />\n        ) : null}\n        <ToolTipText\n          x={withShape ? 8 : 0}\n          y={0}\n          fontFamily={fontFamily}\n          fontSize={fontSize}\n        >\n          <ToolTipTSpanLabel fill={labelFill}>{yLabel}: </ToolTipTSpanLabel>\n          <tspan fill={valueFill}>{yValue}</tspan>\n        </ToolTipText>\n      </g>\n    );\n  }\n\n  /**\n   * Renders the value beneath the label.\n   */\n  renderValueBeneathToLabel() {\n    const {\n      origin,\n      yLabel,\n      yValue,\n      labelFill,\n      valueFill,\n      withShape,\n      fontSize,\n      fontFamily,\n    } = this.props;\n\n    return (\n      <g\n        transform={`translate(${origin[0]}, ${origin[1]})`}\n        onClick={this.handleClick}\n      >\n        {withShape ? (\n          <line\n            x1={0}\n            y1={2}\n            x2={0}\n            y2={28}\n            stroke={valueFill}\n            strokeWidth=\"4px\"\n          />\n        ) : null}\n        <ToolTipText x={5} y={11} fontFamily={fontFamily} fontSize={fontSize}>\n          <ToolTipTSpanLabel fill={labelFill}>{yLabel}</ToolTipTSpanLabel>\n          <tspan x=\"5\" dy=\"15\" fill={valueFill}>\n            {yValue}\n          </tspan>\n        </ToolTipText>\n      </g>\n    );\n  }\n\n  /**\n   * Renders the value next to the label.\n   * The parent component must have a \"text\"-element.\n   */\n  renderInline() {\n    const { yLabel, yValue, labelFill, valueFill, fontSize, fontFamily } =\n      this.props;\n\n    return (\n      <tspan\n        onClick={this.handleClick}\n        fontFamily={fontFamily}\n        fontSize={fontSize}\n      >\n        <ToolTipTSpanLabel fill={labelFill}>{yLabel}:&nbsp;</ToolTipTSpanLabel>\n        <tspan fill={valueFill}>{yValue}&nbsp;&nbsp;</tspan>\n      </tspan>\n    );\n  }\n\n  render() {\n    const { layout } = this.props;\n    let comp = null;\n\n    switch (layout) {\n      case 'horizontal':\n        comp = this.renderValueNextToLabel();\n        break;\n      case 'horizontalRows':\n        comp = this.renderValueBeneathToLabel();\n        break;\n      case 'horizontalInline':\n        comp = this.renderInline();\n        break;\n      case 'vertical':\n        comp = this.renderValueNextToLabel();\n        break;\n      case 'verticalRows':\n        comp = this.renderValueBeneathToLabel();\n        break;\n      default:\n        comp = this.renderValueNextToLabel();\n    }\n\n    return comp;\n  }\n}\n\nSingleTooltip.propTypes = {\n  origin: PropTypes.array.isRequired,\n  yLabel: PropTypes.string.isRequired,\n  yValue: PropTypes.string.isRequired,\n  onClick: PropTypes.func,\n  fontFamily: PropTypes.string,\n  labelFill: PropTypes.string.isRequired,\n  valueFill: PropTypes.string.isRequired,\n  fontSize: PropTypes.number,\n  withShape: PropTypes.bool,\n  forChart: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n    .isRequired,\n  options: PropTypes.object.isRequired,\n  layout: PropTypes.oneOf(VALID_LAYOUTS).isRequired,\n};\n\nSingleTooltip.defaultProps = {\n  labelFill: '#4682B4',\n  valueFill: '#000000',\n  withShape: false,\n};\n\nclass GroupTooltip extends Component {\n  constructor(props) {\n    super(props);\n    this.renderSVG = this.renderSVG.bind(this);\n  }\n\n  getPosition(moreProps) {\n    const { position } = this.props;\n    const { height, width } = moreProps.chartConfig;\n\n    const dx = 20;\n    const dy = 40;\n    let textAnchor = null;\n    let xyPos = null;\n\n    if (position !== undefined) {\n      switch (position) {\n        case 'topRight':\n          xyPos = [width - dx, null];\n          textAnchor = 'end';\n          break;\n        case 'bottomLeft':\n          xyPos = [null, height - dy];\n          break;\n        case 'bottomRight':\n          xyPos = [width - dx, height - dy];\n          textAnchor = 'end';\n          break;\n        default:\n          xyPos = [null, null];\n      }\n    } else {\n      xyPos = [null, null];\n    }\n\n    return { xyPos, textAnchor };\n  }\n\n  renderSVG(moreProps) {\n    const { displayValuesFor } = this.props;\n    const { chartId } = moreProps;\n\n    const {\n      className,\n      onClick,\n      width,\n      verticalSize,\n      fontFamily,\n      fontSize,\n      layout,\n    } = this.props;\n    const { origin, displayFormat, options } = this.props;\n    const currentItem = displayValuesFor(this.props, moreProps);\n    const { xyPos, textAnchor } = this.getPosition(moreProps);\n\n    const xPos = xyPos != null && xyPos[0] != null ? xyPos[0] : origin[0];\n    const yPos = xyPos != null && xyPos[1] != null ? xyPos[1] : origin[1];\n\n    const singleTooltip = options.map((each, idx) => {\n      const yValue = currentItem && each.yAccessor(currentItem);\n      const yDisplayValue = yValue ? displayFormat(yValue) : 'n/a';\n\n      const orig = () => {\n        if (layout === 'horizontal' || layout === 'horizontalRows') {\n          return [width * idx, 0];\n        }\n        if (layout === 'vertical') {\n          return [0, verticalSize * idx];\n        }\n        if (layout === 'verticalRows') {\n          return [0, verticalSize * 2.3 * idx];\n        }\n        return [0, 0];\n      };\n\n      return (\n        <SingleTooltip\n          key={idx}\n          layout={layout}\n          origin={orig()}\n          yLabel={each.yLabel}\n          yValue={yDisplayValue}\n          options={each}\n          forChart={chartId}\n          onClick={onClick}\n          fontFamily={fontFamily}\n          fontSize={fontSize}\n          labelFill={each.labelFill}\n          valueFill={each.valueFill}\n          withShape={each.withShape}\n        />\n      );\n    });\n\n    return (\n      <g\n        transform={`translate(${xPos}, ${yPos})`}\n        className={className}\n        textAnchor={textAnchor}\n      >\n        {layout === 'horizontalInline' ? (\n          <ToolTipText x={0} y={0} fontFamily={fontFamily} fontSize={fontSize}>\n            {singleTooltip}\n          </ToolTipText>\n        ) : (\n          singleTooltip\n        )}\n      </g>\n    );\n  }\n  render() {\n    return (\n      <GenericChartComponent\n        clip={false}\n        svgDraw={this.renderSVG}\n        drawOn={['mousemove']}\n      />\n    );\n  }\n}\n\nGroupTooltip.propTypes = {\n  className: PropTypes.string,\n  layout: PropTypes.oneOf(VALID_LAYOUTS).isRequired,\n  position: PropTypes.oneOf(['topRight', 'bottomLeft', 'bottomRight']),\n  displayFormat: PropTypes.func.isRequired,\n  origin: PropTypes.array.isRequired,\n  displayValuesFor: PropTypes.func,\n  onClick: PropTypes.func,\n  fontFamily: PropTypes.string,\n  fontSize: PropTypes.number,\n  width: PropTypes.number, // \"width\" only be used, if layout is \"horizontal\" or \"horizontalRows\".\n  verticalSize: PropTypes.number, // \"verticalSize\" only be used, if layout is \"vertical\", \"verticalRows\".\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      yLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.func])\n        .isRequired,\n      yAccessor: PropTypes.func.isRequired,\n      labelFill: PropTypes.string,\n      valueFill: PropTypes.string,\n      withShape: PropTypes.bool, // \"withShape\" is ignored, if layout is \"horizontalInline\" or \"vertical\".\n    })\n  ),\n};\n\nGroupTooltip.defaultProps = {\n  className: 'react-stockcharts-tooltip react-stockcharts-group-tooltip',\n  layout: 'horizontal',\n  displayFormat: format('.2f'),\n  displayValuesFor: displayValuesFor,\n  origin: [0, 0],\n  width: 60,\n  verticalSize: 13,\n};\n\nexport default GroupTooltip;\n"]}