{"version":3,"sources":["../../../../src/lib/interactive/InteractiveText.js"],"names":["React","Component","PropTypes","isDefined","noop","getValueFromOverride","terminate","saveNodeType","isHoverForInteractiveType","EachText","HoverTextNearMouse","GenericChartComponent","getMouseCanvas","InteractiveText","props","handleDraw","bind","handleDrag","handleDragComplete","getSelectionState","nodes","state","index","position","setState","override","moreProps","textList","newTextList","map","each","idx","selected","onDragComplete","xyValue","current","start","end","e","enabled","mouseXY","mouseY","yScale","chartConfig","xAccessor","currentItem","invert","defaultText","onChoosePosition","newText","hoverText","defaultHoverText","defaultProps","propTypes","func","isRequired","onSelect","shape","bgFill","string","bgOpacity","number","bgStrokeWidth","bgStroke","textFill","fontFamily","fontWeight","fontStyle","fontSize","text","object","array","bool","enable","bgHeight","bgWidth","selectedText","contextTypes","subscribe","unsubscribe","generateSubscriptionId","chartId","oneOfType"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,SAASC,SAAT,EAAoBC,IAApB,QAAgC,UAAhC;;AAEA,SACEC,oBADF,EAEEC,SAFF,EAGEC,YAHF,EAIEC,yBAJF,QAKO,SALP;AAMA,OAAOC,QAAP,MAAqB,oBAArB;AACA,OAAOC,kBAAP,MAA+B,iCAA/B;AACA,OAAOC,qBAAP,MAAkC,0BAAlC;AACA,SAASC,cAAT,QAA+B,qBAA/B;;IAEMC,e;;;AACJ,2BAAYC,KAAZ,EAAmB;AAAA;;AAAA,kIACXA,KADW;;AAGjB,UAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBC,IAAhB,OAAlB;AACA,UAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBD,IAAhB,OAAlB;AACA,UAAKE,kBAAL,GAA0B,MAAKA,kBAAL,CAAwBF,IAAxB,OAA1B;AACA,UAAKV,SAAL,GAAiBA,UAAUU,IAAV,OAAjB;;AAEA,UAAKT,YAAL,GAAoBA,aAAaS,IAAb,OAApB;AACA,UAAKG,iBAAL,GAAyBX,0BAA0B,UAA1B,EAAsCQ,IAAtC,OAAzB;;AAEA,UAAKI,KAAL,GAAa,EAAb;AACA,UAAKC,KAAL,GAAa,EAAb;AAZiB;AAalB;;;;+BACUC,K,EAAOC,Q,EAAU;AAC1B,WAAKC,QAAL,CAAc;AACZC,kBAAU;AACRH,sBADQ;AAERC;AAFQ;AADE,OAAd;AAMD;;;uCACkBG,S,EAAW;AAAA;;AAAA,UACpBD,QADoB,GACP,KAAKJ,KADE,CACpBI,QADoB;;AAE5B,UAAItB,UAAUsB,QAAV,CAAJ,EAAyB;AAAA,YACfE,QADe,GACF,KAAKb,KADH,CACfa,QADe;;AAEvB,YAAMC,cAAcD,SAASE,GAAT,CAAa,UAACC,IAAD,EAAOC,GAAP,EAAe;AAC9C,cAAMC,WAAWD,QAAQN,SAASH,KAAlC;AACA,iBAAOU,wBAEEF,IAFF;AAGDP,sBAAUE,SAASF,QAHlB;AAIDS;AAJC,4BAOEF,IAPF;AAQDE;AARC,YAAP;AAUD,SAZmB,CAApB;AAaA,aAAKR,QAAL,CACE;AACEC,oBAAU;AADZ,SADF,EAIE,YAAM;AACJ,iBAAKX,KAAL,CAAWmB,cAAX,CAA0BL,WAA1B,EAAuCF,SAAvC;AACD,SANH;AAQD;AACF;;;mCACcQ,O,EAAS;AAAA,UACdC,OADc,GACF,KAAKd,KADH,CACdc,OADc;;;AAGtB,UAAIhC,UAAUgC,OAAV,KAAsBhC,UAAUgC,QAAQC,KAAlB,CAA1B,EAAoD;AAClD,aAAKZ,QAAL,CAAc;AACZW,mBAAS;AACPC,mBAAOD,QAAQC,KADR;AAEPC,iBAAKH;AAFE;AADG,SAAd;AAMD;AACF;;;+BACUR,S,EAAWY,C,EAAG;AAAA,UACfC,OADe,GACH,KAAKzB,KADF,CACfyB,OADe;;AAEvB,UAAIA,OAAJ,EAAa;AAAA,gDAMPb,SANO,CAETc,OAFS;AAAA,YAEGC,MAFH;AAAA,YAGMC,MAHN,GAMPhB,SANO,CAGTiB,WAHS,CAGMD,MAHN;AAAA,YAITE,SAJS,GAMPlB,SANO,CAITkB,SAJS;AAAA,YAKTC,WALS,GAMPnB,SANO,CAKTmB,WALS;;AAQX,YAAMX,UAAU,CAACU,UAAUC,WAAV,CAAD,EAAyBH,OAAOI,MAAP,CAAcL,MAAd,CAAzB,CAAhB;;AARW,qBAU+B,KAAK3B,KAVpC;AAAA,YAUHiC,WAVG,UAUHA,WAVG;AAAA,YAUUC,gBAVV,UAUUA,gBAVV;;;AAYX,YAAMC,uBACDF,WADC;AAEJxB,oBAAUW;AAFN,UAAN;AAIAc,yBAAiBC,OAAjB,EAA0BvB,SAA1B,EAAqCY,CAArC;AACD,OAnBsB,CAmBrB;;;AAGH;;;6BACQ;AAAA;;AAAA,oBACsC,KAAKxB,KAD3C;AAAA,UACCa,QADD,WACCA,QADD;AAAA,UACWoB,WADX,WACWA,WADX;AAAA,UACwBG,SADxB,WACwBA,SADxB;AAAA,UAECzB,QAFD,GAEc,KAAKJ,KAFnB,CAECI,QAFD;;AAGP,aACE;AAAA;AAAA;AACGE,iBAASE,GAAT,CAAa,UAACC,IAAD,EAAOC,GAAP,EAAe;AAC3B,cAAMoB,mBAAmBtC,gBAAgBuC,YAAhB,CAA6BF,SAAtD;AACA,cAAMpC,qBACDiC,WADC,EAEDjB,IAFC;AAGJoB,oCACKC,gBADL,EAEKD,SAFL,EAGMpB,KAAKoB,SAAL,IAAkB,EAHxB;AAHI,YAAN;AASA,iBACE,oBAAC,QAAD;AACE,iBAAKnB,GADP;AAEE,iBAAK,OAAKxB,YAAL,CAAkBwB,GAAlB,CAFP;AAGE,mBAAOA;AAHT,aAIMjB,KAJN;AAKE,sBAAUgB,KAAKE,QALjB;AAME,sBAAU3B,qBACRoB,QADQ,EAERM,GAFQ,EAGR,UAHQ,EAIRD,KAAKP,QAJG,CANZ;AAYE,oBAAQ,OAAKN,UAZf;AAaE,4BAAgB,OAAKC,kBAbvB;AAcE,mCAAsB;AAdxB,aADF;AAkBD,SA7BA,CADH;AA+BE,4BAAC,qBAAD;AACE,mBAAS,KAAKH,UADhB;AAEE,mBAASX,IAFX;AAGE,sBAAYA,IAHd;AAIE,wBAAcQ,cAJhB;AAKE,kBAAQ,CAAC,WAAD,EAAc,KAAd;AALV,UA/BF;AAAA;AAAA,OADF;AA0CD;;;;EAlI2BX,S;;AAqI9BY,gBAAgBwC,SAAhB,GAA4B;AAC1BL,oBAAkB9C,UAAUoD,IAAV,CAAeC,UADP;AAE1BtB,kBAAgB/B,UAAUoD,IAAV,CAAeC,UAFL;AAG1BC,YAAUtD,UAAUoD,IAHM;;AAK1BP,eAAa7C,UAAUuD,KAAV,CAAgB;AAC3BC,YAAQxD,UAAUyD,MAAV,CAAiBJ,UADE;AAE3BK,eAAW1D,UAAU2D,MAAV,CAAiBN,UAFD;AAG3BO,mBAAe5D,UAAU2D,MAHE;AAI3BE,cAAU7D,UAAUyD,MAJO;AAK3BK,cAAU9D,UAAUyD,MAAV,CAAiBJ,UALA;AAM3BU,gBAAY/D,UAAUyD,MAAV,CAAiBJ,UANF;AAO3BW,gBAAYhE,UAAUyD,MAAV,CAAiBJ,UAPF;AAQ3BY,eAAWjE,UAAUyD,MAAV,CAAiBJ,UARD;AAS3Ba,cAAUlE,UAAU2D,MAAV,CAAiBN,UATA;AAU3Bc,UAAMnE,UAAUyD,MAAV,CAAiBJ;AAVI,GAAhB,EAWVA,UAhBuB;;AAkB1BL,aAAWhD,UAAUoE,MAAV,CAAiBf,UAlBF;AAmB1B5B,YAAUzB,UAAUqE,KAAV,CAAgBhB,UAnBA;AAoB1BhB,WAASrC,UAAUsE,IAAV,CAAejB;AApBE,CAA5B;;AAuBA1C,gBAAgBuC,YAAhB,GAA+B;AAC7BJ,oBAAkB5C,IADW;AAE7B6B,kBAAgB7B,IAFa;AAG7BoD,YAAUpD,IAHmB;;AAK7B2C,eAAa;AACXW,YAAQ,SADG;AAEXE,eAAW,CAFA;AAGXE,mBAAe,CAHJ;AAIXE,cAAU,SAJC;AAKXC,gBAAY,8CALD;AAMXG,cAAU,EANC;AAOXD,eAAW,QAPA;AAQXD,gBAAY,QARD;AASXG,UAAM;AATK,GALgB;AAgB7BnB,0BACKxC,mBAAmB0C,YADxB;AAEEqB,YAAQ,IAFV;AAGEC,cAAU,MAHZ;AAIEC,aAAS,MAJX;AAKEN,UAAM,wBALR;AAMEO,kBAAc;AANhB,IAhB6B;AAwB7BjD,YAAU;AAxBmB,CAA/B;;AA2BAd,gBAAgBgE,YAAhB,GAA+B;AAC7BC,aAAW5E,UAAUoD,IAAV,CAAeC,UADG;AAE7BwB,eAAa7E,UAAUoD,IAAV,CAAeC,UAFC;AAG7ByB,0BAAwB9E,UAAUoD,IAAV,CAAeC,UAHV;AAI7B0B,WAAS/E,UAAUgF,SAAV,CAAoB,CAAChF,UAAU2D,MAAX,EAAmB3D,UAAUyD,MAA7B,CAApB,EAA0DJ;AAJtC,CAA/B;;AAOA,eAAe1C,eAAf","file":"InteractiveText.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { isDefined, noop } from '../utils';\n\nimport {\n  getValueFromOverride,\n  terminate,\n  saveNodeType,\n  isHoverForInteractiveType,\n} from './utils';\nimport EachText from './wrapper/EachText';\nimport HoverTextNearMouse from './components/HoverTextNearMouse';\nimport GenericChartComponent from '../GenericChartComponent';\nimport { getMouseCanvas } from '../GenericComponent';\n\nclass InteractiveText extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDraw = this.handleDraw.bind(this);\n    this.handleDrag = this.handleDrag.bind(this);\n    this.handleDragComplete = this.handleDragComplete.bind(this);\n    this.terminate = terminate.bind(this);\n\n    this.saveNodeType = saveNodeType.bind(this);\n    this.getSelectionState = isHoverForInteractiveType('textList').bind(this);\n\n    this.nodes = [];\n    this.state = {};\n  }\n  handleDrag(index, position) {\n    this.setState({\n      override: {\n        index,\n        position,\n      },\n    });\n  }\n  handleDragComplete(moreProps) {\n    const { override } = this.state;\n    if (isDefined(override)) {\n      const { textList } = this.props;\n      const newTextList = textList.map((each, idx) => {\n        const selected = idx === override.index;\n        return selected\n          ? {\n              ...each,\n              position: override.position,\n              selected,\n            }\n          : {\n              ...each,\n              selected,\n            };\n      });\n      this.setState(\n        {\n          override: null,\n        },\n        () => {\n          this.props.onDragComplete(newTextList, moreProps);\n        }\n      );\n    }\n  }\n  handleDrawLine(xyValue) {\n    const { current } = this.state;\n\n    if (isDefined(current) && isDefined(current.start)) {\n      this.setState({\n        current: {\n          start: current.start,\n          end: xyValue,\n        },\n      });\n    }\n  }\n  handleDraw(moreProps, e) {\n    const { enabled } = this.props;\n    if (enabled) {\n      const {\n        mouseXY: [, mouseY],\n        chartConfig: { yScale },\n        xAccessor,\n        currentItem,\n      } = moreProps;\n\n      const xyValue = [xAccessor(currentItem), yScale.invert(mouseY)];\n\n      const { defaultText, onChoosePosition } = this.props;\n\n      const newText = {\n        ...defaultText,\n        position: xyValue,\n      };\n      onChoosePosition(newText, moreProps, e);\n    } /*  else {\n\t\t\tthis.handleClick(moreProps, e);\n\t\t} */\n  }\n  render() {\n    const { textList, defaultText, hoverText } = this.props;\n    const { override } = this.state;\n    return (\n      <g>\n        {textList.map((each, idx) => {\n          const defaultHoverText = InteractiveText.defaultProps.hoverText;\n          const props = {\n            ...defaultText,\n            ...each,\n            hoverText: {\n              ...defaultHoverText,\n              ...hoverText,\n              ...(each.hoverText || {}),\n            },\n          };\n          return (\n            <EachText\n              key={idx}\n              ref={this.saveNodeType(idx)}\n              index={idx}\n              {...props}\n              selected={each.selected}\n              position={getValueFromOverride(\n                override,\n                idx,\n                'position',\n                each.position\n              )}\n              onDrag={this.handleDrag}\n              onDragComplete={this.handleDragComplete}\n              edgeInteractiveCursor=\"react-stockcharts-move-cursor\"\n            />\n          );\n        })}\n        <GenericChartComponent\n          onClick={this.handleDraw}\n          svgDraw={noop}\n          canvasDraw={noop}\n          canvasToDraw={getMouseCanvas}\n          drawOn={['mousemove', 'pan']}\n        />\n        ;\n      </g>\n    );\n  }\n}\n\nInteractiveText.propTypes = {\n  onChoosePosition: PropTypes.func.isRequired,\n  onDragComplete: PropTypes.func.isRequired,\n  onSelect: PropTypes.func,\n\n  defaultText: PropTypes.shape({\n    bgFill: PropTypes.string.isRequired,\n    bgOpacity: PropTypes.number.isRequired,\n    bgStrokeWidth: PropTypes.number,\n    bgStroke: PropTypes.string,\n    textFill: PropTypes.string.isRequired,\n    fontFamily: PropTypes.string.isRequired,\n    fontWeight: PropTypes.string.isRequired,\n    fontStyle: PropTypes.string.isRequired,\n    fontSize: PropTypes.number.isRequired,\n    text: PropTypes.string.isRequired,\n  }).isRequired,\n\n  hoverText: PropTypes.object.isRequired,\n  textList: PropTypes.array.isRequired,\n  enabled: PropTypes.bool.isRequired,\n};\n\nInteractiveText.defaultProps = {\n  onChoosePosition: noop,\n  onDragComplete: noop,\n  onSelect: noop,\n\n  defaultText: {\n    bgFill: '#D3D3D3',\n    bgOpacity: 1,\n    bgStrokeWidth: 1,\n    textFill: '#F10040',\n    fontFamily: 'Helvetica Neue, Helvetica, Arial, sans-serif',\n    fontSize: 12,\n    fontStyle: 'normal',\n    fontWeight: 'normal',\n    text: 'Lorem ipsum...',\n  },\n  hoverText: {\n    ...HoverTextNearMouse.defaultProps,\n    enable: true,\n    bgHeight: 'auto',\n    bgWidth: 'auto',\n    text: 'Click to select object',\n    selectedText: '',\n  },\n  textList: [],\n};\n\nInteractiveText.contextTypes = {\n  subscribe: PropTypes.func.isRequired,\n  unsubscribe: PropTypes.func.isRequired,\n  generateSubscriptionId: PropTypes.func.isRequired,\n  chartId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n};\n\nexport default InteractiveText;\n"]}