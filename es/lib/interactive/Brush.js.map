{"version":3,"sources":["../../../../src/lib/interactive/Brush.js"],"names":["React","Component","PropTypes","isDefined","noop","getStrokeDasharray","hexToRGBA","GenericChartComponent","getMouseCanvas","Brush","props","context","handleZoomStart","bind","handleDrawSquare","handleZoomComplete","drawOnCanvas","renderSVG","saveNode","terminate","state","rect","zoomHappening","setState","x1y1","start","end","node","ctx","x","y","height","width","stroke","fill","strokeDashArray","strokeOpacity","fillOpacity","dashArray","split","map","d","strokeStyle","fillStyle","setLineDash","beginPath","fillRect","strokeRect","moreProps","mouseXY","mouseY","currentItem","yScale","chartConfig","xAccessor","xScale","selected","item","xValue","yValue","invert","x2","y2","x1","y1","Math","min","abs","onBrush","enabled","propTypes","bool","isRequired","onStart","func","type","oneOf","string","number","interactiveState","object","defaultProps"],"mappings":"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","file":"Brush.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { isDefined, noop, getStrokeDasharray, hexToRGBA } from '../utils';\nimport GenericChartComponent from '../GenericChartComponent';\nimport { getMouseCanvas } from '../GenericComponent';\n\nclass Brush extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.handleZoomStart = this.handleZoomStart.bind(this);\n    this.handleDrawSquare = this.handleDrawSquare.bind(this);\n    this.handleZoomComplete = this.handleZoomComplete.bind(this);\n\n    this.drawOnCanvas = this.drawOnCanvas.bind(this);\n    this.renderSVG = this.renderSVG.bind(this);\n    this.saveNode = this.saveNode.bind(this);\n    this.terminate = this.terminate.bind(this);\n    this.state = {\n      rect: null,\n    };\n  }\n  terminate() {\n    this.zoomHappening = false;\n    this.setState({\n      x1y1: null,\n      start: null,\n      end: null,\n      rect: null,\n    });\n  }\n  saveNode(node) {\n    this.node = node;\n  }\n  drawOnCanvas(ctx) {\n    const { rect } = this.state;\n    if (isDefined(rect)) {\n      const { x, y, height, width } = rect;\n      const { stroke, fill, strokeDashArray } = this.props;\n      const { strokeOpacity, fillOpacity } = this.props;\n\n      const dashArray = getStrokeDasharray(strokeDashArray)\n        .split(',')\n        .map(d => +d);\n\n      ctx.strokeStyle = hexToRGBA(stroke, strokeOpacity);\n      ctx.fillStyle = hexToRGBA(fill, fillOpacity);\n      ctx.setLineDash(dashArray);\n      ctx.beginPath();\n      ctx.fillRect(x, y, width, height);\n      ctx.strokeRect(x, y, width, height);\n    }\n  }\n  renderSVG() {\n    const { rect } = this.state;\n    if (isDefined(rect)) {\n      const { x, y, height, width } = rect;\n      const { stroke, strokeDashArray } = this.props;\n      const { strokeOpacity, fillOpacity } = this.props;\n\n      const dashArray = getStrokeDasharray(strokeDashArray)\n        .split(',')\n        .map(d => +d);\n\n      return (\n        <rect\n          strokeDasharray={dashArray}\n          stroke={stroke}\n          fill=\"none\"\n          strokeOpacity={strokeOpacity}\n          fillOpacity={fillOpacity}\n          x={x}\n          y={y}\n          width={width}\n          height={height}\n        />\n      );\n    }\n  }\n  handleZoomStart(moreProps) {\n    this.zoomHappening = false;\n    const {\n      mouseXY: [, mouseY],\n      currentItem,\n      chartConfig: { yScale },\n      xAccessor,\n      xScale,\n    } = moreProps;\n\n    const x1y1 = [xScale(xAccessor(currentItem)), mouseY];\n\n    this.setState({\n      selected: true,\n      x1y1,\n      start: {\n        item: currentItem,\n        xValue: xAccessor(currentItem),\n        yValue: yScale.invert(mouseY),\n      },\n    });\n  }\n  handleDrawSquare(moreProps) {\n    if (this.state.x1y1 == null) return;\n\n    this.zoomHappening = true;\n\n    const {\n      mouseXY: [, mouseY],\n      currentItem,\n      chartConfig: { yScale },\n      xAccessor,\n      xScale,\n    } = moreProps;\n\n    const [x2, y2] = [xScale(xAccessor(currentItem)), mouseY];\n\n    const {\n      x1y1: [x1, y1],\n    } = this.state;\n\n    const x = Math.min(x1, x2);\n    const y = Math.min(y1, y2);\n    const height = Math.abs(y2 - y1);\n    const width = Math.abs(x2 - x1);\n\n    this.setState({\n      selected: true,\n      end: {\n        item: currentItem,\n        xValue: xAccessor(currentItem),\n        yValue: yScale.invert(mouseY),\n      },\n      rect: {\n        x,\n        y,\n        height,\n        width,\n      },\n    });\n  }\n  handleZoomComplete(moreProps) {\n    if (this.zoomHappening) {\n      const { onBrush } = this.props;\n      const { start, end } = this.state;\n      onBrush({ start, end }, moreProps);\n    }\n    this.setState({\n      selected: false,\n      rect: null,\n    });\n  }\n  render() {\n    const { enabled } = this.props;\n    if (!enabled) return null;\n\n    return (\n      <GenericChartComponent\n        ref={this.saveNode}\n        disablePan={enabled}\n        svgDraw={this.renderSVG}\n        canvasToDraw={getMouseCanvas}\n        canvasDraw={this.drawOnCanvas}\n        onMouseDown={this.handleZoomStart}\n        onMouseMove={this.handleDrawSquare}\n        onClick={this.handleZoomComplete}\n        drawOn={['mousemove', 'pan', 'drag']}\n      />\n    );\n  }\n}\n\nBrush.propTypes = {\n  enabled: PropTypes.bool.isRequired,\n  onStart: PropTypes.func.isRequired,\n  onBrush: PropTypes.func.isRequired,\n\n  type: PropTypes.oneOf(['1D', '2D']),\n  stroke: PropTypes.string,\n  fill: PropTypes.string,\n  strokeOpacity: PropTypes.number,\n  fillOpacity: PropTypes.number,\n  interactiveState: PropTypes.object,\n  strokeDashArray: PropTypes.string,\n};\n\nBrush.defaultProps = {\n  type: '2D',\n  stroke: '#000000',\n  fillOpacity: 0.3,\n  strokeOpacity: 1,\n  fill: '#3h3h3h',\n  onBrush: noop,\n  onStart: noop,\n  strokeDashArray: 'ShortDash',\n};\n\nexport default Brush;\n"]}