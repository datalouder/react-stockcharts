{"version":3,"sources":["../../../../src/lib/series/StackedBarSeries.js"],"names":["React","Component","PropTypes","nest","d3Nest","merge","stack","d3Stack","GenericChartComponent","getAxisCanvas","identity","hexToRGBA","head","functor","plotDataLengthBarWidth","StackedBarSeries","props","renderSVG","bind","drawOnCanvas","ctx","moreProps","xAccessor","drawOnCanvasHelper","svgHelper","clip","propTypes","baseAt","oneOfType","number","func","isRequired","direction","oneOf","stroke","bool","width","opacity","fill","string","className","defaultProps","xScale","yScale","range","widthRatio","swapScales","identityStack","keys","data","response","map","key","i","arrays","array","d","index","x","arguments","length","stackFn","defaultPostAction","postRotateAction","rotateXY","chartConfig","plotData","bars","doStuff","drawOnCanvas2","convertToArray","item","Array","isArray","getBarsSVG2","yAccessor","modifiedYAccessor","modifiedXAccessor","modifiedXScale","modifiedYScale","postProcessor","getBars","each","y","height","idx","entries","forEach","outer","values","strokeStyle","fillStyle","fillRect","strokeRect","after","spaceBetweenBar","getClassName","getFill","getBase","widthFunctor","barWidth","Math","round","eachBarWidth","offset","ds","appearance","eachYAccessor","_","newData","h","groupOffset","groupWidth","filter","isNaN","bar"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,SAASC,QAAQC,MAAjB,QAA+B,eAA/B;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,SAASC,SAASC,OAAlB,QAAiC,UAAjC;;AAEA,OAAOC,qBAAP,MAAkC,0BAAlC;AACA,SAASC,aAAT,QAA8B,qBAA9B;;AAEA,SACEC,QADF,EAEEC,SAFF,EAGEC,IAHF,EAIEC,OAJF,EAKEC,sBALF,QAMO,UANP;;IAQMC,gB;;;AACJ,4BAAYC,KAAZ,EAAmB;AAAA;;AAAA,oIACXA,KADW;;AAEjB,UAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeC,IAAf,OAAjB;AACA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBD,IAAlB,OAApB;AAHiB;AAIlB;;;;iCACYE,G,EAAKC,S,EAAW;AAAA,UACnBC,SADmB,GACLD,SADK,CACnBC,SADmB;AAE3B;;AAEAC,yBAAmBH,GAAnB,EAAwB,KAAKJ,KAA7B,EAAoCK,SAApC,EAA+CC,SAA/C,EAA0Df,OAA1D;AACD;;;8BACSc,S,EAAW;AAAA,UACXC,SADW,GACGD,SADH,CACXC,SADW;;;AAGnB,aAAO;AAAA;AAAA;AAAIE,kBAAU,KAAKR,KAAf,EAAsBK,SAAtB,EAAiCC,SAAjC,EAA4Cf,OAA5C;AAAJ,OAAP;AACD;;;6BACQ;AAAA,UACCkB,IADD,GACU,KAAKT,KADf,CACCS,IADD;;;AAGP,aACE,oBAAC,qBAAD;AACE,cAAMA,IADR;AAEE,iBAAS,KAAKR,SAFhB;AAGE,oBAAY,KAAKE,YAHnB;AAIE,sBAAcV,aAJhB;AAKE,gBAAQ,CAAC,KAAD;AALV,QADF;AASD;;;;EA7B4BR,S;;AAgC/Bc,iBAAiBW,SAAjB,GAA6B;AAC3BC,UAAQzB,UAAU0B,SAAV,CAAoB,CAAC1B,UAAU2B,MAAX,EAAmB3B,UAAU4B,IAA7B,CAApB,EAAwDC,UADrC;AAE3BC,aAAW9B,UAAU+B,KAAV,CAAgB,CAAC,IAAD,EAAO,MAAP,CAAhB,EAAgCF,UAFhB;AAG3BG,UAAQhC,UAAUiC,IAAV,CAAeJ,UAHI;AAI3BK,SAAOlC,UAAU0B,SAAV,CAAoB,CAAC1B,UAAU2B,MAAX,EAAmB3B,UAAU4B,IAA7B,CAApB,EAAwDC,UAJpC;AAK3BM,WAASnC,UAAU2B,MAAV,CAAiBE,UALC;AAM3BO,QAAMpC,UAAU0B,SAAV,CAAoB,CAAC1B,UAAU4B,IAAX,EAAiB5B,UAAUqC,MAA3B,CAApB,EAAwDR,UANnC;AAO3BS,aAAWtC,UAAU0B,SAAV,CAAoB,CAAC1B,UAAU4B,IAAX,EAAiB5B,UAAUqC,MAA3B,CAApB,EAAwDR,UAPxC;AAQ3BN,QAAMvB,UAAUiC,IAAV,CAAeJ;AARM,CAA7B;;AAWAhB,iBAAiB0B,YAAjB,GAAgC;AAC9Bd,UAAQ,gBAACe,MAAD,EAASC,MAAT,CAAgB,QAAhB;AAAA,WAA6B/B,KAAK+B,OAAOC,KAAP,EAAL,CAA7B;AAAA,GADsB;AAE9BZ,aAAW,IAFmB;AAG9BQ,aAAW,KAHmB;AAI9BN,UAAQ,IAJsB;AAK9BI,QAAM,SALwB;AAM9BD,WAAS,GANqB;AAO9BD,SAAOtB,sBAPuB;AAQ9B+B,cAAY,GARkB;AAS9BpB,QAAM,IATwB;AAU9BqB,cAAY;AAVkB,CAAhC;;AAaA,OAAO,SAASC,aAAT,GAAyB;AAC9B,MAAIC,OAAO,EAAX;AACA,WAAS1C,KAAT,CAAe2C,IAAf,EAAqB;AACnB,QAAMC,WAAWF,KAAKG,GAAL,CAAS,UAACC,GAAD,EAAMC,CAAN,EAAY;AACpC;AACA,UAAIC,SAASL,KAAKE,GAAL,CAAS,aAAK;AACzB;AACA,YAAII,QAAQ,CAAC,CAAD,EAAIC,EAAEJ,GAAF,CAAJ,CAAZ;AACAG,cAAMN,IAAN,GAAaO,CAAb;AACA,eAAOD,KAAP;AACD,OALY,CAAb;AAMAD,aAAOF,GAAP,GAAaA,GAAb;AACAE,aAAOG,KAAP,GAAeJ,CAAf;AACA,aAAOC,MAAP;AACD,KAXgB,CAAjB;AAYA,WAAOJ,QAAP;AACD;AACD5C,QAAM0C,IAAN,GAAa,UAAUU,CAAV,EAAa;AACxB,QAAI,CAACC,UAAUC,MAAf,EAAuB;AACrB,aAAOZ,IAAP;AACD;AACDA,WAAOU,CAAP;AACA,WAAOpD,KAAP;AACD,GAND;AAOA,SAAOA,KAAP;AACD;;AAED,OAAO,SAASiB,kBAAT,CACLH,GADK,EAELJ,KAFK,EAGLK,SAHK,EAILC,SAJK,EAKLuC,OALK,EAQL;AAAA,MAFAC,iBAEA,uEAFoBpD,QAEpB;AAAA,MADAqD,gBACA,uEADmBC,QACnB;AAAA,MAEEtB,MAFF,GAKIrB,SALJ,CAEEqB,MAFF;AAAA,MAGiBC,MAHjB,GAKItB,SALJ,CAGE4C,WAHF,CAGiBtB,MAHjB;AAAA,MAIEuB,QAJF,GAKI7C,SALJ,CAIE6C,QAJF;;;AAOA,MAAMC,OAAOC,QACXpD,KADW,EAEXM,SAFW,EAGX4C,QAHW,EAIXxB,MAJW,EAKXC,MALW,EAMXkB,OANW,EAOXE,gBAPW,EAQXD,iBARW,CAAb;;AAWAO,gBAAcrD,KAAd,EAAqBI,GAArB,EAA0B+C,IAA1B;AACD;;AAED,SAASG,cAAT,CAAwBC,IAAxB,EAA8B;AAC5B,SAAOC,MAAMC,OAAN,CAAcF,IAAd,IAAsBA,IAAtB,GAA6B,CAACA,IAAD,CAApC;AACD;;AAED,OAAO,SAAS/C,SAAT,CACLR,KADK,EAELK,SAFK,EAGLC,SAHK,EAILuC,OAJK,EAOL;AAAA,MAFAC,iBAEA,uEAFoBpD,QAEpB;AAAA,MADAqD,gBACA,uEADmBC,QACnB;AAAA,MAEEtB,MAFF,GAKIrB,SALJ,CAEEqB,MAFF;AAAA,MAGiBC,MAHjB,GAKItB,SALJ,CAGE4C,WAHF,CAGiBtB,MAHjB;AAAA,MAIEuB,QAJF,GAKI7C,SALJ,CAIE6C,QAJF;;AAMA,MAAMC,OAAOC,QACXpD,KADW,EAEXM,SAFW,EAGX4C,QAHW,EAIXxB,MAJW,EAKXC,MALW,EAMXkB,OANW,EAOXE,gBAPW,EAQXD,iBARW,CAAb;AAUA,SAAOY,YAAY1D,KAAZ,EAAmBmD,IAAnB,CAAP;AACD;;AAED,SAASC,OAAT,CACEpD,KADF,EAEEM,SAFF,EAGE4C,QAHF,EAIExB,MAJF,EAKEC,MALF,EAMEkB,OANF,EAOEE,gBAPF,EAQED,iBARF,EASE;AAAA,MACQa,SADR,GACkC3D,KADlC,CACQ2D,SADR;AAAA,MACmB7B,UADnB,GACkC9B,KADlC,CACmB8B,UADnB;;;AAGA,MAAM8B,oBAAoB9B,aACtBwB,eAAetD,MAAMM,SAArB,CADsB,GAEtBgD,eAAeK,SAAf,CAFJ;AAGA,MAAME,oBAAoB/B,aAAa6B,SAAb,GAAyBrD,SAAnD;;AAEA,MAAMwD,iBAAiBhC,aAAaH,MAAb,GAAsBD,MAA7C;AACA,MAAMqC,iBAAiBjC,aAAaJ,MAAb,GAAsBC,MAA7C;;AAEA,MAAMqC,gBAAgBlC,aAAaiB,gBAAb,GAAgCD,iBAAtD;;AAEA,MAAMK,OAAOc,QACXjE,KADW,EAEX6D,iBAFW,EAGXD,iBAHW,EAIXE,cAJW,EAKXC,cALW,EAMXb,QANW,EAOXL,OAPW,EAQXmB,aARW,CAAb;;AAWA,SAAOb,IAAP;AACD;;AAED,OAAO,IAAMH,WAAW,SAAXA,QAAW;AAAA,SACtBT,MAAMJ,GAAN,CAAU,gBAAQ;AAChB,wBACK+B,IADL;AAEExB,SAAGwB,KAAKC,CAFV;AAGEA,SAAGD,KAAKxB,CAHV;AAIE0B,cAAQF,KAAK9C,KAJf;AAKEA,aAAO8C,KAAKE;AALd;AAOD,GARD,CADsB;AAAA,CAAjB;;AAWP,OAAO,SAASV,WAAT,CAAqB1D,KAArB,EAA4BmD,IAA5B,EAAkC;AACvC;AADuC,MAE/B9B,OAF+B,GAEnBrB,KAFmB,CAE/BqB,OAF+B;AAGvC;;AAEA,SAAO8B,KAAKhB,GAAL,CAAS,UAACK,CAAD,EAAI6B,GAAJ,EAAY;AAC1B,QAAI7B,EAAEpB,KAAF,IAAW,CAAf,EAAkB;AAChB,aACE;AACE,aAAKiD,GADP;AAEE,mBAAW7B,EAAEhB,SAFf;AAGE,gBAAQgB,EAAElB,IAHZ;AAIE,YAAIkB,EAAEE,CAJR;AAKE,YAAIF,EAAE2B,CALR;AAME,YAAI3B,EAAEE,CANR;AAOE,YAAIF,EAAE2B,CAAF,GAAM3B,EAAE4B;AAPd,QADF;AAWD;AACD,WACE;AACE,WAAKC,GADP;AAEE,iBAAW7B,EAAEhB,SAFf;AAGE,cAAQgB,EAAEtB,MAHZ;AAIE,YAAMsB,EAAElB,IAJV;AAKE,SAAGkB,EAAEE,CALP;AAME,SAAGF,EAAE2B,CANP;AAOE,aAAO3B,EAAEpB,KAPX;AAQE,mBAAaC,OARf;AASE,cAAQmB,EAAE4B;AATZ,MADF;AAaD,GA3BM,CAAP;AA4BD;;AAED,OAAO,SAASf,aAAT,CAAuBrD,KAAvB,EAA8BI,GAA9B,EAAmC+C,IAAnC,EAAyC;AAAA,MACtCjC,MADsC,GAC3BlB,KAD2B,CACtCkB,MADsC;;;AAG9C,MAAM/B,OAAOC,SACVgD,GADU,CACN;AAAA,WAAKI,EAAElB,IAAP;AAAA,GADM,EAEVgD,OAFU,CAEFnB,IAFE,CAAb;;AAIAhE,OAAKoF,OAAL,CAAa,iBAAS;AAAA,QACZnC,GADY,GACIoC,KADJ,CACZpC,GADY;AAAA,QACPqC,MADO,GACID,KADJ,CACPC,MADO;;AAEpB,QAAI7E,KAAK6E,MAAL,EAAarD,KAAb,GAAqB,CAAzB,EAA4B;AAC1BhB,UAAIsE,WAAJ,GAAkBtC,GAAlB;AACD;AACD,QAAMuC,YACJ/E,KAAK6E,MAAL,EAAarD,KAAb,IAAsB,CAAtB,GAA0BgB,GAA1B,GAAgCzC,UAAUyC,GAAV,EAAepC,MAAMqB,OAArB,CADlC;AAEAjB,QAAIuE,SAAJ,GAAgBA,SAAhB;;AAEAF,WAAOF,OAAP,CAAe,aAAK;AAClB,UAAI/B,EAAEpB,KAAF,IAAW,CAAf,EAAkB;AAChB;;;;;AAKA;;;;;;AAMAhB,YAAIwE,QAAJ,CAAapC,EAAEE,CAAF,GAAM,GAAnB,EAAwBF,EAAE2B,CAA1B,EAA6B,CAA7B,EAAgC3B,EAAE4B,MAAlC;AACD,OAbD,MAaO;AACL;;;;;;;AAOA;;;;;AAKAhE,YAAIwE,QAAJ,CAAapC,EAAEE,CAAf,EAAkBF,EAAE2B,CAApB,EAAuB3B,EAAEpB,KAAzB,EAAgCoB,EAAE4B,MAAlC;AACA,YAAIlD,MAAJ,EAAYd,IAAIyE,UAAJ,CAAerC,EAAEE,CAAjB,EAAoBF,EAAE2B,CAAtB,EAAyB3B,EAAEpB,KAA3B,EAAkCoB,EAAE4B,MAApC;AACb;AACF,KA9BD;AA+BD,GAxCD;AAyCD;;AAED,OAAO,SAASH,OAAT,CACLjE,KADK,EAELM,SAFK,EAGLqD,SAHK,EAILjC,MAJK,EAKLC,MALK,EAMLuB,QANK,EASL;AAAA,MAFA5D,KAEA,uEAFQyC,aAER;AAAA,MADA+C,KACA,uEADQpF,QACR;AAAA,MACQiB,MADR,GACiEX,KADjE,CACQW,MADR;AAAA,MACgBa,SADhB,GACiExB,KADjE,CACgBwB,SADhB;AAAA,MAC2BF,IAD3B,GACiEtB,KADjE,CAC2BsB,IAD3B;AAAA,MACiCJ,MADjC,GACiElB,KADjE,CACiCkB,MADjC;AAAA,8BACiElB,KADjE,CACyC+E,eADzC;AAAA,MACyCA,eADzC,yCAC2D,CAD3D;;;AAGA,MAAMC,eAAenF,QAAQ2B,SAAR,CAArB;AACA,MAAMyD,UAAUpF,QAAQyB,IAAR,CAAhB;AACA,MAAM4D,UAAUrF,QAAQc,MAAR,CAAhB;;AAEA,MAAMwE,eAAetF,QAAQG,MAAMoB,KAAd,CAArB;AACA,MAAMA,QAAQ+D,aAAanF,KAAb,EAAoB;AAChC0B,kBADgC;AAEhCpB,wBAFgC;AAGhC4C;AAHgC,GAApB,CAAd;;AAMA,MAAMkC,WAAWC,KAAKC,KAAL,CAAWlE,KAAX,CAAjB;;AAEA,MAAMmE,eACJ,CAACH,WAAWL,mBAAmBpB,UAAUf,MAAV,GAAmB,CAAtC,CAAZ,IAAwDe,UAAUf,MADpE;;AAGA,MAAM4C,SAASJ,aAAa,CAAb,GAAiB,CAAjB,GAAqB,MAAMhE,KAA1C;;AAEA,MAAMqE,KAAKvC,SAASf,GAAT,CAAa,gBAAQ;AAC9B;AACA,QAAIK,IAAI;AACNkD,kBAAY,EADN;AAENhD,SAAGpC,UAAU4D,IAAV;AAFG,KAAR;AAIAP,cAAUY,OAAV,CAAkB,UAACoB,aAAD,EAAgBtD,CAAhB,EAAsB;AACtC,UAAMD,YAAUC,CAAhB;AACAG,QAAEJ,GAAF,IAASuD,cAAczB,IAAd,CAAT;AACA,UAAMwB,aAAa;AACjBlE,mBAAWwD,aAAad,IAAb,EAAmB7B,CAAnB,CADM;AAEjBnB,gBAAQA,SAAS+D,QAAQf,IAAR,EAAc7B,CAAd,CAAT,GAA4B,MAFnB;AAGjBf,cAAM2D,QAAQf,IAAR,EAAc7B,CAAd;AAHW,OAAnB;AAKAG,QAAEkD,UAAF,CAAatD,GAAb,IAAoBsD,UAApB;AACD,KATD;AAUA,WAAOlD,CAAP;AACD,GAjBU,CAAX;;AAmBA,MAAMR,OAAO2B,UAAUxB,GAAV,CAAc,UAACyD,CAAD,EAAIvD,CAAJ;AAAA,iBAAcA,CAAd;AAAA,GAAd,CAAb;;AAEA;;AAEA,MAAMJ,OAAO3C,QAAQ0C,IAAR,CAAaA,IAAb,EAAmByD,EAAnB,CAAb;;AAEA;;AAEA,MAAMI,UAAU5D,KAAKE,GAAL,CAAS,UAAC+B,IAAD,EAAO7B,CAAP,EAAa;AACpC,QAAMD,MAAM8B,KAAK9B,GAAjB;AACA,WAAO8B,KAAK/B,GAAL,CAAS,aAAK;AACnB;AACA,UAAII,QAAQ,CAACC,EAAE,CAAF,CAAD,EAAOA,EAAE,CAAF,CAAP,CAAZ;AACAD,YAAMN,IAAN,GAAa;AACXS,WAAGF,EAAEP,IAAF,CAAOS,CADC;AAEXL,YAFW;AAGXqD,oBAAYlD,EAAEP,IAAF,CAAOyD,UAAP,CAAkBtD,GAAlB;AAHD,OAAb;AAKA,aAAOG,KAAP;AACD,KATM,CAAP;AAUD,GAZe,CAAhB;AAaA;AACA;;AAEA,MAAMY,OAAO9D,MAAMwG,OAAN;AACX;AADW,GAEV1D,GAFU,CAEN,aAAK;AACR;AACA,QAAIgC,IAAIxC,OAAOa,EAAE,CAAF,CAAP,CAAR;AACA;;;AAGA,QAAIsD,IAAIZ,QAAQxD,MAAR,EAAgBC,MAAhB,EAAwBa,EAAEP,IAA1B,IAAkCN,OAAOa,EAAE,CAAF,IAAOA,EAAE,CAAF,CAAd,CAA1C;AACA;AACA;AACA;AACA;AACA,QAAIsD,IAAI,CAAR,EAAW;AACT3B,UAAIA,IAAI2B,CAAR;AACAA,UAAI,CAACA,CAAL;AACD;AACD;AACA;;AAEA,wBACKtD,EAAEP,IAAF,CAAOyD,UADZ;AAEE;AACA;AACAhD,SAAG2C,KAAKC,KAAL,CAAW5D,OAAOc,EAAEP,IAAF,CAAOS,CAAd,IAAmBtB,QAAQ,CAAtC,CAJL;AAKE+C,SAAGA,CALL;AAME4B,mBAAaV,KAAKC,KAAL,CACXE,UACGhD,EAAEP,IAAF,CAAOI,CAAP,GAAW,CAAX,GAAe,CAACkD,eAAeR,eAAhB,IAAmCvC,EAAEP,IAAF,CAAOI,CAAzD,GAA6D,CADhE,CADW,CANf;AAUE2D,kBAAYX,KAAKC,KAAL,CAAWC,YAAX,CAVd;AAWEC,cAAQH,KAAKC,KAAL,CAAWE,MAAX,CAXV;AAYEpB,cAAQ0B,CAZV;AAaE1E,aAAOgE;AAbT;AAeD,GAnCU,EAoCVa,MApCU,CAoCH;AAAA,WAAO,CAACC,MAAMC,IAAIhC,CAAV,CAAR;AAAA,GApCG,CAAb;;AAsCA,SAAOW,MAAM3B,IAAN,CAAP;AACD;;AAED,eAAepD,gBAAf","file":"StackedBarSeries.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { nest as d3Nest } from 'd3-collection';\nimport { merge } from 'd3-array';\nimport { stack as d3Stack } from 'd3-shape';\n\nimport GenericChartComponent from '../GenericChartComponent';\nimport { getAxisCanvas } from '../GenericComponent';\n\nimport {\n  identity,\n  hexToRGBA,\n  head,\n  functor,\n  plotDataLengthBarWidth,\n} from '../utils';\n\nclass StackedBarSeries extends Component {\n  constructor(props) {\n    super(props);\n    this.renderSVG = this.renderSVG.bind(this);\n    this.drawOnCanvas = this.drawOnCanvas.bind(this);\n  }\n  drawOnCanvas(ctx, moreProps) {\n    const { xAccessor } = moreProps;\n    // var { xScale, chartConfig: { yScale }, plotData } = moreProps;\n\n    drawOnCanvasHelper(ctx, this.props, moreProps, xAccessor, d3Stack);\n  }\n  renderSVG(moreProps) {\n    const { xAccessor } = moreProps;\n\n    return <g>{svgHelper(this.props, moreProps, xAccessor, d3Stack)}</g>;\n  }\n  render() {\n    const { clip } = this.props;\n\n    return (\n      <GenericChartComponent\n        clip={clip}\n        svgDraw={this.renderSVG}\n        canvasDraw={this.drawOnCanvas}\n        canvasToDraw={getAxisCanvas}\n        drawOn={['pan']}\n      />\n    );\n  }\n}\n\nStackedBarSeries.propTypes = {\n  baseAt: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,\n  direction: PropTypes.oneOf(['up', 'down']).isRequired,\n  stroke: PropTypes.bool.isRequired,\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,\n  opacity: PropTypes.number.isRequired,\n  fill: PropTypes.oneOfType([PropTypes.func, PropTypes.string]).isRequired,\n  className: PropTypes.oneOfType([PropTypes.func, PropTypes.string]).isRequired,\n  clip: PropTypes.bool.isRequired,\n};\n\nStackedBarSeries.defaultProps = {\n  baseAt: (xScale, yScale /* , d*/) => head(yScale.range()),\n  direction: 'up',\n  className: 'bar',\n  stroke: true,\n  fill: '#4682B4',\n  opacity: 0.5,\n  width: plotDataLengthBarWidth,\n  widthRatio: 0.8,\n  clip: true,\n  swapScales: false,\n};\n\nexport function identityStack() {\n  let keys = [];\n  function stack(data) {\n    const response = keys.map((key, i) => {\n      // eslint-disable-next-line prefer-const\n      let arrays = data.map(d => {\n        // eslint-disable-next-line prefer-const\n        let array = [0, d[key]];\n        array.data = d;\n        return array;\n      });\n      arrays.key = key;\n      arrays.index = i;\n      return arrays;\n    });\n    return response;\n  }\n  stack.keys = function (x) {\n    if (!arguments.length) {\n      return keys;\n    }\n    keys = x;\n    return stack;\n  };\n  return stack;\n}\n\nexport function drawOnCanvasHelper(\n  ctx,\n  props,\n  moreProps,\n  xAccessor,\n  stackFn,\n  defaultPostAction = identity,\n  postRotateAction = rotateXY\n) {\n  const {\n    xScale,\n    chartConfig: { yScale },\n    plotData,\n  } = moreProps;\n\n  const bars = doStuff(\n    props,\n    xAccessor,\n    plotData,\n    xScale,\n    yScale,\n    stackFn,\n    postRotateAction,\n    defaultPostAction\n  );\n\n  drawOnCanvas2(props, ctx, bars);\n}\n\nfunction convertToArray(item) {\n  return Array.isArray(item) ? item : [item];\n}\n\nexport function svgHelper(\n  props,\n  moreProps,\n  xAccessor,\n  stackFn,\n  defaultPostAction = identity,\n  postRotateAction = rotateXY\n) {\n  const {\n    xScale,\n    chartConfig: { yScale },\n    plotData,\n  } = moreProps;\n  const bars = doStuff(\n    props,\n    xAccessor,\n    plotData,\n    xScale,\n    yScale,\n    stackFn,\n    postRotateAction,\n    defaultPostAction\n  );\n  return getBarsSVG2(props, bars);\n}\n\nfunction doStuff(\n  props,\n  xAccessor,\n  plotData,\n  xScale,\n  yScale,\n  stackFn,\n  postRotateAction,\n  defaultPostAction\n) {\n  const { yAccessor, swapScales } = props;\n\n  const modifiedYAccessor = swapScales\n    ? convertToArray(props.xAccessor)\n    : convertToArray(yAccessor);\n  const modifiedXAccessor = swapScales ? yAccessor : xAccessor;\n\n  const modifiedXScale = swapScales ? yScale : xScale;\n  const modifiedYScale = swapScales ? xScale : yScale;\n\n  const postProcessor = swapScales ? postRotateAction : defaultPostAction;\n\n  const bars = getBars(\n    props,\n    modifiedXAccessor,\n    modifiedYAccessor,\n    modifiedXScale,\n    modifiedYScale,\n    plotData,\n    stackFn,\n    postProcessor\n  );\n\n  return bars;\n}\n\nexport const rotateXY = array =>\n  array.map(each => {\n    return {\n      ...each,\n      x: each.y,\n      y: each.x,\n      height: each.width,\n      width: each.height,\n    };\n  });\n\nexport function getBarsSVG2(props, bars) {\n  /* eslint-disable react/prop-types */\n  const { opacity } = props;\n  /* eslint-enable react/prop-types */\n\n  return bars.map((d, idx) => {\n    if (d.width <= 1) {\n      return (\n        <line\n          key={idx}\n          className={d.className}\n          stroke={d.fill}\n          x1={d.x}\n          y1={d.y}\n          x2={d.x}\n          y2={d.y + d.height}\n        />\n      );\n    }\n    return (\n      <rect\n        key={idx}\n        className={d.className}\n        stroke={d.stroke}\n        fill={d.fill}\n        x={d.x}\n        y={d.y}\n        width={d.width}\n        fillOpacity={opacity}\n        height={d.height}\n      />\n    );\n  });\n}\n\nexport function drawOnCanvas2(props, ctx, bars) {\n  const { stroke } = props;\n\n  const nest = d3Nest()\n    .key(d => d.fill)\n    .entries(bars);\n\n  nest.forEach(outer => {\n    const { key, values } = outer;\n    if (head(values).width > 1) {\n      ctx.strokeStyle = key;\n    }\n    const fillStyle =\n      head(values).width <= 1 ? key : hexToRGBA(key, props.opacity);\n    ctx.fillStyle = fillStyle;\n\n    values.forEach(d => {\n      if (d.width <= 1) {\n        /* <line key={idx} className={d.className}\n\t\t\t\t\t\t\tstroke={stroke}\n\t\t\t\t\t\t\tfill={fill}\n\t\t\t\t\t\t\tx1={d.x} y1={d.y}\n\t\t\t\t\t\t\tx2={d.x} y2={d.y + d.height} />*/\n        /*\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(d.x, d.y);\n\t\t\t\tctx.lineTo(d.x, d.y + d.height);\n\t\t\t\tctx.stroke();\n\t\t\t\t*/\n        ctx.fillRect(d.x - 0.5, d.y, 1, d.height);\n      } else {\n        /* <rect key={idx} className={d.className}\n\t\t\t\t\t\tstroke={stroke}\n\t\t\t\t\t\tfill={fill}\n\t\t\t\t\t\tx={d.x}\n\t\t\t\t\t\ty={d.y}\n\t\t\t\t\t\twidth={d.width}\n\t\t\t\t\t\theight={d.height} /> */\n        /*\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.rect(d.x, d.y, d.width, d.height);\n\t\t\t\tctx.fill();\n\t\t\t\t*/\n        ctx.fillRect(d.x, d.y, d.width, d.height);\n        if (stroke) ctx.strokeRect(d.x, d.y, d.width, d.height);\n      }\n    });\n  });\n}\n\nexport function getBars(\n  props,\n  xAccessor,\n  yAccessor,\n  xScale,\n  yScale,\n  plotData,\n  stack = identityStack,\n  after = identity\n) {\n  const { baseAt, className, fill, stroke, spaceBetweenBar = 0 } = props;\n\n  const getClassName = functor(className);\n  const getFill = functor(fill);\n  const getBase = functor(baseAt);\n\n  const widthFunctor = functor(props.width);\n  const width = widthFunctor(props, {\n    xScale,\n    xAccessor,\n    plotData,\n  });\n\n  const barWidth = Math.round(width);\n\n  const eachBarWidth =\n    (barWidth - spaceBetweenBar * (yAccessor.length - 1)) / yAccessor.length;\n\n  const offset = barWidth === 1 ? 0 : 0.5 * width;\n\n  const ds = plotData.map(each => {\n    // eslint-disable-next-line prefer-const\n    let d = {\n      appearance: {},\n      x: xAccessor(each),\n    };\n    yAccessor.forEach((eachYAccessor, i) => {\n      const key = `y${i}`;\n      d[key] = eachYAccessor(each);\n      const appearance = {\n        className: getClassName(each, i),\n        stroke: stroke ? getFill(each, i) : 'none',\n        fill: getFill(each, i),\n      };\n      d.appearance[key] = appearance;\n    });\n    return d;\n  });\n\n  const keys = yAccessor.map((_, i) => `y${i}`);\n\n  // console.log(ds);\n\n  const data = stack().keys(keys)(ds);\n\n  // console.log(data);\n\n  const newData = data.map((each, i) => {\n    const key = each.key;\n    return each.map(d => {\n      // eslint-disable-next-line prefer-const\n      let array = [d[0], d[1]];\n      array.data = {\n        x: d.data.x,\n        i,\n        appearance: d.data.appearance[key],\n      };\n      return array;\n    });\n  });\n  // console.log(newData);\n  // console.log(merge(newData));\n\n  const bars = merge(newData)\n    // .filter(d => isDefined(d.y))\n    .map(d => {\n      // let baseValue = yScale.invert(getBase(xScale, yScale, d.datum));\n      let y = yScale(d[1]);\n      /* let h = isDefined(d.y0) && d.y0 !== 0 && !isNaN(d.y0)\n\t\t\t\t\t? yScale(d.y0) - y\n\t\t\t\t\t: getBase(xScale, yScale, d.datum) - yScale(d.y)*/\n      let h = getBase(xScale, yScale, d.data) - yScale(d[1] - d[0]);\n      // console.log(d.y, yScale.domain(), yScale.range())\n      // let h = ;\n      // if (d.y < 0) h = -h;\n      // console.log(d, y, h)\n      if (h < 0) {\n        y = y + h;\n        h = -h;\n      }\n      // console.log(d.data.i, Math.round(offset - (d.data.i > 0 ? (eachBarWidth + spaceBetweenBar) * d.data.i : 0)))\n      /* console.log(d.series, d.datum.date, d.x,\n\t\t\t\t\tgetBase(xScale, yScale, d.datum), `d.y=${d.y}, d.y0=${d.y0}, y=${y}, h=${h}`)*/\n      return {\n        ...d.data.appearance,\n        // series: d.series,\n        // i: d.x,\n        x: Math.round(xScale(d.data.x) - width / 2),\n        y: y,\n        groupOffset: Math.round(\n          offset -\n            (d.data.i > 0 ? (eachBarWidth + spaceBetweenBar) * d.data.i : 0)\n        ),\n        groupWidth: Math.round(eachBarWidth),\n        offset: Math.round(offset),\n        height: h,\n        width: barWidth,\n      };\n    })\n    .filter(bar => !isNaN(bar.y));\n\n  return after(bars);\n}\n\nexport default StackedBarSeries;\n"]}