{"version":3,"sources":["../../../../src/lib/series/PointAndFigureSeries.js"],"names":["React","Component","PropTypes","GenericChartComponent","getAxisCanvas","isDefined","isNotDefined","PointAndFigureSeries","props","renderSVG","bind","drawOnCanvas","ctx","moreProps","xAccessor","xScale","yScale","chartConfig","plotData","columns","getColumns","clip","stroke","fill","strokeWidth","className","map","col","idx","offset","boxes","box","i","direction","up","open","columnWidth","close","down","boxHeight","propTypes","string","number","isRequired","object","bool","defaultProps","lineWidth","forEach","offsetX","offsetY","fillStyle","strokeStyle","beginPath","moveTo","lineTo","x","y","rx","ry","ellipse","Math","PI","width","length","anyBox","j","abs","filter","d","xOffset"],"mappings":"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","file":"PointAndFigureSeries.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport GenericChartComponent from '../GenericChartComponent';\nimport { getAxisCanvas } from '../GenericComponent';\n\nimport { isDefined, isNotDefined } from '../utils';\n\nclass PointAndFigureSeries extends Component {\n  constructor(props) {\n    super(props);\n    this.renderSVG = this.renderSVG.bind(this);\n    this.drawOnCanvas = this.drawOnCanvas.bind(this);\n  }\n  drawOnCanvas(ctx, moreProps) {\n    const { xAccessor } = moreProps;\n    const {\n      xScale,\n      chartConfig: { yScale },\n      plotData,\n    } = moreProps;\n    const columns = getColumns(xScale, xAccessor, yScale, plotData);\n\n    drawOnCanvas(ctx, this.props, columns);\n  }\n  render() {\n    const { clip } = this.props;\n\n    return (\n      <GenericChartComponent\n        clip={clip}\n        svgDraw={this.renderSVG}\n        canvasDraw={this.drawOnCanvas}\n        canvasToDraw={getAxisCanvas}\n        drawOn={['pan']}\n      />\n    );\n  }\n  renderSVG(moreProps) {\n    const { xAccessor } = moreProps;\n    const {\n      xScale,\n      chartConfig: { yScale },\n      plotData,\n    } = moreProps;\n\n    const { stroke, fill, strokeWidth, className } = this.props;\n\n    const columns = getColumns(xScale, xAccessor, yScale, plotData);\n\n    return (\n      <g className={className}>\n        {columns.map((col, idx) => (\n          <g\n            key={idx}\n            className={col.className}\n            transform={`translate(${col.offset[0]}, ${col.offset[1]})`}\n          >\n            {col.boxes.map((box, i) => {\n              if (col.direction > 0) {\n                return (\n                  <g key={`${idx}-${i}`}>\n                    <line\n                      className=\"up\"\n                      strokeWidth={strokeWidth}\n                      stroke={stroke.up}\n                      fill={fill.up}\n                      x1={0}\n                      y1={box.open}\n                      x2={box.columnWidth}\n                      y2={box.close}\n                    />\n                    <line\n                      className=\"up\"\n                      strokeWidth={strokeWidth}\n                      stroke={stroke.up}\n                      fill={fill.up}\n                      x1={0}\n                      y1={box.close}\n                      x2={box.columnWidth}\n                      y2={box.open}\n                    />\n                  </g>\n                );\n              }\n              return (\n                <ellipse\n                  key={`${idx}-${i}`}\n                  className=\"down\"\n                  strokeWidth={strokeWidth}\n                  stroke={stroke.down}\n                  fill={fill.down}\n                  cx={box.columnWidth / 2}\n                  cy={(box.open + box.close) / 2}\n                  rx={box.columnWidth / 2}\n                  ry={box.boxHeight / 2}\n                />\n              );\n            })}\n          </g>\n        ))}\n      </g>\n    );\n  }\n}\n\nPointAndFigureSeries.propTypes = {\n  className: PropTypes.string,\n  strokeWidth: PropTypes.number.isRequired,\n  stroke: PropTypes.object.isRequired,\n  fill: PropTypes.object.isRequired,\n  clip: PropTypes.bool.isRequired,\n};\n\nPointAndFigureSeries.defaultProps = {\n  className: 'react-stockcharts-point-and-figure',\n  strokeWidth: 1,\n  stroke: {\n    up: '#6BA583',\n    down: '#FF0000',\n  },\n  fill: {\n    up: 'none',\n    down: 'none',\n  },\n  clip: true,\n};\n\nfunction drawOnCanvas(ctx, props, columns) {\n  const { stroke, fill, strokeWidth } = props;\n\n  ctx.lineWidth = strokeWidth;\n\n  columns.forEach(col => {\n    const [offsetX, offsetY] = col.offset;\n    col.boxes.forEach(box => {\n      if (col.direction > 0) {\n        ctx.fillStyle = fill.up;\n        ctx.strokeStyle = stroke.up;\n\n        ctx.beginPath();\n\n        ctx.moveTo(offsetX, offsetY + box.open);\n        ctx.lineTo(offsetX + box.columnWidth, offsetY + box.close);\n        ctx.moveTo(offsetX, offsetY + box.close);\n        ctx.lineTo(offsetX + box.columnWidth, offsetY + box.open);\n\n        ctx.stroke();\n      } else {\n        ctx.fillStyle = fill.down;\n        ctx.strokeStyle = stroke.down;\n\n        ctx.beginPath();\n\n        const [x, y] = [\n          offsetX + box.columnWidth / 2,\n          offsetY + box.open + box.boxHeight / 2,\n        ];\n        const [rx, ry] = [box.columnWidth / 2, box.boxHeight / 2];\n\n        ctx.ellipse(x, y, rx, ry, 0, 0, 2 * Math.PI);\n        ctx.stroke();\n      }\n    });\n  });\n\n  ctx.stroke();\n}\n\nfunction getColumns(xScale, xAccessor, yScale, plotData) {\n  const width =\n    xScale(xAccessor(plotData[plotData.length - 1])) -\n    xScale(xAccessor(plotData[0]));\n\n  const columnWidth = width / (plotData.length - 1);\n\n  let anyBox,\n    j = 0;\n  while (isNotDefined(anyBox)) {\n    if (isDefined(plotData[j].close)) {\n      anyBox = plotData[j].boxes[0];\n    } else {\n      break;\n    }\n    j++;\n  }\n\n  const boxHeight = Math.abs(yScale(anyBox.open) - yScale(anyBox.close));\n\n  const columns = plotData\n    .filter(d => isDefined(d.close))\n    .map(d => {\n      const boxes = d.boxes.map(box => ({\n        columnWidth: columnWidth,\n        boxHeight: boxHeight,\n        open: yScale(box.open),\n        close: yScale(box.close),\n      }));\n\n      const xOffset = xScale(xAccessor(d)) - columnWidth / 2;\n      return {\n        boxes: boxes,\n        direction: d.direction,\n        offset: [xOffset, 0],\n      };\n    });\n  return columns;\n}\n\nexport default PointAndFigureSeries;\n"]}