{"version":3,"sources":["../../../../src/lib/series/RSISeries.js"],"names":["React","Component","PropTypes","LineSeries","StraightLine","SVGComponent","strokeDashTypes","RSISeries","props","renderClip","bind","topAndBottomClip","mainClip","id1","String","Math","round","random","clipPathId1","id2","clipPathId2","ctx","moreProps","chartConfig","overSold","overBought","yScale","width","beginPath","rect","clip","height","className","stroke","opacity","strokeDasharray","strokeWidth","yAccessor","middle","style1","clipPath","style2","top","bottom","insideThreshold","line","outsideThreshold","propTypes","string","func","isRequired","shape","number","oneOf","defaultProps"],"mappings":"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","file":"RSISeries.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport LineSeries from './LineSeries';\n// import AreaSeries from \"./AreaSeries\";\nimport StraightLine from './StraightLine';\nimport SVGComponent from './SVGComponent';\nimport { strokeDashTypes } from '../utils';\n\nclass RSISeries extends Component {\n  constructor(props) {\n    super(props);\n    this.renderClip = this.renderClip.bind(this);\n    this.topAndBottomClip = this.topAndBottomClip.bind(this);\n    this.mainClip = this.mainClip.bind(this);\n\n    const id1 = String(Math.round(Math.random() * 10000 * 10000));\n    this.clipPathId1 = `rsi-clip-${id1}`;\n\n    const id2 = String(Math.round(Math.random() * 10000 * 10000));\n    this.clipPathId2 = `rsi-clip-${id2}`;\n  }\n  topAndBottomClip(ctx, moreProps) {\n    const { chartConfig } = moreProps;\n    const { overSold, overBought } = this.props;\n    const { yScale, width } = chartConfig;\n\n    ctx.beginPath();\n    ctx.rect(0, yScale(overSold), width, yScale(overBought) - yScale(overSold));\n    ctx.clip();\n  }\n  mainClip(ctx, moreProps) {\n    const { chartConfig } = moreProps;\n    const { overSold, overBought } = this.props;\n    const { yScale, width, height } = chartConfig;\n\n    ctx.beginPath();\n    ctx.rect(0, 0, width, yScale(overSold));\n    ctx.rect(0, yScale(overBought), width, height - yScale(overBought));\n    ctx.clip();\n  }\n  renderClip(moreProps) {\n    const { chartConfig } = moreProps;\n    const { overSold, overBought } = this.props;\n    const { yScale, width, height } = chartConfig;\n\n    return (\n      <defs>\n        <clipPath id={this.clipPathId1}>\n          <rect\n            x={0}\n            y={yScale(overSold)}\n            width={width}\n            height={yScale(overBought) - yScale(overSold)}\n          />\n        </clipPath>\n        <clipPath id={this.clipPathId2}>\n          <rect x={0} y={0} width={width} height={yScale(overSold)} />\n          <rect\n            x={0}\n            y={yScale(overBought)}\n            width={width}\n            height={height - yScale(overBought)}\n          />\n        </clipPath>\n      </defs>\n    );\n  }\n  render() {\n    const { className, stroke, opacity, strokeDasharray, strokeWidth } =\n      this.props;\n    const { yAccessor } = this.props;\n    const { overSold, middle, overBought } = this.props;\n\n    const style1 = { clipPath: `url(#${this.clipPathId1})` };\n    const style2 = { clipPath: `url(#${this.clipPathId2})` };\n\n    return (\n      <g className={className}>\n        <SVGComponent>{this.renderClip}</SVGComponent>\n        <StraightLine\n          stroke={stroke.top}\n          opacity={opacity.top}\n          yValue={overSold}\n          strokeDasharray={strokeDasharray.top}\n          strokeWidth={strokeWidth.top}\n        />\n        <StraightLine\n          stroke={stroke.middle}\n          opacity={opacity.middle}\n          yValue={middle}\n          strokeDasharray={strokeDasharray.middle}\n          strokeWidth={strokeWidth.middle}\n        />\n        <StraightLine\n          stroke={stroke.bottom}\n          opacity={opacity.bottom}\n          yValue={overBought}\n          strokeDasharray={strokeDasharray.bottom}\n          strokeWidth={strokeWidth.bottom}\n        />\n        <LineSeries\n          style={style1}\n          canvasClip={this.topAndBottomClip}\n          className={className}\n          yAccessor={yAccessor}\n          stroke={stroke.insideThreshold || stroke.line}\n          strokeWidth={strokeWidth.insideThreshold}\n          strokeDasharray={strokeDasharray.line}\n        />\n        <LineSeries\n          style={style2}\n          canvasClip={this.mainClip}\n          /* baseAt={yScale => yScale(middle)} */\n          className={className}\n          yAccessor={yAccessor}\n          stroke={stroke.outsideThreshold || stroke.line}\n          strokeWidth={strokeWidth.outsideThreshold}\n          strokeDasharray={strokeDasharray.line}\n          /* fill={stroke.outsideThreshold || stroke.line} */\n        />\n      </g>\n    );\n  }\n}\n\nRSISeries.propTypes = {\n  className: PropTypes.string,\n  yAccessor: PropTypes.func.isRequired,\n  stroke: PropTypes.shape({\n    top: PropTypes.string.isRequired,\n    middle: PropTypes.string.isRequired,\n    bottom: PropTypes.string.isRequired,\n    outsideThreshold: PropTypes.string.isRequired,\n    insideThreshold: PropTypes.string.isRequired,\n  }).isRequired,\n  opacity: PropTypes.shape({\n    top: PropTypes.number.isRequired,\n    middle: PropTypes.number.isRequired,\n    bottom: PropTypes.number.isRequired,\n  }).isRequired,\n  strokeDasharray: PropTypes.shape({\n    line: PropTypes.oneOf(strokeDashTypes),\n    top: PropTypes.oneOf(strokeDashTypes),\n    middle: PropTypes.oneOf(strokeDashTypes),\n    bottom: PropTypes.oneOf(strokeDashTypes),\n  }).isRequired,\n  strokeWidth: PropTypes.shape({\n    outsideThreshold: PropTypes.number.isRequired,\n    insideThreshold: PropTypes.number.isRequired,\n    top: PropTypes.number.isRequired,\n    middle: PropTypes.number.isRequired,\n    bottom: PropTypes.number.isRequired,\n  }).isRequired,\n  overSold: PropTypes.number.isRequired,\n  middle: PropTypes.number.isRequired,\n  overBought: PropTypes.number.isRequired,\n};\n\nRSISeries.defaultProps = {\n  className: 'react-stockcharts-rsi-series',\n  stroke: {\n    line: '#000000',\n    top: '#B8C2CC',\n    middle: '#8795A1',\n    bottom: '#B8C2CC',\n    outsideThreshold: '#b300b3',\n    insideThreshold: '#ffccff',\n  },\n  opacity: {\n    top: 1,\n    middle: 1,\n    bottom: 1,\n  },\n  strokeDasharray: {\n    line: 'Solid',\n    top: 'ShortDash',\n    middle: 'ShortDash',\n    bottom: 'ShortDash',\n  },\n  strokeWidth: {\n    outsideThreshold: 1,\n    insideThreshold: 1,\n    top: 1,\n    middle: 1,\n    bottom: 1,\n  },\n  overSold: 70,\n  middle: 50,\n  overBought: 30,\n};\n\nexport default RSISeries;\n"]}