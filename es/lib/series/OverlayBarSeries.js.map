{"version":3,"sources":["../../../../src/lib/series/OverlayBarSeries.js"],"names":["merge","React","Component","PropTypes","GenericChartComponent","getAxisCanvas","drawOnCanvas2","getBarsSVG2","isDefined","isNotDefined","first","functor","plotDataLengthBarWidth","OverlayBarSeries","props","renderSVG","bind","drawOnCanvas","ctx","moreProps","yAccessor","bars","getBars","clip","propTypes","baseAt","oneOfType","number","func","isRequired","direction","oneOf","stroke","bool","widthRatio","opacity","fill","string","className","xAccessor","arrayOf","xScale","yScale","plotData","array","defaultProps","range","width","chartConfig","getClassName","getFill","getBase","widthFunctor","offset","Math","floor","map","innerBars","eachYAccessor","i","yValue","d","undefined","xValue","x","round","y","filter","b","h","length","height"],"mappings":"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","file":"OverlayBarSeries.js","sourcesContent":["import { merge } from 'd3-array';\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport GenericChartComponent from '../GenericChartComponent';\nimport { getAxisCanvas } from '../GenericComponent';\n\nimport { drawOnCanvas2, getBarsSVG2 } from './StackedBarSeries';\nimport {\n  isDefined,\n  isNotDefined,\n  first,\n  functor,\n  plotDataLengthBarWidth,\n} from '../utils';\n\nclass OverlayBarSeries extends Component {\n  constructor(props) {\n    super(props);\n    this.renderSVG = this.renderSVG.bind(this);\n    this.drawOnCanvas = this.drawOnCanvas.bind(this);\n  }\n  drawOnCanvas(ctx, moreProps) {\n    const { yAccessor } = this.props;\n    const bars = getBars(this.props, moreProps, yAccessor);\n\n    drawOnCanvas2(this.props, ctx, bars);\n  }\n  renderSVG(moreProps) {\n    const { yAccessor } = this.props;\n\n    const bars = getBars(this.props, moreProps, yAccessor);\n    return (\n      <g className=\"react-stockcharts-bar-series\">\n        {getBarsSVG2(this.props, bars)}\n      </g>\n    );\n  }\n  render() {\n    const { clip } = this.props;\n\n    return (\n      <GenericChartComponent\n        svgDraw={this.renderSVG}\n        canvasToDraw={getAxisCanvas}\n        canvasDraw={this.drawOnCanvas}\n        clip={clip}\n        drawOn={['pan']}\n      />\n    );\n  }\n}\n\nOverlayBarSeries.propTypes = {\n  baseAt: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,\n  direction: PropTypes.oneOf(['up', 'down']).isRequired,\n  stroke: PropTypes.bool.isRequired,\n  widthRatio: PropTypes.number.isRequired,\n  opacity: PropTypes.number.isRequired,\n  fill: PropTypes.oneOfType([PropTypes.func, PropTypes.string]).isRequired,\n  className: PropTypes.oneOfType([PropTypes.func, PropTypes.string]).isRequired,\n  xAccessor: PropTypes.func,\n  yAccessor: PropTypes.arrayOf(PropTypes.func),\n  xScale: PropTypes.func,\n  yScale: PropTypes.func,\n  plotData: PropTypes.array,\n  clip: PropTypes.bool.isRequired,\n};\n\nOverlayBarSeries.defaultProps = {\n  baseAt: (xScale, yScale /* , d*/) => first(yScale.range()),\n  direction: 'up',\n  className: 'bar',\n  stroke: false,\n  fill: '#4682B4',\n  opacity: 1,\n  widthRatio: 0.5,\n  width: plotDataLengthBarWidth,\n  clip: true,\n};\n\nfunction getBars(props, moreProps, yAccessor) {\n  const {\n    xScale,\n    xAccessor,\n    chartConfig: { yScale },\n    plotData,\n  } = moreProps;\n  const { baseAt, className, fill, stroke } = props;\n\n  const getClassName = functor(className);\n  const getFill = functor(fill);\n  const getBase = functor(baseAt);\n  const widthFunctor = functor(props.width);\n\n  const width = widthFunctor(props, moreProps);\n  const offset = Math.floor(0.5 * width);\n\n  // console.log(xScale.domain(), yScale.domain());\n\n  const bars = plotData.map(d => {\n    // eslint-disable-next-line prefer-const\n    let innerBars = yAccessor\n      .map((eachYAccessor, i) => {\n        const yValue = eachYAccessor(d);\n        if (isNotDefined(yValue)) return undefined;\n\n        const xValue = xAccessor(d);\n        const x = Math.round(xScale(xValue)) - offset;\n        const y = yScale(yValue);\n        // console.log(yValue, y, xValue, x)\n        return {\n          width: offset * 2,\n          x: x,\n          y: y,\n          className: getClassName(d, i),\n          stroke: stroke ? getFill(d, i) : 'none',\n          fill: getFill(d, i),\n          i,\n        };\n      })\n      .filter(yValue => isDefined(yValue));\n\n    let b = getBase(xScale, yScale, d);\n    let h;\n    for (let i = innerBars.length - 1; i >= 0; i--) {\n      h = b - innerBars[i].y;\n      if (h < 0) {\n        innerBars[i].y = b;\n        h = -1 * h;\n      }\n      innerBars[i].height = h;\n      b = innerBars[i].y;\n    }\n    return innerBars;\n  });\n\n  return merge(bars);\n}\n\nexport default OverlayBarSeries;\n"]}