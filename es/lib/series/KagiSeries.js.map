{"version":3,"sources":["../../../../src/lib/series/KagiSeries.js"],"names":["React","Component","PropTypes","line","curveStepBefore","GenericChartComponent","getAxisCanvas","isDefined","isNotDefined","KagiSeries","props","renderSVG","bind","drawOnCanvas","ctx","moreProps","xAccessor","xScale","yScale","chartConfig","plotData","className","stroke","fill","strokeWidth","paths","helper","map","each","i","dataSeries","x","item","y","curve","plot","type","propTypes","string","object","number","isRequired","defaultProps","yang","yin","currentValueStroke","begin","forEach","strokeStyle","lineWidth","beginPath","prevX","d","moveTo","lineTo","lastPlot","length","last","y1","y2","kagiLine","kagi","idx","close","startAs","push","open","changeTo","changePoint","added","current","reverseAt"],"mappings":"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","file":"KagiSeries.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { line, curveStepBefore } from 'd3-shape';\n\nimport GenericChartComponent from '../GenericChartComponent';\nimport { getAxisCanvas } from '../GenericComponent';\nimport { isDefined, isNotDefined } from '../utils';\n\nclass KagiSeries extends Component {\n  constructor(props) {\n    super(props);\n    this.renderSVG = this.renderSVG.bind(this);\n    this.drawOnCanvas = this.drawOnCanvas.bind(this);\n  }\n  drawOnCanvas(ctx, moreProps) {\n    const { xAccessor } = moreProps;\n\n    drawOnCanvas(ctx, this.props, moreProps, xAccessor);\n  }\n  render() {\n    return (\n      <GenericChartComponent\n        svgDraw={this.renderSVG}\n        canvasToDraw={getAxisCanvas}\n        canvasDraw={this.drawOnCanvas}\n        drawOn={['pan']}\n      />\n    );\n  }\n  renderSVG(moreProps) {\n    const { xAccessor } = moreProps;\n    const {\n      xScale,\n      chartConfig: { yScale },\n      plotData,\n    } = moreProps;\n\n    const { className, stroke, fill, strokeWidth } = this.props;\n\n    const paths = helper(plotData, xAccessor).map((each, i) => {\n      const dataSeries = line()\n        .x(item => xScale(item[0]))\n        .y(item => yScale(item[1]))\n        .curve(curveStepBefore);\n\n      dataSeries(each.plot);\n\n      return (\n        <path\n          key={i}\n          d={dataSeries(each.plot)}\n          className={each.type}\n          stroke={stroke[each.type]}\n          fill={fill[each.type]}\n          strokeWidth={strokeWidth}\n        />\n      );\n    });\n    return <g className={className}>{paths}</g>;\n  }\n}\nKagiSeries.propTypes = {\n  className: PropTypes.string,\n  stroke: PropTypes.object,\n  fill: PropTypes.object,\n  strokeWidth: PropTypes.number.isRequired,\n};\n\nKagiSeries.defaultProps = {\n  className: 'react-stockcharts-kagi',\n  strokeWidth: 2,\n  stroke: {\n    yang: '#6BA583',\n    yin: '#E60000',\n  },\n  fill: {\n    yang: 'none',\n    yin: 'none',\n  },\n  currentValueStroke: '#000000',\n};\n\nfunction drawOnCanvas(ctx, props, moreProps, xAccessor) {\n  const { stroke, strokeWidth, currentValueStroke } = props;\n  const {\n    xScale,\n    chartConfig: { yScale },\n    plotData,\n  } = moreProps;\n\n  const paths = helper(plotData, xAccessor);\n\n  let begin = true;\n\n  paths.forEach(each => {\n    ctx.strokeStyle = stroke[each.type];\n    ctx.lineWidth = strokeWidth;\n\n    ctx.beginPath();\n    let prevX;\n    each.plot.forEach(d => {\n      const [x, y] = [xScale(d[0]), yScale(d[1])];\n      if (begin) {\n        ctx.moveTo(x, y);\n        begin = false;\n      } else {\n        if (isDefined(prevX)) {\n          ctx.lineTo(prevX, y);\n        }\n        ctx.lineTo(x, y);\n      }\n      prevX = x;\n      // console.log(d);\n    });\n    ctx.stroke();\n  });\n  const lastPlot = paths[paths.length - 1].plot;\n  const last = lastPlot[lastPlot.length - 1];\n  ctx.beginPath();\n  // ctx.strokeStyle = \"black\";\n  ctx.lineWidth = 1;\n\n  const [x, y1, y2] = [xScale(last[0]), yScale(last[2]), yScale(last[3])];\n  // console.log(last, x, y);\n  ctx.moveTo(x, y1);\n  ctx.lineTo(x + 10, y1);\n  ctx.stroke();\n\n  ctx.beginPath();\n  ctx.strokeStyle = currentValueStroke;\n  ctx.moveTo(x - 10, y2);\n  ctx.lineTo(x, y2);\n  ctx.stroke();\n}\n\nfunction helper(plotData, xAccessor) {\n  const kagiLine = [];\n  let kagi = {};\n  let d = plotData[0];\n  let idx = xAccessor(d);\n\n  for (let i = 0; i < plotData.length; i++) {\n    d = plotData[i];\n\n    if (isNotDefined(d.close)) continue;\n    if (isNotDefined(kagi.type)) kagi.type = d.startAs;\n    if (isNotDefined(kagi.plot)) kagi.plot = [];\n\n    idx = xAccessor(d);\n    kagi.plot.push([idx, d.open]);\n\n    if (isDefined(d.changeTo)) {\n      kagi.plot.push([idx, d.changePoint]);\n      kagi.added = true;\n      kagiLine.push(kagi);\n\n      kagi = {\n        type: d.changeTo,\n        plot: [],\n        added: false,\n      };\n      kagi.plot.push([idx, d.changePoint]);\n    }\n  }\n\n  if (!kagi.added) {\n    kagi.plot.push([idx, d.close, d.current, d.reverseAt]);\n    kagiLine.push(kagi);\n  }\n\n  // console.log(d.reverseAt);\n\n  return kagiLine;\n}\n\nexport default KagiSeries;\n"]}