{"version":3,"sources":["../../../src/lib/CanvasContainer.js"],"names":["React","Component","PropTypes","isDefined","getLogger","log","CanvasContainer","props","setDrawCanvas","bind","drawCanvas","node","id","getContext","axes","height","width","type","zIndex","ratio","position","propTypes","number","isRequired","string"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,SAArC;;AAEA,IAAMC,MAAMD,UAAU,iBAAV,CAAZ;;IAEME,e;;;AACJ,2BAAYC,KAAZ,EAAmB;AAAA;;AAAA,kIACXA,KADW;;AAEjB,UAAKC,aAAL,GAAqB,MAAKA,aAAL,CAAmBC,IAAnB,OAArB;AACA,UAAKC,UAAL,GAAkB,EAAlB;AAHiB;AAIlB;;;;kCACaC,I,EAAM;AAClB,UAAIR,UAAUQ,IAAV,CAAJ,EAAqB,KAAKD,UAAL,CAAgBC,KAAKC,EAArB,IAA2BD,KAAKE,UAAL,CAAgB,IAAhB,CAA3B,CAArB,KACK,KAAKH,UAAL,GAAkB,EAAlB;AACN;;;wCACmB;AAClB,UAAIP,UAAU,KAAKO,UAAL,CAAgBI,IAA1B,CAAJ,EAAqC;AACnC,eAAO,KAAKJ,UAAZ;AACD;AACF;;;6BACQ;AAAA,mBACwC,KAAKH,KAD7C;AAAA,UACCQ,MADD,UACCA,MADD;AAAA,UACSC,KADT,UACSA,KADT;AAAA,UACgBC,IADhB,UACgBA,IADhB;AAAA,UACsBC,MADtB,UACsBA,MADtB;AAAA,UAC8BC,KAD9B,UAC8BA,KAD9B;;AAEP,UAAIF,SAAS,KAAb,EAAoB,OAAO,IAAP;;AAEpBZ,UAAI,cAAJ,EAAoBc,KAApB;;AAEA,aACE;AAAA;AAAA,UAAK,OAAO,EAAEC,UAAU,UAAZ,EAAwBF,QAAQA,MAAhC,EAAZ;AACE;AACE,cAAG,IADL;AAEE,eAAK,KAAKV,aAFZ;AAGE,iBAAOQ,QAAQG,KAHjB;AAIE,kBAAQJ,SAASI,KAJnB;AAKE,iBAAO,EAAEC,UAAU,UAAZ,EAAwBJ,OAAOA,KAA/B,EAAsCD,QAAQA,MAA9C;AALT,UADF;AAQE;AACE,cAAG,MADL;AAEE,eAAK,KAAKP,aAFZ;AAGE,iBAAOQ,QAAQG,KAHjB;AAIE,kBAAQJ,SAASI,KAJnB;AAKE,iBAAO,EAAEC,UAAU,UAAZ,EAAwBJ,OAAOA,KAA/B,EAAsCD,QAAQA,MAA9C;AALT,UARF;AAeE;AACE,cAAG,YADL;AAEE,eAAK,KAAKP,aAFZ;AAGE,iBAAOQ,QAAQG,KAHjB;AAIE,kBAAQJ,SAASI,KAJnB;AAKE,iBAAO,EAAEC,UAAU,UAAZ,EAAwBJ,OAAOA,KAA/B,EAAsCD,QAAQA,MAA9C;AALT;AAfF,OADF;AAyBD;;;;EA9C2Bd,S;AAgD9B;;;;;;AAIAK,gBAAgBe,SAAhB,GAA4B;AAC1BL,SAAOd,UAAUoB,MAAV,CAAiBC,UADE;AAE1BR,UAAQb,UAAUoB,MAAV,CAAiBC,UAFC;AAG1BN,QAAMf,UAAUsB,MAAV,CAAiBD,UAHG;AAI1BL,UAAQhB,UAAUoB,MAJQ;AAK1BH,SAAOjB,UAAUoB,MAAV,CAAiBC;AALE,CAA5B;;AAQA,eAAejB,eAAf","file":"CanvasContainer.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { isDefined, getLogger } from './utils';\n\nconst log = getLogger('CanvasContainer');\n\nclass CanvasContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.setDrawCanvas = this.setDrawCanvas.bind(this);\n    this.drawCanvas = {};\n  }\n  setDrawCanvas(node) {\n    if (isDefined(node)) this.drawCanvas[node.id] = node.getContext('2d');\n    else this.drawCanvas = {};\n  }\n  getCanvasContexts() {\n    if (isDefined(this.drawCanvas.axes)) {\n      return this.drawCanvas;\n    }\n  }\n  render() {\n    const { height, width, type, zIndex, ratio } = this.props;\n    if (type === 'svg') return null;\n\n    log('using ratio ', ratio);\n\n    return (\n      <div style={{ position: 'absolute', zIndex: zIndex }}>\n        <canvas\n          id=\"bg\"\n          ref={this.setDrawCanvas}\n          width={width * ratio}\n          height={height * ratio}\n          style={{ position: 'absolute', width: width, height: height }}\n        />\n        <canvas\n          id=\"axes\"\n          ref={this.setDrawCanvas}\n          width={width * ratio}\n          height={height * ratio}\n          style={{ position: 'absolute', width: width, height: height }}\n        />\n        <canvas\n          id=\"mouseCoord\"\n          ref={this.setDrawCanvas}\n          width={width * ratio}\n          height={height * ratio}\n          style={{ position: 'absolute', width: width, height: height }}\n        />\n      </div>\n    );\n  }\n}\n/*\n\t\t\t\t<canvas id=\"hover\" ref={this.setDrawCanvas} width={width * ratio} height={height * ratio}\n\t\t\t\t\tstyle={{ position: \"absolute\", width: width, height: height }} />\n*/\nCanvasContainer.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  type: PropTypes.string.isRequired,\n  zIndex: PropTypes.number,\n  ratio: PropTypes.number.isRequired,\n};\n\nexport default CanvasContainer;\n"]}