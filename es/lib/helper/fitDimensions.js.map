{"version":3,"sources":["../../../../src/lib/helper/fitDimensions.js"],"names":["React","Component","ReactDOM","isDefined","getDisplayName","Series","name","displayName","fitDimensions","WrappedComponent","props","minWidth","minHeight","ratio","width","height","getDimensions","el","w","parentNode","clientWidth","h","clientHeight","Math","max","ResponsiveComponent","handleWindowResize","bind","getWrappedInstance","saveNode","setTestCanvas","state","node","testCanvas","context","getContext","devicePixelRatio","window","backingStoreRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","addEventListener","dimensions","setState","getRatio","removeEventListener","findDOMNode","ref"],"mappings":"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","file":"fitDimensions.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { isDefined } from '../utils';\n\nfunction getDisplayName(Series) {\n  const name = Series.displayName || Series.name || 'Series';\n  return name;\n}\n\nexport default function fitDimensions(WrappedComponent, props = {}) {\n  const { minWidth = 100, minHeight = 100, ratio, width, height } = props;\n\n  function getDimensions(el) {\n    const w = el.parentNode.clientWidth;\n    const h = el.parentNode.clientHeight;\n\n    return {\n      width: isDefined(width) ? width : Math.max(w, minWidth),\n      height: isDefined(height) ? height : Math.max(h, minHeight),\n    };\n  }\n  class ResponsiveComponent extends Component {\n    constructor(props) {\n      super(props);\n      this.handleWindowResize = this.handleWindowResize.bind(this);\n      this.getWrappedInstance = this.getWrappedInstance.bind(this);\n      this.saveNode = this.saveNode.bind(this);\n      this.setTestCanvas = this.setTestCanvas.bind(this);\n      this.state = {};\n    }\n    saveNode(node) {\n      this.node = node;\n    }\n    setTestCanvas(node) {\n      this.testCanvas = node;\n    }\n    getRatio() {\n      if (isDefined(this.testCanvas)) {\n        const context = this.testCanvas.getContext('2d');\n\n        const devicePixelRatio = window.devicePixelRatio || 1;\n        const backingStoreRatio =\n          context.webkitBackingStorePixelRatio ||\n          context.mozBackingStorePixelRatio ||\n          context.msBackingStorePixelRatio ||\n          context.oBackingStorePixelRatio ||\n          context.backingStorePixelRatio ||\n          1;\n\n        const ratio = devicePixelRatio / backingStoreRatio;\n        // console.log(\"ratio = \", ratio);\n        return ratio;\n      }\n      return 1;\n    }\n    componentDidMount() {\n      window.addEventListener('resize', this.handleWindowResize);\n      const dimensions = getDimensions(this.node);\n\n      /* eslint-disable react/no-did-mount-set-state */\n      this.setState({\n        ...dimensions,\n        ratio: isDefined(ratio) ? ratio : this.getRatio(),\n      });\n      /* eslint-enable react/no-did-mount-set-state */\n    }\n    componentWillUnmount() {\n      window.removeEventListener('resize', this.handleWindowResize);\n    }\n    handleWindowResize() {\n      const node = ReactDOM.findDOMNode(this.node); // eslint-disable-line react/no-find-dom-node\n      this.setState(getDimensions(node));\n    }\n    getWrappedInstance() {\n      return this.node;\n    }\n    render() {\n      const ref = { ref: this.saveNode };\n\n      if (this.state.width) {\n        return (\n          <WrappedComponent\n            height={this.state.height}\n            width={this.state.width}\n            ratio={this.state.ratio}\n            {...this.props}\n            {...ref}\n          />\n        );\n      } else {\n        return (\n          <div {...ref}>\n            <canvas ref={this.setTestCanvas} />\n          </div>\n        );\n      }\n    }\n  }\n\n  ResponsiveComponent.displayName = `fitDimensions(${getDisplayName(\n    WrappedComponent\n  )})`;\n\n  return ResponsiveComponent;\n}\n"]}