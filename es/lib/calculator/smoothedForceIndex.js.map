{"version":3,"sources":["../../../../src/lib/calculator/smoothedForceIndex.js"],"names":["forceIndex","ema","sma","zipper","SmoothedForceIndex","defaultOptions","underlyingAlgorithm","merge","combine","force","smoothed","options","calculator","data","smoothingType","smoothingWindow","sourcePath","volumePath","algo","ma","forceMA","windowSize","undefined","undefinedLength","x","arguments","length"],"mappings":";;AAAA,OAAOA,UAAP,MAAuB,cAAvB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,sBAAsBC,cAA/B,QAAqD,gCAArD;;AAEA,eAAe,YAAY;AACzB,MAAMC,sBAAsBN,YAA5B;AACA,MAAMO,QAAQJ,SAASK,OAAT,CAAiB,UAACC,KAAD,EAAQC,QAAR,EAAqB;AAClD,WAAO,EAAED,YAAF,EAASC,kBAAT,EAAP;AACD,GAFa,CAAd;;AAIA,MAAIC,UAAUN,cAAd;AACA,WAASO,UAAT,CAAoBC,IAApB,EAA0B;AAAA,mBACmBF,OADnB;AAAA,QAChBG,aADgB,YAChBA,aADgB;AAAA,QACDC,eADC,YACDA,eADC;AAAA,oBAEWJ,OAFX;AAAA,QAEhBK,UAFgB,aAEhBA,UAFgB;AAAA,QAEJC,UAFI,aAEJA,UAFI;;;AAIxB,QAAMC,OAAOZ,oBAAoBK,OAApB,CAA4B,EAAEK,sBAAF,EAAcC,sBAAd,EAA5B,CAAb;;AAEA,QAAMR,QAAQS,KAAKL,IAAL,CAAd;;AAEA,QAAMM,KAAKL,kBAAkB,KAAlB,GAA0Bb,KAA1B,GAAkCC,KAA7C;AACA,QAAMkB,UAAUD,GAAGR,OAAH,CAAW;AACzBU,kBAAYN,eADa;AAEzBC,kBAAYM;AAFa,KAAX,CAAhB;;AAKA,QAAMZ,WAAWU,QAAQX,KAAR,CAAjB;AACA,WAAOF,MAAME,KAAN,EAAaC,QAAb,CAAP;AACD;;AAEDE,aAAWW,eAAX,GAA6B,YAAY;AAAA,oBACXZ,OADW;AAAA,QAC/BI,eAD+B,aAC/BA,eAD+B;;AAEvC,WAAOT,oBAAoBiB,eAApB,KAAwCR,eAAxC,GAA0D,CAAjE;AACD,GAHD;AAIAH,aAAWD,OAAX,GAAqB,UAAUa,CAAV,EAAa;AAChC,QAAI,CAACC,UAAUC,MAAf,EAAuB;AACrB,aAAOf,OAAP;AACD;AACDA,2BAAeN,cAAf,EAAkCmB,CAAlC;AACA,WAAOZ,UAAP;AACD,GAND;;AAQA,SAAOA,UAAP;AACD","file":"smoothedForceIndex.js","sourcesContent":["import forceIndex from './forceIndex';\nimport ema from './ema';\nimport sma from './sma';\nimport { zipper } from '../utils';\nimport { SmoothedForceIndex as defaultOptions } from './defaultOptionsForComputation';\n\nexport default function () {\n  const underlyingAlgorithm = forceIndex();\n  const merge = zipper().combine((force, smoothed) => {\n    return { force, smoothed };\n  });\n\n  let options = defaultOptions;\n  function calculator(data) {\n    const { smoothingType, smoothingWindow } = options;\n    const { sourcePath, volumePath } = options;\n\n    const algo = underlyingAlgorithm.options({ sourcePath, volumePath });\n\n    const force = algo(data);\n\n    const ma = smoothingType === 'ema' ? ema() : sma();\n    const forceMA = ma.options({\n      windowSize: smoothingWindow,\n      sourcePath: undefined,\n    });\n\n    const smoothed = forceMA(force);\n    return merge(force, smoothed);\n  }\n\n  calculator.undefinedLength = function () {\n    const { smoothingWindow } = options;\n    return underlyingAlgorithm.undefinedLength() + smoothingWindow - 1;\n  };\n  calculator.options = function (x) {\n    if (!arguments.length) {\n      return options;\n    }\n    options = { ...defaultOptions, ...x };\n    return calculator;\n  };\n\n  return calculator;\n}\n"]}