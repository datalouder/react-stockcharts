{"version":3,"sources":["../../../../src/lib/calculator/heikinAshi.js"],"names":["mappedSlidingWindow","identity","source","calculator","data","algorithm","windowSize","undefinedValue","open","high","low","close","accumulator","prev","now","date","volume","Math","max","min","x","arguments","length"],"mappings":";;AAAA,SAASA,mBAAT,EAA8BC,QAA9B,QAA8C,UAA9C;;AAEA,eAAe,YAAY;AACzB,MAAIC,SAASD,QAAb;;AAEA,WAASE,UAAT,CAAoBC,IAApB,EAA0B;AACxB,QAAMC,YAAYL,sBACfM,UADe,CACJ,CADI,EAEfC,cAFe,CAEA,gBAAgC;AAAA,UAA7BC,IAA6B,QAA7BA,IAA6B;AAAA,UAAvBC,IAAuB,QAAvBA,IAAuB;AAAA,UAAjBC,GAAiB,QAAjBA,GAAiB;AAAA,UAAZC,KAAY,QAAZA,KAAY;;AAC9CA,cAAQ,CAACH,OAAOC,IAAP,GAAcC,GAAd,GAAoBC,KAArB,IAA8B,CAAtC;AACA,aAAO,EAAEH,UAAF,EAAQC,UAAR,EAAcC,QAAd,EAAmBC,YAAnB,EAAP;AACD,KALe,EAMfC,WANe,CAMH,iBAAiB;AAAA;AAAA,UAAfC,IAAe;AAAA,UAATC,GAAS;;AAC5B;AAD4B,UAEpBC,IAFoB,GAEHD,GAFG,CAEpBC,IAFoB;AAAA,UAEdC,MAFc,GAEHF,GAFG,CAEdE,MAFc;;AAG5B,UAAML,QAAQ,CAACG,IAAIN,IAAJ,GAAWM,IAAIL,IAAf,GAAsBK,IAAIJ,GAA1B,GAAgCI,IAAIH,KAArC,IAA8C,CAA5D;AACA,UAAMH,OAAO,CAACK,KAAKL,IAAL,GAAYK,KAAKF,KAAlB,IAA2B,CAAxC;AACA,UAAMF,OAAOQ,KAAKC,GAAL,CAASV,IAAT,EAAeM,IAAIL,IAAnB,EAAyBE,KAAzB,CAAb;AACA,UAAMD,MAAMO,KAAKE,GAAL,CAASX,IAAT,EAAeM,IAAIJ,GAAnB,EAAwBC,KAAxB,CAAZ;AACA,aAAO,EAAEI,UAAF,EAAQP,UAAR,EAAcC,UAAd,EAAoBC,QAApB,EAAyBC,YAAzB,EAAgCK,cAAhC,EAAP;AACD,KAde,CAAlB;;AAgBA,WAAOX,UAAUD,IAAV,CAAP;AACD;AACDD,aAAWD,MAAX,GAAoB,UAAUkB,CAAV,EAAa;AAC/B,QAAI,CAACC,UAAUC,MAAf,EAAuB;AACrB,aAAOpB,MAAP;AACD;AACDA,aAASkB,CAAT;AACA,WAAOjB,UAAP;AACD,GAND;;AAQA,SAAOA,UAAP;AACD","file":"heikinAshi.js","sourcesContent":["import { mappedSlidingWindow, identity } from '../utils';\n\nexport default function () {\n  let source = identity;\n\n  function calculator(data) {\n    const algorithm = mappedSlidingWindow()\n      .windowSize(2)\n      .undefinedValue(({ open, high, low, close }) => {\n        close = (open + high + low + close) / 4;\n        return { open, high, low, close };\n      })\n      .accumulator(([prev, now]) => {\n        // console.log(prev, now);\n        const { date, volume } = now;\n        const close = (now.open + now.high + now.low + now.close) / 4;\n        const open = (prev.open + prev.close) / 2;\n        const high = Math.max(open, now.high, close);\n        const low = Math.min(open, now.low, close);\n        return { date, open, high, low, close, volume };\n      });\n\n    return algorithm(data);\n  }\n  calculator.source = function (x) {\n    if (!arguments.length) {\n      return source;\n    }\n    source = x;\n    return calculator;\n  };\n\n  return calculator;\n}\n"]}