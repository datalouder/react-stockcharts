{"version":3,"sources":["../../../../src/lib/calculator/renko.js"],"names":["merge","isNotDefined","functor","atr","Renko","defaultOptions","options","dateAccessor","d","date","dateMutator","calculator","rawData","reversalType","fixedBrickSize","sourcePath","windowSize","source","high","low","close","pricingMethod","brickSize","atrAlgorithm","atrCalculator","algorithm","c","renkoData","index","prevBrickClose","open","prevBrickOpen","brick","direction","forEach","idx","from","startOfYear","startOfQuarter","startOfMonth","startOfWeek","fromDate","volume","prevCloseToHigh","prevCloseToLow","prevOpenToHigh","prevOpenToLow","priceMovement","Math","min","abs","max","noOfBricks","floor","j","to","toDate","fullyFormed","push","newBrick","length","x","arguments"],"mappings":"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","file":"renko.js","sourcesContent":["import { merge, isNotDefined, functor } from '../utils';\n\nimport atr from './atr';\n\nimport { Renko as defaultOptions } from './defaultOptionsForComputation';\n\nexport default function () {\n  let options = defaultOptions;\n\n  let dateAccessor = d => d.date;\n  let dateMutator = (d, date) => {\n    d.date = date;\n  };\n\n  function calculator(rawData) {\n    const { reversalType, fixedBrickSize, sourcePath, windowSize } = options;\n\n    const source =\n      sourcePath === 'high/low'\n        ? d => {\n            return { high: d.high, low: d.low };\n          }\n        : d => {\n            return { high: d.close, low: d.close };\n          };\n\n    const pricingMethod = source;\n    let brickSize;\n\n    if (reversalType === 'ATR') {\n      // calculateATR(rawData, period);\n      const atrAlgorithm = atr().options({ windowSize });\n\n      const atrCalculator = merge()\n        .algorithm(atrAlgorithm)\n        .merge((d, c) => {\n          d['atr' + windowSize] = c;\n        });\n\n      atrCalculator(rawData);\n      brickSize = d => d['atr' + windowSize];\n    } else {\n      brickSize = functor(fixedBrickSize);\n    }\n\n    const renkoData = [];\n\n    let index = 0,\n      prevBrickClose = rawData[index].open,\n      prevBrickOpen = rawData[index].open;\n    let brick = {},\n      direction = 0;\n\n    rawData.forEach(function (d, idx) {\n      if (isNotDefined(brick.from)) {\n        brick.high = d.high;\n        brick.low = d.low;\n        brick.startOfYear = d.startOfYear;\n        brick.startOfQuarter = d.startOfQuarter;\n        brick.startOfMonth = d.startOfMonth;\n        brick.startOfWeek = d.startOfWeek;\n\n        brick.from = idx;\n        brick.fromDate = dateAccessor(d);\n        // indexMutator(brick, index++);\n        dateMutator(brick, dateAccessor(d));\n      }\n      brick.volume = (brick.volume || 0) + d.volume;\n\n      const prevCloseToHigh = prevBrickClose - pricingMethod(d).high,\n        prevCloseToLow = prevBrickClose - pricingMethod(d).low,\n        prevOpenToHigh = prevBrickOpen - pricingMethod(d).high,\n        prevOpenToLow = prevBrickOpen - pricingMethod(d).low,\n        priceMovement = Math.min(\n          Math.abs(prevCloseToHigh),\n          Math.abs(prevCloseToLow),\n          Math.abs(prevOpenToHigh),\n          Math.abs(prevOpenToLow)\n        );\n\n      brick.high = Math.max(brick.high, d.high);\n      brick.low = Math.min(brick.low, d.low);\n\n      if (!brick.startOfYear) {\n        brick.startOfYear = d.startOfYear;\n        if (brick.startOfYear) {\n          dateMutator(brick, dateAccessor(d));\n          // brick.displayDate = d.displayDate;\n        }\n      }\n\n      if (!brick.startOfQuarter) {\n        brick.startOfQuarter = d.startOfQuarter;\n        if (brick.startOfQuarter && !brick.startOfYear) {\n          dateMutator(brick, dateAccessor(d));\n          // brick.displayDate = d.displayDate;\n        }\n      }\n\n      if (!brick.startOfMonth) {\n        brick.startOfMonth = d.startOfMonth;\n        if (brick.startOfMonth && !brick.startOfQuarter) {\n          dateMutator(brick, dateAccessor(d));\n          // brick.displayDate = d.displayDate;\n        }\n      }\n      if (!brick.startOfWeek) {\n        brick.startOfWeek = d.startOfWeek;\n        if (brick.startOfWeek && !brick.startOfMonth) {\n          dateMutator(brick, dateAccessor(d));\n          // brick.displayDate = d.displayDate;\n        }\n      }\n\n      // d.brick = JSON.stringify(brick);\n      if (brickSize(d)) {\n        const noOfBricks = Math.floor(priceMovement / brickSize(d));\n\n        brick.open =\n          Math.abs(prevCloseToHigh) < Math.abs(prevOpenToHigh) ||\n          Math.abs(prevCloseToLow) < Math.abs(prevOpenToLow)\n            ? prevBrickClose\n            : prevBrickOpen;\n\n        if (noOfBricks >= 1) {\n          let j = 0;\n          for (j = 0; j < noOfBricks; j++) {\n            brick.close =\n              brick.open < pricingMethod(d).high\n                ? // if brick open is less than current price it means it is green/hollow brick\n                  brick.open + brickSize(d)\n                : brick.open - brickSize(d);\n            direction = brick.close > brick.open ? 1 : -1;\n            brick.direction = direction;\n            brick.to = idx;\n            brick.toDate = dateAccessor(d);\n            // brick.diff = brick.open - brick.close;\n            // brick.atr = d.atr;\n            brick.fullyFormed = true;\n            renkoData.push(brick);\n\n            prevBrickClose = brick.close;\n            prevBrickOpen = brick.open;\n\n            const newBrick = {\n              high: brick.high,\n              low: brick.low,\n              open: brick.close,\n              startOfYear: false,\n              startOfMonth: false,\n              startOfQuarter: false,\n              startOfWeek: false,\n            };\n            brick = newBrick;\n            brick.from = idx;\n            brick.fromDate = dateAccessor(d);\n            // indexMutator(brick, index + j);\n            dateMutator(brick, dateAccessor(d));\n            brick.volume = (brick.volume || 0) + d.volume;\n          }\n          index = index + j - 1;\n          brick = {};\n        } else {\n          if (idx === rawData.length - 1) {\n            brick.close =\n              direction > 0 ? pricingMethod(d).high : pricingMethod(d).low;\n            brick.to = idx;\n            brick.toDate = dateAccessor(d);\n            dateMutator(brick, dateAccessor(d));\n            brick.fullyFormed = false;\n            renkoData.push(brick);\n          }\n        }\n      }\n    });\n    return renkoData;\n  }\n  calculator.options = function (x) {\n    if (!arguments.length) {\n      return options;\n    }\n    options = { ...defaultOptions, ...x };\n    return calculator;\n  };\n\n  calculator.dateMutator = function (x) {\n    if (!arguments.length) return dateMutator;\n    dateMutator = x;\n    return calculator;\n  };\n  calculator.dateAccessor = function (x) {\n    if (!arguments.length) return dateAccessor;\n    dateAccessor = x;\n    return calculator;\n  };\n\n  return calculator;\n}\n"]}