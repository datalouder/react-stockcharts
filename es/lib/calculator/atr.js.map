{"version":3,"sources":["../../../../src/lib/calculator/atr.js"],"names":["sum","ATR","defaultOptions","slidingWindow","last","isDefined","options","source","open","d","high","low","close","calculator","data","windowSize","trueRangeAlgorithm","undefinedValue","accumulator","prev","values","Math","max","prevATR","atrAlgorithm","skipInitial","tr","atr","newData","undefinedLength","x","arguments","length"],"mappings":";;AAAA,SAASA,GAAT,QAAoB,UAApB;;AAEA,SAASC,OAAOC,cAAhB,QAAsC,gCAAtC;AACA,SAASC,aAAT,EAAwBC,IAAxB,EAA8BC,SAA9B,QAA+C,UAA/C;;AAEA,eAAe,YAAY;AACzB,MAAIC,UAAUJ,cAAd;AACA,MAAIK,SAAS;AAAA,WAAM;AACjBC,YAAMC,EAAED,IADS;AAEjBE,YAAMD,EAAEC,IAFS;AAGjBC,WAAKF,EAAEE,GAHU;AAIjBC,aAAOH,EAAEG;AAJQ,KAAN;AAAA,GAAb;;AAOA,WAASC,UAAT,CAAoBC,IAApB,EAA0B;AAAA,mBACDR,OADC;AAAA,QAChBS,UADgB,YAChBA,UADgB;;;AAGxB,QAAMC,qBAAqBb,gBACxBY,UADwB,CACb,CADa,EAExBR,MAFwB,CAEjBA,MAFiB,EAGxBU,cAHwB,CAGT;AAAA,aAAKR,EAAEC,IAAF,GAASD,EAAEE,GAAhB;AAAA,KAHS,EAGY;AAHZ,KAIxBO,WAJwB,CAIZ,kBAAU;AACrB,UAAMC,OAAOC,OAAO,CAAP,CAAb;AACA,UAAMX,IAAIW,OAAO,CAAP,CAAV;AACA,aAAOC,KAAKC,GAAL,CACLb,EAAEC,IAAF,GAASD,EAAEE,GADN,EAELF,EAAEC,IAAF,GAASS,KAAKP,KAFT,EAGLH,EAAEE,GAAF,GAAQQ,KAAKP,KAHR,CAAP;AAKD,KAZwB,CAA3B;;AAcA,QAAIW,gBAAJ;;AAEA,QAAMC,eAAerB,gBAClBsB,WADkB,CACN,CADM,EACH;AADG,KAElBV,UAFkB,CAEPA,UAFO,EAGlBG,WAHkB,CAGN,kBAAU;AACrB,UAAMQ,KAAKtB,KAAKgB,MAAL,CAAX;AACA,UAAMO,MAAMtB,UAAUkB,OAAV,IACR,CAACA,WAAWR,aAAa,CAAxB,IAA6BW,EAA9B,IAAoCX,UAD5B,GAERf,IAAIoB,MAAJ,IAAcL,UAFlB;;AAIAQ,gBAAUI,GAAV;AACA,aAAOA,GAAP;AACD,KAXkB,CAArB;;AAaA,QAAMC,UAAUJ,aAAaR,mBAAmBF,IAAnB,CAAb,CAAhB;;AAEA,WAAOc,OAAP;AACD;AACDf,aAAWgB,eAAX,GAA6B,YAAY;AAAA,oBAChBvB,OADgB;AAAA,QAC/BS,UAD+B,aAC/BA,UAD+B;;AAEvC,WAAOA,aAAa,CAApB;AACD,GAHD;AAIAF,aAAWP,OAAX,GAAqB,UAAUwB,CAAV,EAAa;AAChC,QAAI,CAACC,UAAUC,MAAf,EAAuB;AACrB,aAAO1B,OAAP;AACD;AACDA,2BAAeJ,cAAf,EAAkC4B,CAAlC;AACA,WAAOjB,UAAP;AACD,GAND;;AAQAA,aAAWN,MAAX,GAAoB,UAAUuB,CAAV,EAAa;AAC/B,QAAI,CAACC,UAAUC,MAAf,EAAuB;AACrB,aAAOzB,MAAP;AACD;AACDA,aAASuB,CAAT;AACA,WAAOjB,UAAP;AACD,GAND;;AAQA,SAAOA,UAAP;AACD","file":"atr.js","sourcesContent":["import { sum } from 'd3-array';\n\nimport { ATR as defaultOptions } from './defaultOptionsForComputation';\nimport { slidingWindow, last, isDefined } from '../utils';\n\nexport default function () {\n  let options = defaultOptions;\n  let source = d => ({\n    open: d.open,\n    high: d.high,\n    low: d.low,\n    close: d.close,\n  });\n\n  function calculator(data) {\n    const { windowSize } = options;\n\n    const trueRangeAlgorithm = slidingWindow()\n      .windowSize(2)\n      .source(source)\n      .undefinedValue(d => d.high - d.low) // the first TR value is simply the High minus the Low\n      .accumulator(values => {\n        const prev = values[0];\n        const d = values[1];\n        return Math.max(\n          d.high - d.low,\n          d.high - prev.close,\n          d.low - prev.close\n        );\n      });\n\n    let prevATR;\n\n    const atrAlgorithm = slidingWindow()\n      .skipInitial(1) // trueRange starts from index 1 so ATR starts from 1\n      .windowSize(windowSize)\n      .accumulator(values => {\n        const tr = last(values);\n        const atr = isDefined(prevATR)\n          ? (prevATR * (windowSize - 1) + tr) / windowSize\n          : sum(values) / windowSize;\n\n        prevATR = atr;\n        return atr;\n      });\n\n    const newData = atrAlgorithm(trueRangeAlgorithm(data));\n\n    return newData;\n  }\n  calculator.undefinedLength = function () {\n    const { windowSize } = options;\n    return windowSize - 1;\n  };\n  calculator.options = function (x) {\n    if (!arguments.length) {\n      return options;\n    }\n    options = { ...defaultOptions, ...x };\n    return calculator;\n  };\n\n  calculator.source = function (x) {\n    if (!arguments.length) {\n      return source;\n    }\n    source = x;\n    return calculator;\n  };\n\n  return calculator;\n}\n"]}