{"version":3,"sources":["../../../../src/lib/indicator/sar.js"],"names":["rebind","merge","sar","baseIndicator","ALGORITHM_TYPE","base","type","accessor","d","underlyingAlgorithm","mergedAlgorithm","algorithm","datum","indicator","data","options","Error"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,KAAjB,QAA8B,UAA9B;;AAEA,SAASC,GAAT,QAAoB,eAApB;;AAEA,OAAOC,aAAP,MAA0B,iBAA1B;;AAEA,IAAMC,iBAAiB,KAAvB;;AAEA,eAAe,YAAY;AACzB,MAAMC,OAAOF,gBACVG,IADU,CACLF,cADK,EAEVG,QAFU,CAED;AAAA,WAAKC,EAAEN,GAAP;AAAA,GAFC,CAAb;;AAIA,MAAMO,sBAAsBP,KAA5B;;AAEA,MAAMQ,kBAAkBT,QACrBU,SADqB,CACXF,mBADW,EAErBR,KAFqB,CAEf,UAACW,KAAD,EAAQC,SAAR,EAAsB;AAC3BD,UAAMV,GAAN,GAAYW,SAAZ;AACD,GAJqB,CAAxB;;AAMA,MAAMA,YAAY,SAAZA,SAAY,CAAUC,IAAV,EAA2C;AAAA,QAA3BC,OAA2B,uEAAjB,EAAEd,OAAO,IAAT,EAAiB;;AAC3D,QAAIc,QAAQd,KAAZ,EAAmB;AACjB,UAAI,CAACI,KAAKE,QAAL,EAAL,EACE,MAAM,IAAIS,KAAJ,yBACkBZ,cADlB,yBAAN;AAGF,aAAOM,gBAAgBI,IAAhB,CAAP;AACD;AACD,WAAOL,oBAAoBK,IAApB,CAAP;AACD,GATD;;AAWAd,SAAOa,SAAP,EAAkBR,IAAlB,EAAwB,IAAxB,EAA8B,UAA9B,EAA0C,QAA1C,EAAoD,MAApD,EAA4D,MAA5D;AACAL,SAAOa,SAAP,EAAkBJ,mBAAlB,EAAuC,iBAAvC;AACAT,SAAOa,SAAP,EAAkBJ,mBAAlB,EAAuC,SAAvC;AACAT,SAAOa,SAAP,EAAkBH,eAAlB,EAAmC,OAAnC;;AAEA,SAAOG,SAAP;AACD","file":"sar.js","sourcesContent":["import { rebind, merge } from '../utils';\n\nimport { sar } from '../calculator';\n\nimport baseIndicator from './baseIndicator';\n\nconst ALGORITHM_TYPE = 'SMA';\n\nexport default function () {\n  const base = baseIndicator()\n    .type(ALGORITHM_TYPE)\n    .accessor(d => d.sar);\n\n  const underlyingAlgorithm = sar();\n\n  const mergedAlgorithm = merge()\n    .algorithm(underlyingAlgorithm)\n    .merge((datum, indicator) => {\n      datum.sar = indicator;\n    });\n\n  const indicator = function (data, options = { merge: true }) {\n    if (options.merge) {\n      if (!base.accessor())\n        throw new Error(\n          `Set an accessor to ${ALGORITHM_TYPE} before calculating`\n        );\n      return mergedAlgorithm(data);\n    }\n    return underlyingAlgorithm(data);\n  };\n\n  rebind(indicator, base, 'id', 'accessor', 'stroke', 'echo', 'type');\n  rebind(indicator, underlyingAlgorithm, 'undefinedLength');\n  rebind(indicator, underlyingAlgorithm, 'options');\n  rebind(indicator, mergedAlgorithm, 'merge');\n\n  return indicator;\n}\n"]}