{"version":3,"sources":["../../../../src/lib/coordinates/Cursor.js"],"names":["React","Component","PropTypes","GenericComponent","getMouseCanvas","first","last","hexToRGBA","isDefined","isNotDefined","strokeDashTypes","getStrokeDasharray","Cursor","props","renderSVG","bind","drawOnCanvas","moreProps","mouseXY","currentItem","show","height","width","customSnapX","stroke","opacity","strokeDasharray","disableYCursor","yCursor","x1","x2","y1","y2","id","x","xCursor","xScale","plotData","xAccessor","xValue","centerX","shapeWidth","Math","abs","length","xPos","xCursorShapeFill","Function","xCursorShapeStroke","ctx","cursors","getXYCursor","useXCursorShape","context","margin","ratio","originX","left","originY","top","save","setTransform","scale","translate","forEach","dashArray","line","split","map","d","xShapeFill","getXCursorShapeFill","xCursorShapeOpacity","xCursorShapeStrokeDasharray","xShape","getXCursorShape","xShapeStroke","getXCursorShapeStroke","strokeStyle","setLineDash","beginPath","fillStyle","fillRect","rect","fill","moveTo","lineTo","restore","className","idx","rest","propTypes","string","oneOf","snapX","bool","number","oneOfType","func","isRequired","contextTypes","object","round","defaultProps"],"mappings":"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","file":"Cursor.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport GenericComponent, { getMouseCanvas } from '../GenericComponent';\n\nimport {\n  first,\n  last,\n  hexToRGBA,\n  isDefined,\n  isNotDefined,\n  strokeDashTypes,\n  getStrokeDasharray,\n} from '../utils';\n\nclass Cursor extends Component {\n  constructor(props) {\n    super(props);\n    this.renderSVG = this.renderSVG.bind(this);\n    this.drawOnCanvas = this.drawOnCanvas.bind(this);\n  }\n\n  getXYCursor(props, moreProps) {\n    const { mouseXY, currentItem, show, height, width } = moreProps;\n    const { customSnapX, stroke, opacity, strokeDasharray, disableYCursor } =\n      props;\n    if (!show || isNotDefined(currentItem)) return null;\n\n    const yCursor = {\n      x1: 0,\n      x2: width,\n      y1: mouseXY[1],\n      y2: mouseXY[1],\n      stroke,\n      strokeDasharray,\n      opacity,\n      id: 'yCursor',\n    };\n    const x = customSnapX(props, moreProps);\n\n    const xCursor = {\n      x1: x,\n      x2: x,\n      y1: 0,\n      y2: height,\n      stroke,\n      strokeDasharray,\n      opacity,\n      id: 'xCursor',\n    };\n\n    return disableYCursor ? [xCursor] : [yCursor, xCursor];\n  }\n\n  getXCursorShape(moreProps /* , ctx */) {\n    const { height, xScale, currentItem, plotData } = moreProps;\n    const { xAccessor } = moreProps;\n    const xValue = xAccessor(currentItem);\n    const centerX = xScale(xValue);\n    const shapeWidth =\n      Math.abs(\n        xScale(xAccessor(last(plotData))) - xScale(xAccessor(first(plotData)))\n      ) /\n      (plotData.length - 1);\n    const xPos = centerX - shapeWidth / 2;\n\n    return { height, xPos, shapeWidth };\n  }\n\n  getXCursorShapeFill(moreProps) {\n    const { xCursorShapeFill } = this.props;\n    const { currentItem } = moreProps;\n    return xCursorShapeFill instanceof Function\n      ? xCursorShapeFill(currentItem)\n      : xCursorShapeFill;\n  }\n\n  getXCursorShapeStroke(moreProps) {\n    const { xCursorShapeStroke } = this.props;\n    const { currentItem } = moreProps;\n    return xCursorShapeStroke instanceof Function\n      ? xCursorShapeStroke(currentItem)\n      : xCursorShapeStroke;\n  }\n\n  drawOnCanvas(ctx, moreProps) {\n    const cursors = this.getXYCursor(this.props, moreProps);\n\n    if (isDefined(cursors)) {\n      const { useXCursorShape } = this.props;\n\n      const { margin, ratio } = this.context;\n      const originX = 0.5 * ratio + margin.left;\n      const originY = 0.5 * ratio + margin.top;\n\n      ctx.save();\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n      ctx.scale(ratio, ratio);\n\n      ctx.translate(originX, originY);\n\n      cursors.forEach(line => {\n        const dashArray = getStrokeDasharray(line.strokeDasharray)\n          .split(',')\n          .map(d => +d);\n        const xShapeFill = this.getXCursorShapeFill(moreProps);\n\n        if (useXCursorShape && line.id === 'xCursor') {\n          const { xCursorShapeOpacity, xCursorShapeStrokeDasharray } =\n            this.props;\n          const xShape = this.getXCursorShape(moreProps);\n\n          if (xCursorShapeStrokeDasharray != null) {\n            const xShapeStroke = this.getXCursorShapeStroke(moreProps);\n            ctx.strokeStyle = hexToRGBA(xShapeStroke, xCursorShapeOpacity);\n            ctx.setLineDash(\n              getStrokeDasharray(xCursorShapeStrokeDasharray)\n                .split(',')\n                .map(d => +d)\n            );\n          }\n\n          ctx.beginPath();\n          ctx.fillStyle =\n            xShapeFill != null\n              ? hexToRGBA(xShapeFill, xCursorShapeOpacity)\n              : 'rgba(0, 0, 0, 0)'; // =\"transparent\"\n\n          ctx.beginPath();\n          xCursorShapeStrokeDasharray == null\n            ? ctx.fillRect(xShape.xPos, 0, xShape.shapeWidth, xShape.height)\n            : ctx.rect(xShape.xPos, 0, xShape.shapeWidth, xShape.height);\n          ctx.fill();\n        } else {\n          ctx.strokeStyle = hexToRGBA(line.stroke, line.opacity);\n          ctx.setLineDash(dashArray);\n          ctx.beginPath();\n          ctx.moveTo(line.x1, line.y1);\n          ctx.lineTo(line.x2, line.y2);\n        }\n\n        ctx.stroke();\n      });\n\n      ctx.restore();\n    }\n  }\n\n  renderSVG(moreProps) {\n    const cursors = this.getXYCursor(this.props, moreProps);\n    if (isNotDefined(cursors)) return null;\n\n    const { className, useXCursorShape } = this.props;\n\n    return (\n      <g className={`react-stockcharts-crosshair ${className}`}>\n        {cursors.map(({ strokeDasharray, id, ...rest }, idx) => {\n          if (useXCursorShape && id === 'xCursor') {\n            const { xCursorShapeOpacity, xCursorShapeStrokeDasharray } =\n              this.props;\n            const xShape = this.getXCursorShape(moreProps);\n            const xShapeFill = this.getXCursorShapeFill(moreProps);\n            const xShapeStroke = this.getXCursorShapeStroke(moreProps);\n            return (\n              <rect\n                key={idx}\n                x={xShape.xPos}\n                y={0}\n                width={xShape.shapeWidth}\n                height={xShape.height}\n                fill={xShapeFill != null ? xShapeFill : 'none'}\n                stroke={\n                  xCursorShapeStrokeDasharray == null ? null : xShapeStroke\n                }\n                strokeDasharray={\n                  xCursorShapeStrokeDasharray == null\n                    ? null\n                    : getStrokeDasharray(xCursorShapeStrokeDasharray)\n                }\n                opacity={xCursorShapeOpacity}\n              />\n            );\n          }\n\n          return (\n            <line\n              key={idx}\n              strokeDasharray={getStrokeDasharray(strokeDasharray)}\n              {...rest}\n            />\n          );\n        })}\n      </g>\n    );\n  }\n\n  render() {\n    return (\n      <GenericComponent\n        svgDraw={this.renderSVG}\n        clip={false}\n        canvasDraw={this.drawOnCanvas}\n        canvasToDraw={getMouseCanvas}\n        drawOn={['mousemove', 'pan', 'drag']}\n      />\n    );\n  }\n}\n\nCursor.propTypes = {\n  className: PropTypes.string,\n  stroke: PropTypes.string,\n  strokeDasharray: PropTypes.oneOf(strokeDashTypes),\n  snapX: PropTypes.bool,\n  opacity: PropTypes.number,\n  disableYCursor: PropTypes.bool,\n  useXCursorShape: PropTypes.bool,\n  xCursorShapeFill: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  xCursorShapeStroke: PropTypes.oneOfType([PropTypes.string, PropTypes.func])\n    .isRequired,\n  xCursorShapeStrokeDasharray: PropTypes.oneOf(strokeDashTypes),\n  xCursorShapeOpacity: PropTypes.number,\n};\n\nCursor.contextTypes = {\n  margin: PropTypes.object.isRequired,\n  ratio: PropTypes.number.isRequired,\n  // xScale for getting update event upon pan end, this is needed to get past the PureComponent shouldComponentUpdate\n  // xScale: PropTypes.func.isRequired,\n};\n\nfunction customSnapX(props, moreProps) {\n  const { xScale, xAccessor, currentItem, mouseXY } = moreProps;\n  const { snapX } = props;\n  const x = snapX ? Math.round(xScale(xAccessor(currentItem))) : mouseXY[0];\n  return x;\n}\n\nCursor.defaultProps = {\n  stroke: '#000000',\n  opacity: 0.3,\n  strokeDasharray: 'ShortDash',\n  snapX: true, // snaps the crosshair to the nearest xValue\n  customSnapX,\n  disableYCursor: false,\n  useXCursorShape: false,\n  xCursorShapeStroke: '#000000',\n  xCursorShapeOpacity: 0.5,\n};\n\nexport default Cursor;\n"]}