{"version":3,"sources":["../../../../src/lib/utils/zipper.js"],"names":["min","identity","zipper","combine","zip","n","arguments","length","m","d3_zipLength","i","zips","Array","j","apply","d","x"],"mappings":"AAAA;;AAEA,SAASA,GAAT,QAAoB,UAApB;;AAEA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,eAAe,SAASC,MAAT,GAAkB;AAC/B,MAAIC,UAAUF,QAAd;;AAEA,WAASG,GAAT,GAAe;AACb,QAAMC,IAAIC,UAAUC,MAApB;AACA,QAAI,CAACF,CAAL,EAAQ,OAAO,EAAP;AACR,QAAMG,IAAIR,IAAIM,SAAJ,EAAeG,YAAf,CAAV;;AAEA;AACA,QAAIC,UAAJ;AAAA,QACEC,OAAO,IAAIC,KAAJ,CAAUJ,CAAV,CADT;AAEA,SAAKE,IAAI,CAAC,CAAV,EAAa,EAAEA,CAAF,GAAMF,CAAnB,GAAwB;AACtB,WAAK,IAAIK,IAAI,CAAC,CAAT,EAAYT,OAAOO,KAAKD,CAAL,IAAU,IAAIE,KAAJ,CAAUP,CAAV,CAAlC,EAAiD,EAAEQ,CAAF,GAAMR,CAAvD,GAA4D;AAC1DD,aAAIS,CAAJ,IAASP,UAAUO,CAAV,EAAaH,CAAb,CAAT;AACD;AACDC,WAAKD,CAAL,IAAUP,QAAQW,KAAR,CAAc,IAAd,EAAoBH,KAAKD,CAAL,CAApB,CAAV;AACD;AACD,WAAOC,IAAP;AACD;AACD,WAASF,YAAT,CAAsBM,CAAtB,EAAyB;AACvB,WAAOA,EAAER,MAAT;AACD;AACDH,MAAID,OAAJ,GAAc,UAAUa,CAAV,EAAa;AACzB,QAAI,CAACV,UAAUC,MAAf,EAAuB;AACrB,aAAOJ,OAAP;AACD;AACDA,cAAUa,CAAV;AACA,WAAOZ,GAAP;AACD,GAND;AAOA,SAAOA,GAAP;AACD","file":"zipper.js","sourcesContent":["/* an extension to d3.zip so we call a function instead of an array */\n\nimport { min } from 'd3-array';\n\nimport identity from './identity';\n\nexport default function zipper() {\n  let combine = identity;\n\n  function zip() {\n    const n = arguments.length;\n    if (!n) return [];\n    const m = min(arguments, d3_zipLength);\n\n    // eslint-disable-next-line prefer-const\n    let i,\n      zips = new Array(m);\n    for (i = -1; ++i < m; ) {\n      for (let j = -1, zip = (zips[i] = new Array(n)); ++j < n; ) {\n        zip[j] = arguments[j][i];\n      }\n      zips[i] = combine.apply(this, zips[i]);\n    }\n    return zips;\n  }\n  function d3_zipLength(d) {\n    return d.length;\n  }\n  zip.combine = function (x) {\n    if (!arguments.length) {\n      return combine;\n    }\n    combine = x;\n    return zip;\n  };\n  return zip;\n}\n"]}